#region License
// Copyright (c) 2013 Antonie Blom
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
#endregion

using System;
using System.Diagnostics;
using System.Text;
using System.Runtime.InteropServices;
using System.Reflection;

namespace Pencil.Gaming.Graphics {
	#pragma warning disable 3019
	#pragma warning disable 1591
	#pragma warning disable 1572
	#pragma warning disable 1573
	#pragma warning disable 3006

	public static partial class GL {
		static GL() {
#if DEBUG
			Stopwatch sw = new Stopwatch();
			sw.Start();
#endif

#if USE_GLFW3
			IntPtr bindBuffer = Glfw.GetProcAddress("glBindBuffer");
			if (bindBuffer == IntPtr.Zero) {
#else
			if (Glfw.GetWindowParam(WindowParam.Opened) == 0) {
#endif
				throw new GLLoadException();
			}

			FieldInfo[] fields = typeof(GL.Delegates).GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
			foreach (FieldInfo field in fields) {
				IntPtr procAddress = Glfw.GetProcAddress(field.Name);
				if (procAddress != IntPtr.Zero) {
					Delegate function = Marshal.GetDelegateForFunctionPointer(procAddress, field.FieldType);
					field.SetValue(null, function);
				} else {
					MethodInfo minfo = typeof(GLCore).GetMethod(field.Name, BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
					if (minfo != null) {
						Delegate function = Delegate.CreateDelegate(field.FieldType, minfo);
						field.SetValue(null, function);
					}
				}
			}
#if DEBUG
			sw.Stop();
			Console.WriteLine("Loading OpenGL functions took {0} milliseconds", sw.ElapsedMilliseconds);
#endif
		}

        // --------- Manual added functions ---------

        public static void DispatchCompute(int num_groups_x, int num_groups_y, int num_groups_z) {
            Delegates.glDispatchCompute((UInt32)num_groups_x, (UInt32)num_groups_y, (UInt32)num_groups_z);
        }

        public static void DispatchComputeIndirect(IntPtr indirect) {
            Delegates.glDispatchComputeIndirect(indirect);
        }

        public static void MemoryBarrier(Pencil.Gaming.Graphics.MemoryBarrierMask barriers) {
            Delegates.glMemoryBarrier(barriers);
        }

        // --------- Manual end -------
		
		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glAccum")]
		public static void Accum(Pencil.Gaming.Graphics.AccumOp op, Single value) {
			Delegates.glAccum((Pencil.Gaming.Graphics.AccumOp)op, (Single)value);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glActiveShaderProgram")]
		public static void ActiveShaderProgram(Int32 pipeline, Int32 program) {
			Delegates.glActiveShaderProgram((UInt32)pipeline, (UInt32)program);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glActiveShaderProgram")]
		public static void ActiveShaderProgram(UInt32 pipeline, UInt32 program) {
			Delegates.glActiveShaderProgram((UInt32)pipeline, (UInt32)program);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glActiveTexture")]
		public static void ActiveTexture(Pencil.Gaming.Graphics.TextureUnit texture) {
			Delegates.glActiveTexture((Pencil.Gaming.Graphics.TextureUnit)texture);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glAlphaFunc")]
		public static void AlphaFunc(Pencil.Gaming.Graphics.AlphaFunction func, Single @ref) {
			Delegates.glAlphaFunc((Pencil.Gaming.Graphics.AlphaFunction)func, (Single)@ref);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
		public static bool AreTexturesResident(Int32 n, Int32[] textures, [OutAttribute] bool[] residences) {
			unsafe {
				fixed (Int32* textures_ptr = textures)
					fixed (bool* residences_ptr = residences) {
						return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
		public static bool AreTexturesResident(Int32 n, ref Int32 textures, [OutAttribute] out bool residences) {
			unsafe {
				fixed (Int32* textures_ptr = &textures)
					fixed (bool* residences_ptr = &residences) {
						bool retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
						residences = *residences_ptr;
						return retval;
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
		public static unsafe bool AreTexturesResident(Int32 n, Int32* textures, [OutAttribute] bool* residences) {
			return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
		public static bool AreTexturesResident(Int32 n, UInt32[] textures, [OutAttribute] bool[] residences) {
			unsafe {
				fixed (UInt32* textures_ptr = textures)
					fixed (bool* residences_ptr = residences) {
						return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
		public static bool AreTexturesResident(Int32 n, ref UInt32 textures, [OutAttribute] out bool residences) {
			unsafe {
				fixed (UInt32* textures_ptr = &textures)
					fixed (bool* residences_ptr = &residences) {
						bool retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
						residences = *residences_ptr;
						return retval;
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glAreTexturesResident")]
		public static unsafe bool AreTexturesResident(Int32 n, UInt32* textures, [OutAttribute] bool* residences) {
			return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glArrayElement")]
		public static void ArrayElement(Int32 i) {
			Delegates.glArrayElement((Int32)i);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
		public static void AttachShader(Int32 program, Int32 shader) {
			Delegates.glAttachShader((UInt32)program, (UInt32)shader);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
		public static void AttachShader(UInt32 program, UInt32 shader) {
			Delegates.glAttachShader((UInt32)program, (UInt32)shader);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBegin")]
		public static void Begin(Pencil.Gaming.Graphics.BeginMode mode) {
			Delegates.glBegin((Pencil.Gaming.Graphics.BeginMode)mode);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
		public static void BeginConditionalRender(Int32 id, Pencil.Gaming.Graphics.ConditionalRenderType mode) {
			Delegates.glBeginConditionalRender((UInt32)id, (Pencil.Gaming.Graphics.ConditionalRenderType)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginConditionalRender")]
		public static void BeginConditionalRender(UInt32 id, Pencil.Gaming.Graphics.ConditionalRenderType mode) {
			Delegates.glBeginConditionalRender((UInt32)id, (Pencil.Gaming.Graphics.ConditionalRenderType)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
		public static void BeginQuery(Pencil.Gaming.Graphics.QueryTarget target, Int32 id) {
			Delegates.glBeginQuery((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)id);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBeginQuery")]
		public static void BeginQuery(Pencil.Gaming.Graphics.QueryTarget target, UInt32 id) {
			Delegates.glBeginQuery((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glBeginQueryIndexed")]
		public static void BeginQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, Int32 index, Int32 id) {
			Delegates.glBeginQueryIndexed((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index, (UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glBeginQueryIndexed")]
		public static void BeginQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, UInt32 index, UInt32 id) {
			Delegates.glBeginQueryIndexed((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index, (UInt32)id);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBeginTransformFeedback")]
		public static void BeginTransformFeedback(Pencil.Gaming.Graphics.BeginFeedbackMode primitiveMode) {
			Delegates.glBeginTransformFeedback((Pencil.Gaming.Graphics.BeginFeedbackMode)primitiveMode);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
		public static void BindAttribLocation(Int32 program, Int32 index, String name) {
			Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (String)name);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
		public static void BindAttribLocation(UInt32 program, UInt32 index, String name) {
			Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, (String)name);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
		public static void BindBuffer(Pencil.Gaming.Graphics.BufferTarget target, Int32 buffer) {
			Delegates.glBindBuffer((Pencil.Gaming.Graphics.BufferTarget)target, (UInt32)buffer);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBindBuffer")]
		public static void BindBuffer(Pencil.Gaming.Graphics.BufferTarget target, UInt32 buffer) {
			Delegates.glBindBuffer((Pencil.Gaming.Graphics.BufferTarget)target, (UInt32)buffer);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
		public static void BindBufferBase(Pencil.Gaming.Graphics.BufferTarget target, Int32 index, Int32 buffer) {
			Delegates.glBindBufferBase((Pencil.Gaming.Graphics.BufferTarget)target, (UInt32)index, (UInt32)buffer);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferBase")]
		public static void BindBufferBase(Pencil.Gaming.Graphics.BufferTarget target, UInt32 index, UInt32 buffer) {
			Delegates.glBindBufferBase((Pencil.Gaming.Graphics.BufferTarget)target, (UInt32)index, (UInt32)buffer);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
		public static void BindBufferRange(Pencil.Gaming.Graphics.BufferTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size) {
			Delegates.glBindBufferRange((Pencil.Gaming.Graphics.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindBufferRange")]
		public static void BindBufferRange(Pencil.Gaming.Graphics.BufferTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size) {
			Delegates.glBindBufferRange((Pencil.Gaming.Graphics.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
		public static void BindFragDataLocation(Int32 program, Int32 color, String name) {
			Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, (String)name);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glBindFragDataLocation")]
		public static void BindFragDataLocation(UInt32 program, UInt32 color, String name) {
			Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_blend_func_extended", Version = "1.2", EntryPoint = "glBindFragDataLocationIndexed")]
		public static void BindFragDataLocationIndexed(Int32 program, Int32 colorNumber, Int32 index, String name) {
			Delegates.glBindFragDataLocationIndexed((UInt32)program, (UInt32)colorNumber, (UInt32)index, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_blend_func_extended", Version = "1.2", EntryPoint = "glBindFragDataLocationIndexed")]
		public static void BindFragDataLocationIndexed(UInt32 program, UInt32 colorNumber, UInt32 index, String name) {
			Delegates.glBindFragDataLocationIndexed((UInt32)program, (UInt32)colorNumber, (UInt32)index, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindFramebuffer")]
		public static void BindFramebuffer(Pencil.Gaming.Graphics.FramebufferTarget target, Int32 framebuffer) {
			Delegates.glBindFramebuffer((Pencil.Gaming.Graphics.FramebufferTarget)target, (UInt32)framebuffer);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindFramebuffer")]
		public static void BindFramebuffer(Pencil.Gaming.Graphics.FramebufferTarget target, UInt32 framebuffer) {
			Delegates.glBindFramebuffer((Pencil.Gaming.Graphics.FramebufferTarget)target, (UInt32)framebuffer);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glBindProgramPipeline")]
		public static void BindProgramPipeline(Int32 pipeline) {
			Delegates.glBindProgramPipeline((UInt32)pipeline);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glBindProgramPipeline")]
		public static void BindProgramPipeline(UInt32 pipeline) {
			Delegates.glBindProgramPipeline((UInt32)pipeline);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
		public static void BindRenderbuffer(Pencil.Gaming.Graphics.RenderbufferTarget target, Int32 renderbuffer) {
			Delegates.glBindRenderbuffer((Pencil.Gaming.Graphics.RenderbufferTarget)target, (UInt32)renderbuffer);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBindRenderbuffer")]
		public static void BindRenderbuffer(Pencil.Gaming.Graphics.RenderbufferTarget target, UInt32 renderbuffer) {
			Delegates.glBindRenderbuffer((Pencil.Gaming.Graphics.RenderbufferTarget)target, (UInt32)renderbuffer);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glBindSampler")]
		public static void BindSampler(Int32 unit, Int32 sampler) {
			Delegates.glBindSampler((UInt32)unit, (UInt32)sampler);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glBindSampler")]
		public static void BindSampler(UInt32 unit, UInt32 sampler) {
			Delegates.glBindSampler((UInt32)unit, (UInt32)sampler);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
		public static void BindTexture(Pencil.Gaming.Graphics.TextureTarget target, Int32 texture) {
			Delegates.glBindTexture((Pencil.Gaming.Graphics.TextureTarget)target, (UInt32)texture);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glBindTexture")]
		public static void BindTexture(Pencil.Gaming.Graphics.TextureTarget target, UInt32 texture) {
			Delegates.glBindTexture((Pencil.Gaming.Graphics.TextureTarget)target, (UInt32)texture);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glBindTransformFeedback")]
		public static void BindTransformFeedback(Pencil.Gaming.Graphics.TransformFeedbackTarget target, Int32 id) {
			Delegates.glBindTransformFeedback((Pencil.Gaming.Graphics.TransformFeedbackTarget)target, (UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glBindTransformFeedback")]
		public static void BindTransformFeedback(Pencil.Gaming.Graphics.TransformFeedbackTarget target, UInt32 id) {
			Delegates.glBindTransformFeedback((Pencil.Gaming.Graphics.TransformFeedbackTarget)target, (UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glBindVertexArray")]
		public static void BindVertexArray(Int32 array) {
			Delegates.glBindVertexArray((UInt32)array);
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glBindVertexArray")]
		public static void BindVertexArray(UInt32 array) {
			Delegates.glBindVertexArray((UInt32)array);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBitmap")]
		public static void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte[] bitmap) {
			unsafe {
				fixed (Byte* bitmap_ptr = bitmap) {
					Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBitmap")]
		public static void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, ref Byte bitmap) {
			unsafe {
				fixed (Byte* bitmap_ptr = &bitmap) {
					Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glBitmap")]
		public static unsafe void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte* bitmap) {
			Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glBlendColor")]
		public static void BlendColor(Single red, Single green, Single blue, Single alpha) {
			Delegates.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glBlendEquation")]
		public static void BlendEquation(Pencil.Gaming.Graphics.BlendEquationMode mode) {
			Delegates.glBlendEquation((Pencil.Gaming.Graphics.BlendEquationMode)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glBlendEquationi")]
		public static void BlendEquation(Int32 buf, Pencil.Gaming.Graphics.Version40 mode) {
			Delegates.glBlendEquationi((UInt32)buf, (Pencil.Gaming.Graphics.Version40)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glBlendEquationi")]
		public static void BlendEquation(UInt32 buf, Pencil.Gaming.Graphics.Version40 mode) {
			Delegates.glBlendEquationi((UInt32)buf, (Pencil.Gaming.Graphics.Version40)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
		public static void BlendEquationSeparate(Pencil.Gaming.Graphics.BlendEquationMode modeRGB, Pencil.Gaming.Graphics.BlendEquationMode modeAlpha) {
			Delegates.glBlendEquationSeparate((Pencil.Gaming.Graphics.BlendEquationMode)modeRGB, (Pencil.Gaming.Graphics.BlendEquationMode)modeAlpha);
		}

		
		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glBlendEquationSeparatei")]
		public static void BlendEquationSeparate(Int32 buf, Pencil.Gaming.Graphics.BlendEquationMode modeRGB, Pencil.Gaming.Graphics.BlendEquationMode modeAlpha) {
			Delegates.glBlendEquationSeparatei((UInt32)buf, (Pencil.Gaming.Graphics.BlendEquationMode)modeRGB, (Pencil.Gaming.Graphics.BlendEquationMode)modeAlpha);
		}

		
		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glBlendEquationSeparatei")]
		public static void BlendEquationSeparate(UInt32 buf, Pencil.Gaming.Graphics.BlendEquationMode modeRGB, Pencil.Gaming.Graphics.BlendEquationMode modeAlpha) {
			Delegates.glBlendEquationSeparatei((UInt32)buf, (Pencil.Gaming.Graphics.BlendEquationMode)modeRGB, (Pencil.Gaming.Graphics.BlendEquationMode)modeAlpha);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glBlendFunc")]
		public static void BlendFunc(Pencil.Gaming.Graphics.BlendingFactorSrc sfactor, Pencil.Gaming.Graphics.BlendingFactorDest dfactor) {
			Delegates.glBlendFunc((Pencil.Gaming.Graphics.BlendingFactorSrc)sfactor, (Pencil.Gaming.Graphics.BlendingFactorDest)dfactor);
		}

		
		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glBlendFunci")]
		public static void BlendFunc(Int32 buf, Pencil.Gaming.Graphics.Version40 src, Pencil.Gaming.Graphics.Version40 dst) {
			Delegates.glBlendFunci((UInt32)buf, (Pencil.Gaming.Graphics.Version40)src, (Pencil.Gaming.Graphics.Version40)dst);
		}

		
		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glBlendFunci")]
		public static void BlendFunc(UInt32 buf, Pencil.Gaming.Graphics.Version40 src, Pencil.Gaming.Graphics.Version40 dst) {
			Delegates.glBlendFunci((UInt32)buf, (Pencil.Gaming.Graphics.Version40)src, (Pencil.Gaming.Graphics.Version40)dst);
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glBlendFuncSeparate")]
		public static void BlendFuncSeparate(Pencil.Gaming.Graphics.BlendingFactorSrc sfactorRGB, Pencil.Gaming.Graphics.BlendingFactorDest dfactorRGB, Pencil.Gaming.Graphics.BlendingFactorSrc sfactorAlpha, Pencil.Gaming.Graphics.BlendingFactorDest dfactorAlpha) {
			Delegates.glBlendFuncSeparate((Pencil.Gaming.Graphics.BlendingFactorSrc)sfactorRGB, (Pencil.Gaming.Graphics.BlendingFactorDest)dfactorRGB, (Pencil.Gaming.Graphics.BlendingFactorSrc)sfactorAlpha, (Pencil.Gaming.Graphics.BlendingFactorDest)dfactorAlpha);
		}

		
		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glBlendFuncSeparatei")]
		public static void BlendFuncSeparate(Int32 buf, Pencil.Gaming.Graphics.Version40 srcRGB, Pencil.Gaming.Graphics.Version40 dstRGB, Pencil.Gaming.Graphics.Version40 srcAlpha, Pencil.Gaming.Graphics.Version40 dstAlpha) {
			Delegates.glBlendFuncSeparatei((UInt32)buf, (Pencil.Gaming.Graphics.Version40)srcRGB, (Pencil.Gaming.Graphics.Version40)dstRGB, (Pencil.Gaming.Graphics.Version40)srcAlpha, (Pencil.Gaming.Graphics.Version40)dstAlpha);
		}

		
		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glBlendFuncSeparatei")]
		public static void BlendFuncSeparate(UInt32 buf, Pencil.Gaming.Graphics.Version40 srcRGB, Pencil.Gaming.Graphics.Version40 dstRGB, Pencil.Gaming.Graphics.Version40 srcAlpha, Pencil.Gaming.Graphics.Version40 dstAlpha) {
			Delegates.glBlendFuncSeparatei((UInt32)buf, (Pencil.Gaming.Graphics.Version40)srcRGB, (Pencil.Gaming.Graphics.Version40)dstRGB, (Pencil.Gaming.Graphics.Version40)srcAlpha, (Pencil.Gaming.Graphics.Version40)dstAlpha);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glBlitFramebuffer")]
		public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Pencil.Gaming.Graphics.ClearBufferMask mask, Pencil.Gaming.Graphics.BlitFramebufferFilter filter) {
			Delegates.glBlitFramebuffer((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (Pencil.Gaming.Graphics.ClearBufferMask)mask, (Pencil.Gaming.Graphics.BlitFramebufferFilter)filter);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
		public static void BufferData(Pencil.Gaming.Graphics.BufferTarget target, IntPtr size, IntPtr data, Pencil.Gaming.Graphics.BufferUsageHint usage) {
			Delegates.glBufferData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)size, (IntPtr)data, (Pencil.Gaming.Graphics.BufferUsageHint)usage);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
		public static void BufferData<T2>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, Pencil.Gaming.Graphics.BufferUsageHint usage)
			where T2 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glBufferData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Pencil.Gaming.Graphics.BufferUsageHint)usage);
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
		public static void BufferData<T2>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, Pencil.Gaming.Graphics.BufferUsageHint usage)
			where T2 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glBufferData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Pencil.Gaming.Graphics.BufferUsageHint)usage);
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
		public static void BufferData<T2>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, Pencil.Gaming.Graphics.BufferUsageHint usage)
			where T2 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glBufferData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Pencil.Gaming.Graphics.BufferUsageHint)usage);
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferData")]
		public static void BufferData<T2>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, Pencil.Gaming.Graphics.BufferUsageHint usage)
			where T2 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glBufferData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Pencil.Gaming.Graphics.BufferUsageHint)usage);
				data = (T2)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
		public static void BufferSubData(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data) {
			Delegates.glBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
		public static void BufferSubData<T3>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
			where T3 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
		public static void BufferSubData<T3>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
			where T3 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
		public static void BufferSubData<T3>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
			where T3 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glBufferSubData")]
		public static void BufferSubData<T3>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
			where T3 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T3)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallList")]
		public static void CallList(Int32 list) {
			Delegates.glCallList((UInt32)list);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallList")]
		public static void CallList(UInt32 list) {
			Delegates.glCallList((UInt32)list);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
		public static void CallLists(Int32 n, Pencil.Gaming.Graphics.ListNameType type, IntPtr lists) {
			Delegates.glCallLists((Int32)n, (Pencil.Gaming.Graphics.ListNameType)type, (IntPtr)lists);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
		public static void CallLists<T2>(Int32 n, Pencil.Gaming.Graphics.ListNameType type, [InAttribute, OutAttribute] T2[] lists)
			where T2 : struct {
			GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
			try {
				Delegates.glCallLists((Int32)n, (Pencil.Gaming.Graphics.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
			} finally {
				lists_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
		public static void CallLists<T2>(Int32 n, Pencil.Gaming.Graphics.ListNameType type, [InAttribute, OutAttribute] T2[,] lists)
			where T2 : struct {
			GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
			try {
				Delegates.glCallLists((Int32)n, (Pencil.Gaming.Graphics.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
			} finally {
				lists_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
		public static void CallLists<T2>(Int32 n, Pencil.Gaming.Graphics.ListNameType type, [InAttribute, OutAttribute] T2[,,] lists)
			where T2 : struct {
			GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
			try {
				Delegates.glCallLists((Int32)n, (Pencil.Gaming.Graphics.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
			} finally {
				lists_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCallLists")]
		public static void CallLists<T2>(Int32 n, Pencil.Gaming.Graphics.ListNameType type, [InAttribute, OutAttribute] ref T2 lists)
			where T2 : struct {
			GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
			try {
				Delegates.glCallLists((Int32)n, (Pencil.Gaming.Graphics.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
				lists = (T2)lists_ptr.Target;
			} finally {
				lists_ptr.Free();
			}
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glCheckFramebufferStatus")]
		public static Pencil.Gaming.Graphics.FramebufferErrorCode CheckFramebufferStatus(Pencil.Gaming.Graphics.FramebufferTarget target) {
			return Delegates.glCheckFramebufferStatus((Pencil.Gaming.Graphics.FramebufferTarget)target);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClampColor")]
		public static void ClampColor(Pencil.Gaming.Graphics.ClampColorTarget target, Pencil.Gaming.Graphics.ClampColorMode clamp) {
			Delegates.glClampColor((Pencil.Gaming.Graphics.ClampColorTarget)target, (Pencil.Gaming.Graphics.ClampColorMode)clamp);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClear")]
		public static void Clear(Pencil.Gaming.Graphics.ClearBufferMask mask) {
			Delegates.glClear((Pencil.Gaming.Graphics.ClearBufferMask)mask);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClearAccum")]
		public static void ClearAccum(Single red, Single green, Single blue, Single alpha) {
			Delegates.glClearAccum((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfi")]
		public static void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, Single depth, Int32 stencil) {
			Delegates.glClearBufferfi((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (Single)depth, (Int32)stencil);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
		public static void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glClearBufferfv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
		public static void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glClearBufferfv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferfv")]
		public static unsafe void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, Single* value) {
			Delegates.glClearBufferfv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
		public static void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glClearBufferiv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
		public static void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glClearBufferiv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferiv")]
		public static unsafe void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, Int32* value) {
			Delegates.glClearBufferiv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
		public static void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, UInt32[] value) {
			unsafe {
				fixed (UInt32* value_ptr = value) {
					Delegates.glClearBufferuiv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
		public static void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glClearBufferuiv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glClearBufferuiv")]
		public static unsafe void ClearBuffer(Pencil.Gaming.Graphics.ClearBuffer buffer, Int32 drawbuffer, UInt32* value) {
			Delegates.glClearBufferuiv((Pencil.Gaming.Graphics.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearColor")]
		public static void ClearColor(Single red, Single green, Single blue, Single alpha) {
			Delegates.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearDepth")]
		public static void ClearDepth(Double depth) {
			Delegates.glClearDepth((Double)depth);
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glClearDepthf")]
		public static void ClearDepth(Single d) {
			Delegates.glClearDepthf((Single)d);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClearIndex")]
		public static void ClearIndex(Single c) {
			Delegates.glClearIndex((Single)c);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glClearStencil")]
		public static void ClearStencil(Int32 s) {
			Delegates.glClearStencil((Int32)s);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glClientActiveTexture")]
		public static void ClientActiveTexture(Pencil.Gaming.Graphics.TextureUnit texture) {
			Delegates.glClientActiveTexture((Pencil.Gaming.Graphics.TextureUnit)texture);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glClientWaitSync")]
		public static Pencil.Gaming.Graphics.ArbSync ClientWaitSync(IntPtr sync, Int32 flags, Int64 timeout) {
			return Delegates.glClientWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glClientWaitSync")]
		public static Pencil.Gaming.Graphics.ArbSync ClientWaitSync(IntPtr sync, UInt32 flags, UInt64 timeout) {
			return Delegates.glClientWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
		public static void ClipPlane(Pencil.Gaming.Graphics.ClipPlaneName plane, Double[] equation) {
			unsafe {
				fixed (Double* equation_ptr = equation) {
					Delegates.glClipPlane((Pencil.Gaming.Graphics.ClipPlaneName)plane, (Double*)equation_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
		public static void ClipPlane(Pencil.Gaming.Graphics.ClipPlaneName plane, ref Double equation) {
			unsafe {
				fixed (Double* equation_ptr = &equation) {
					Delegates.glClipPlane((Pencil.Gaming.Graphics.ClipPlaneName)plane, (Double*)equation_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glClipPlane")]
		public static unsafe void ClipPlane(Pencil.Gaming.Graphics.ClipPlaneName plane, Double* equation) {
			Delegates.glClipPlane((Pencil.Gaming.Graphics.ClipPlaneName)plane, (Double*)equation);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3b")]
		public static void Color3(SByte red, SByte green, SByte blue) {
			Delegates.glColor3b((SByte)red, (SByte)green, (SByte)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3bv")]
		public static void Color3(SByte[] v) {
			unsafe {
				fixed (SByte* v_ptr = v) {
					Delegates.glColor3bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3bv")]
		public static void Color3(ref SByte v) {
			unsafe {
				fixed (SByte* v_ptr = &v) {
					Delegates.glColor3bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3bv")]
		public static unsafe void Color3(SByte* v) {
			Delegates.glColor3bv((SByte*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3d")]
		public static void Color3(Double red, Double green, Double blue) {
			Delegates.glColor3d((Double)red, (Double)green, (Double)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3dv")]
		public static void Color3(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glColor3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3dv")]
		public static void Color3(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glColor3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3dv")]
		public static unsafe void Color3(Double* v) {
			Delegates.glColor3dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3f")]
		public static void Color3(Single red, Single green, Single blue) {
			Delegates.glColor3f((Single)red, (Single)green, (Single)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3fv")]
		public static void Color3(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glColor3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3fv")]
		public static void Color3(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glColor3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3fv")]
		public static unsafe void Color3(Single* v) {
			Delegates.glColor3fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3i")]
		public static void Color3(Int32 red, Int32 green, Int32 blue) {
			Delegates.glColor3i((Int32)red, (Int32)green, (Int32)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3iv")]
		public static void Color3(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glColor3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3iv")]
		public static void Color3(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glColor3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3iv")]
		public static unsafe void Color3(Int32* v) {
			Delegates.glColor3iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3s")]
		public static void Color3(Int16 red, Int16 green, Int16 blue) {
			Delegates.glColor3s((Int16)red, (Int16)green, (Int16)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3sv")]
		public static void Color3(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glColor3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3sv")]
		public static void Color3(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glColor3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3sv")]
		public static unsafe void Color3(Int16* v) {
			Delegates.glColor3sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ub")]
		public static void Color3(Byte red, Byte green, Byte blue) {
			Delegates.glColor3ub((Byte)red, (Byte)green, (Byte)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ubv")]
		public static void Color3(Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glColor3ubv((Byte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ubv")]
		public static void Color3(ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glColor3ubv((Byte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ubv")]
		public static unsafe void Color3(Byte* v) {
			Delegates.glColor3ubv((Byte*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3ui")]
		public static void Color3(UInt32 red, UInt32 green, UInt32 blue) {
			Delegates.glColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3uiv")]
		public static void Color3(UInt32[] v) {
			unsafe {
				fixed (UInt32* v_ptr = v) {
					Delegates.glColor3uiv((UInt32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3uiv")]
		public static void Color3(ref UInt32 v) {
			unsafe {
				fixed (UInt32* v_ptr = &v) {
					Delegates.glColor3uiv((UInt32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3uiv")]
		public static unsafe void Color3(UInt32* v) {
			Delegates.glColor3uiv((UInt32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3us")]
		public static void Color3(UInt16 red, UInt16 green, UInt16 blue) {
			Delegates.glColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3usv")]
		public static void Color3(UInt16[] v) {
			unsafe {
				fixed (UInt16* v_ptr = v) {
					Delegates.glColor3usv((UInt16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3usv")]
		public static void Color3(ref UInt16 v) {
			unsafe {
				fixed (UInt16* v_ptr = &v) {
					Delegates.glColor3usv((UInt16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor3usv")]
		public static unsafe void Color3(UInt16* v) {
			Delegates.glColor3usv((UInt16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4b")]
		public static void Color4(SByte red, SByte green, SByte blue, SByte alpha) {
			Delegates.glColor4b((SByte)red, (SByte)green, (SByte)blue, (SByte)alpha);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4bv")]
		public static void Color4(SByte[] v) {
			unsafe {
				fixed (SByte* v_ptr = v) {
					Delegates.glColor4bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4bv")]
		public static void Color4(ref SByte v) {
			unsafe {
				fixed (SByte* v_ptr = &v) {
					Delegates.glColor4bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4bv")]
		public static unsafe void Color4(SByte* v) {
			Delegates.glColor4bv((SByte*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4d")]
		public static void Color4(Double red, Double green, Double blue, Double alpha) {
			Delegates.glColor4d((Double)red, (Double)green, (Double)blue, (Double)alpha);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4dv")]
		public static void Color4(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glColor4dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4dv")]
		public static void Color4(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glColor4dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4dv")]
		public static unsafe void Color4(Double* v) {
			Delegates.glColor4dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4f")]
		public static void Color4(Single red, Single green, Single blue, Single alpha) {
			Delegates.glColor4f((Single)red, (Single)green, (Single)blue, (Single)alpha);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4fv")]
		public static void Color4(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glColor4fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4fv")]
		public static void Color4(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glColor4fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4fv")]
		public static unsafe void Color4(Single* v) {
			Delegates.glColor4fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4i")]
		public static void Color4(Int32 red, Int32 green, Int32 blue, Int32 alpha) {
			Delegates.glColor4i((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4iv")]
		public static void Color4(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glColor4iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4iv")]
		public static void Color4(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glColor4iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4iv")]
		public static unsafe void Color4(Int32* v) {
			Delegates.glColor4iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4s")]
		public static void Color4(Int16 red, Int16 green, Int16 blue, Int16 alpha) {
			Delegates.glColor4s((Int16)red, (Int16)green, (Int16)blue, (Int16)alpha);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4sv")]
		public static void Color4(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glColor4sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4sv")]
		public static void Color4(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glColor4sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4sv")]
		public static unsafe void Color4(Int16* v) {
			Delegates.glColor4sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ub")]
		public static void Color4(Byte red, Byte green, Byte blue, Byte alpha) {
			Delegates.glColor4ub((Byte)red, (Byte)green, (Byte)blue, (Byte)alpha);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ubv")]
		public static void Color4(Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glColor4ubv((Byte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ubv")]
		public static void Color4(ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glColor4ubv((Byte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ubv")]
		public static unsafe void Color4(Byte* v) {
			Delegates.glColor4ubv((Byte*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4ui")]
		public static void Color4(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha) {
			Delegates.glColor4ui((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4uiv")]
		public static void Color4(UInt32[] v) {
			unsafe {
				fixed (UInt32* v_ptr = v) {
					Delegates.glColor4uiv((UInt32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4uiv")]
		public static void Color4(ref UInt32 v) {
			unsafe {
				fixed (UInt32* v_ptr = &v) {
					Delegates.glColor4uiv((UInt32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4uiv")]
		public static unsafe void Color4(UInt32* v) {
			Delegates.glColor4uiv((UInt32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4us")]
		public static void Color4(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha) {
			Delegates.glColor4us((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4usv")]
		public static void Color4(UInt16[] v) {
			unsafe {
				fixed (UInt16* v_ptr = v) {
					Delegates.glColor4usv((UInt16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4usv")]
		public static void Color4(ref UInt16 v) {
			unsafe {
				fixed (UInt16* v_ptr = &v) {
					Delegates.glColor4usv((UInt16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColor4usv")]
		public static unsafe void Color4(UInt16* v) {
			Delegates.glColor4usv((UInt16*)v);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glColorMask")]
		public static void ColorMask(bool red, bool green, bool blue, bool alpha) {
			Delegates.glColorMask((bool)red, (bool)green, (bool)blue, (bool)alpha);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
		public static void ColorMask(Int32 index, bool r, bool g, bool b, bool a) {
			Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glColorMaski")]
		public static void ColorMask(UInt32 index, bool r, bool g, bool b, bool a) {
			Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glColorMaterial")]
		public static void ColorMaterial(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.ColorMaterialParameter mode) {
			Delegates.glColorMaterial((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.ColorMaterialParameter)mode);
		}
		#endif

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glColorP3ui")]
		public static void ColorP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32 color) {
			Delegates.glColorP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glColorP3ui")]
		public static void ColorP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 color) {
			Delegates.glColorP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glColorP3uiv")]
		public static unsafe void ColorP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32* color) {
			Delegates.glColorP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glColorP3uiv")]
		public static unsafe void ColorP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* color) {
			Delegates.glColorP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glColorP4ui")]
		public static void ColorP4(Pencil.Gaming.Graphics.PackedPointerType type, Int32 color) {
			Delegates.glColorP4ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glColorP4ui")]
		public static void ColorP4(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 color) {
			Delegates.glColorP4ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glColorP4uiv")]
		public static unsafe void ColorP4(Pencil.Gaming.Graphics.PackedPointerType type, Int32* color) {
			Delegates.glColorP4uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glColorP4uiv")]
		public static unsafe void ColorP4(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* color) {
			Delegates.glColorP4uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)color);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
		public static void ColorPointer(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
		public static void ColorPointer<T3>(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
		public static void ColorPointer<T3>(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
		public static void ColorPointer<T3>(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glColorPointer")]
		public static void ColorPointer<T3>(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T3)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
		public static void ColorSubTable(Pencil.Gaming.Graphics.ColorTableTarget target, Int32 start, Int32 count, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr data) {
			Delegates.glColorSubTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Int32)start, (Int32)count, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)data);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
		public static void ColorSubTable<T5>(Pencil.Gaming.Graphics.ColorTableTarget target, Int32 start, Int32 count, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[] data)
			where T5 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glColorSubTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Int32)start, (Int32)count, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
		public static void ColorSubTable<T5>(Pencil.Gaming.Graphics.ColorTableTarget target, Int32 start, Int32 count, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[,] data)
			where T5 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glColorSubTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Int32)start, (Int32)count, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
		public static void ColorSubTable<T5>(Pencil.Gaming.Graphics.ColorTableTarget target, Int32 start, Int32 count, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[,,] data)
			where T5 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glColorSubTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Int32)start, (Int32)count, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorSubTable")]
		public static void ColorSubTable<T5>(Pencil.Gaming.Graphics.ColorTableTarget target, Int32 start, Int32 count, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T5 data)
			where T5 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glColorSubTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Int32)start, (Int32)count, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T5)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
		public static void ColorTable(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr table) {
			Delegates.glColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
		public static void ColorTable<T5>(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[] table)
			where T5 : struct {
			GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
			try {
				Delegates.glColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
			} finally {
				table_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
		public static void ColorTable<T5>(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[,] table)
			where T5 : struct {
			GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
			try {
				Delegates.glColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
			} finally {
				table_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
		public static void ColorTable<T5>(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[,,] table)
			where T5 : struct {
			GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
			try {
				Delegates.glColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
			} finally {
				table_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTable")]
		public static void ColorTable<T5>(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T5 table)
			where T5 : struct {
			GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
			try {
				Delegates.glColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
				table = (T5)table_ptr.Target;
			} finally {
				table_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
		public static void ColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.ColorTableParameterPName pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glColorTableParameterfv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.ColorTableParameterPName)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
		public static void ColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.ColorTableParameterPName pname, ref Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glColorTableParameterfv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.ColorTableParameterPName)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameterfv")]
		public static unsafe void ColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.ColorTableParameterPName pname, Single* @params) {
			Delegates.glColorTableParameterfv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.ColorTableParameterPName)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
		public static void ColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.ColorTableParameterPName pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glColorTableParameteriv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.ColorTableParameterPName)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
		public static void ColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.ColorTableParameterPName pname, ref Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glColorTableParameteriv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.ColorTableParameterPName)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glColorTableParameteriv")]
		public static unsafe void ColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.ColorTableParameterPName pname, Int32* @params) {
			Delegates.glColorTableParameteriv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.ColorTableParameterPName)pname, (Int32*)@params);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
		public static void CompileShader(Int32 shader) {
			Delegates.glCompileShader((UInt32)shader);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
		public static void CompileShader(UInt32 shader) {
			Delegates.glCompileShader((UInt32)shader);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
		public static void CompressedTexImage1D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data) {
			Delegates.glCompressedTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
		public static void CompressedTexImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
			where T6 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
		public static void CompressedTexImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
			where T6 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
		public static void CompressedTexImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
			where T6 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage1D")]
		public static void CompressedTexImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
			where T6 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T6)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data) {
			Delegates.glCompressedTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D<T7>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
			where T7 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D<T7>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
			where T7 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D<T7>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
			where T7 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage2D")]
		public static void CompressedTexImage2D<T7>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
			where T7 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T7)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
		public static void CompressedTexImage3D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data) {
			Delegates.glCompressedTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
		public static void CompressedTexImage3D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
			where T8 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
		public static void CompressedTexImage3D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
			where T8 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
		public static void CompressedTexImage3D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
			where T8 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexImage3D")]
		public static void CompressedTexImage3D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
			where T8 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T8)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
		public static void CompressedTexSubImage1D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, IntPtr data) {
			Delegates.glCompressedTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
		public static void CompressedTexSubImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[] data)
			where T6 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
		public static void CompressedTexSubImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,] data)
			where T6 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
		public static void CompressedTexSubImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T6[,,] data)
			where T6 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage1D")]
		public static void CompressedTexSubImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T6 data)
			where T6 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T6)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, IntPtr data) {
			Delegates.glCompressedTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
			where T8 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
			where T8 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
			where T8 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage2D")]
		public static void CompressedTexSubImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
			where T8 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T8)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
		public static void CompressedTexSubImage3D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, IntPtr data) {
			Delegates.glCompressedTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
		public static void CompressedTexSubImage3D<T10>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
			where T10 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
		public static void CompressedTexSubImage3D<T10>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
			where T10 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
		public static void CompressedTexSubImage3D<T10>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
			where T10 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glCompressedTexSubImage3D")]
		public static void CompressedTexSubImage3D<T10>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
			where T10 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glCompressedTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T10)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
		public static void ConvolutionFilter1D(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr image) {
			Delegates.glConvolutionFilter1D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
		public static void ConvolutionFilter1D<T5>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[] image)
			where T5 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glConvolutionFilter1D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
		public static void ConvolutionFilter1D<T5>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[,] image)
			where T5 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glConvolutionFilter1D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
		public static void ConvolutionFilter1D<T5>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T5[,,] image)
			where T5 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glConvolutionFilter1D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter1D")]
		public static void ConvolutionFilter1D<T5>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T5 image)
			where T5 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glConvolutionFilter1D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				image = (T5)image_ptr.Target;
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
		public static void ConvolutionFilter2D(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr image) {
			Delegates.glConvolutionFilter2D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
		public static void ConvolutionFilter2D<T6>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[] image)
			where T6 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glConvolutionFilter2D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
		public static void ConvolutionFilter2D<T6>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[,] image)
			where T6 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glConvolutionFilter2D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
		public static void ConvolutionFilter2D<T6>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[,,] image)
			where T6 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glConvolutionFilter2D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionFilter2D")]
		public static void ConvolutionFilter2D<T6>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T6 image)
			where T6 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glConvolutionFilter2D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				image = (T6)image_ptr.Target;
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterf")]
		public static void ConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.ConvolutionParameter pname, Single @params) {
			Delegates.glConvolutionParameterf((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.ConvolutionParameter)pname, (Single)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
		public static void ConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.ConvolutionParameter pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glConvolutionParameterfv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.ConvolutionParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameterfv")]
		public static unsafe void ConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.ConvolutionParameter pname, Single* @params) {
			Delegates.glConvolutionParameterfv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.ConvolutionParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteri")]
		public static void ConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.ConvolutionParameter pname, Int32 @params) {
			Delegates.glConvolutionParameteri((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.ConvolutionParameter)pname, (Int32)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
		public static void ConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.ConvolutionParameter pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glConvolutionParameteriv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.ConvolutionParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glConvolutionParameteriv")]
		public static unsafe void ConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.ConvolutionParameter pname, Int32* @params) {
			Delegates.glConvolutionParameteriv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.ConvolutionParameter)pname, (Int32*)@params);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_copy_buffer", Version = "3.0", EntryPoint = "glCopyBufferSubData")]
		public static void CopyBufferSubData(Pencil.Gaming.Graphics.BufferTarget readTarget, Pencil.Gaming.Graphics.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) {
			Delegates.glCopyBufferSubData((Pencil.Gaming.Graphics.BufferTarget)readTarget, (Pencil.Gaming.Graphics.BufferTarget)writeTarget, (IntPtr)readOffset, (IntPtr)writeOffset, (IntPtr)size);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyColorSubTable")]
		public static void CopyColorSubTable(Pencil.Gaming.Graphics.ColorTableTarget target, Int32 start, Int32 x, Int32 y, Int32 width) {
			Delegates.glCopyColorSubTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyColorTable")]
		public static void CopyColorTable(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width) {
			Delegates.glCopyColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyConvolutionFilter1D")]
		public static void CopyConvolutionFilter1D(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width) {
			Delegates.glCopyConvolutionFilter1D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glCopyConvolutionFilter2D")]
		public static void CopyConvolutionFilter2D(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height) {
			Delegates.glCopyConvolutionFilter2D((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glCopyPixels")]
		public static void CopyPixels(Int32 x, Int32 y, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelCopyType type) {
			Delegates.glCopyPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelCopyType)type);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage1D")]
		public static void CopyTexImage1D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border) {
			Delegates.glCopyTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexImage2D")]
		public static void CopyTexImage2D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border) {
			Delegates.glCopyTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage1D")]
		public static void CopyTexSubImage1D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width) {
			Delegates.glCopyTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glCopyTexSubImage2D")]
		public static void CopyTexSubImage2D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) {
			Delegates.glCopyTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glCopyTexSubImage3D")]
		public static void CopyTexSubImage3D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) {
			Delegates.glCopyTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
		public static Int32 CreateProgram() {
			return Delegates.glCreateProgram();
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
		public static Int32 CreateShader(Pencil.Gaming.Graphics.ShaderType type) {
			return Delegates.glCreateShader((Pencil.Gaming.Graphics.ShaderType)type);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glCreateShaderProgramv")]
		public static Int32 CreateShaderProgram(Pencil.Gaming.Graphics.ShaderType type, Int32 count, String[] strings) {
			return Delegates.glCreateShaderProgramv((Pencil.Gaming.Graphics.ShaderType)type, (Int32)count, (String[])strings);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glCullFace")]
		public static void CullFace(Pencil.Gaming.Graphics.CullFaceMode mode) {
			Delegates.glCullFace((Pencil.Gaming.Graphics.CullFaceMode)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
		public static void DeleteBuffers(Int32 n, Int32[] buffers) {
			unsafe {
				fixed (Int32* buffers_ptr = buffers) {
					Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
		public static void DeleteBuffers(Int32 n, ref Int32 buffers) {
			unsafe {
				fixed (Int32* buffers_ptr = &buffers) {
					Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
		public static unsafe void DeleteBuffers(Int32 n, Int32* buffers) {
			Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
		public static void DeleteBuffers(Int32 n, UInt32[] buffers) {
			unsafe {
				fixed (UInt32* buffers_ptr = buffers) {
					Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
		public static void DeleteBuffers(Int32 n, ref UInt32 buffers) {
			unsafe {
				fixed (UInt32* buffers_ptr = &buffers) {
					Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteBuffers")]
		public static unsafe void DeleteBuffers(Int32 n, UInt32* buffers) {
			Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
		public static void DeleteFramebuffers(Int32 n, Int32[] framebuffers) {
			unsafe {
				fixed (Int32* framebuffers_ptr = framebuffers) {
					Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
		public static void DeleteFramebuffers(Int32 n, ref Int32 framebuffers) {
			unsafe {
				fixed (Int32* framebuffers_ptr = &framebuffers) {
					Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
		public static unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers) {
			Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
		public static void DeleteFramebuffers(Int32 n, UInt32[] framebuffers) {
			unsafe {
				fixed (UInt32* framebuffers_ptr = framebuffers) {
					Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
		public static void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers) {
			unsafe {
				fixed (UInt32* framebuffers_ptr = &framebuffers) {
					Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteFramebuffers")]
		public static unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers) {
			Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDeleteLists")]
		public static void DeleteLists(Int32 list, Int32 range) {
			Delegates.glDeleteLists((UInt32)list, (Int32)range);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDeleteLists")]
		public static void DeleteLists(UInt32 list, Int32 range) {
			Delegates.glDeleteLists((UInt32)list, (Int32)range);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
		public static void DeleteProgram(Int32 program) {
			Delegates.glDeleteProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
		public static void DeleteProgram(UInt32 program) {
			Delegates.glDeleteProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
		public static void DeleteProgramPipelines(Int32 n, Int32[] pipelines) {
			unsafe {
				fixed (Int32* pipelines_ptr = pipelines) {
					Delegates.glDeleteProgramPipelines((Int32)n, (UInt32*)pipelines_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
		public static void DeleteProgramPipelines(Int32 n, ref Int32 pipelines) {
			unsafe {
				fixed (Int32* pipelines_ptr = &pipelines) {
					Delegates.glDeleteProgramPipelines((Int32)n, (UInt32*)pipelines_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
		public static unsafe void DeleteProgramPipelines(Int32 n, Int32* pipelines) {
			Delegates.glDeleteProgramPipelines((Int32)n, (UInt32*)pipelines);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
		public static void DeleteProgramPipelines(Int32 n, UInt32[] pipelines) {
			unsafe {
				fixed (UInt32* pipelines_ptr = pipelines) {
					Delegates.glDeleteProgramPipelines((Int32)n, (UInt32*)pipelines_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
		public static void DeleteProgramPipelines(Int32 n, ref UInt32 pipelines) {
			unsafe {
				fixed (UInt32* pipelines_ptr = &pipelines) {
					Delegates.glDeleteProgramPipelines((Int32)n, (UInt32*)pipelines_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glDeleteProgramPipelines")]
		public static unsafe void DeleteProgramPipelines(Int32 n, UInt32* pipelines) {
			Delegates.glDeleteProgramPipelines((Int32)n, (UInt32*)pipelines);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
		public static void DeleteQueries(Int32 n, Int32[] ids) {
			unsafe {
				fixed (Int32* ids_ptr = ids) {
					Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
		public static void DeleteQueries(Int32 n, ref Int32 ids) {
			unsafe {
				fixed (Int32* ids_ptr = &ids) {
					Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
		public static unsafe void DeleteQueries(Int32 n, Int32* ids) {
			Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
		public static void DeleteQueries(Int32 n, UInt32[] ids) {
			unsafe {
				fixed (UInt32* ids_ptr = ids) {
					Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
		public static void DeleteQueries(Int32 n, ref UInt32 ids) {
			unsafe {
				fixed (UInt32* ids_ptr = &ids) {
					Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glDeleteQueries")]
		public static unsafe void DeleteQueries(Int32 n, UInt32* ids) {
			Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
		public static void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers) {
			unsafe {
				fixed (Int32* renderbuffers_ptr = renderbuffers) {
					Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
		public static void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers) {
			unsafe {
				fixed (Int32* renderbuffers_ptr = &renderbuffers) {
					Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
		public static unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers) {
			Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
		public static void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers) {
			unsafe {
				fixed (UInt32* renderbuffers_ptr = renderbuffers) {
					Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
		public static void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers) {
			unsafe {
				fixed (UInt32* renderbuffers_ptr = &renderbuffers) {
					Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glDeleteRenderbuffers")]
		public static unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers) {
			Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glDeleteSamplers")]
		public static void DeleteSamplers(Int32 count, Int32[] samplers) {
			unsafe {
				fixed (Int32* samplers_ptr = samplers) {
					Delegates.glDeleteSamplers((Int32)count, (UInt32*)samplers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glDeleteSamplers")]
		public static void DeleteSamplers(Int32 count, ref Int32 samplers) {
			unsafe {
				fixed (Int32* samplers_ptr = &samplers) {
					Delegates.glDeleteSamplers((Int32)count, (UInt32*)samplers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glDeleteSamplers")]
		public static unsafe void DeleteSamplers(Int32 count, Int32* samplers) {
			Delegates.glDeleteSamplers((Int32)count, (UInt32*)samplers);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glDeleteSamplers")]
		public static void DeleteSamplers(Int32 count, UInt32[] samplers) {
			unsafe {
				fixed (UInt32* samplers_ptr = samplers) {
					Delegates.glDeleteSamplers((Int32)count, (UInt32*)samplers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glDeleteSamplers")]
		public static void DeleteSamplers(Int32 count, ref UInt32 samplers) {
			unsafe {
				fixed (UInt32* samplers_ptr = &samplers) {
					Delegates.glDeleteSamplers((Int32)count, (UInt32*)samplers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glDeleteSamplers")]
		public static unsafe void DeleteSamplers(Int32 count, UInt32* samplers) {
			Delegates.glDeleteSamplers((Int32)count, (UInt32*)samplers);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
		public static void DeleteShader(Int32 shader) {
			Delegates.glDeleteShader((UInt32)shader);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
		public static void DeleteShader(UInt32 shader) {
			Delegates.glDeleteShader((UInt32)shader);
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glDeleteSync")]
		public static void DeleteSync(IntPtr sync) {
			Delegates.glDeleteSync((IntPtr)sync);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
		public static void DeleteTextures(Int32 n, Int32[] textures) {
			unsafe {
				fixed (Int32* textures_ptr = textures) {
					Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
		public static void DeleteTextures(Int32 n, ref Int32 textures) {
			unsafe {
				fixed (Int32* textures_ptr = &textures) {
					Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
		public static unsafe void DeleteTextures(Int32 n, Int32* textures) {
			Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
		public static void DeleteTextures(Int32 n, UInt32[] textures) {
			unsafe {
				fixed (UInt32* textures_ptr = textures) {
					Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
		public static void DeleteTextures(Int32 n, ref UInt32 textures) {
			unsafe {
				fixed (UInt32* textures_ptr = &textures) {
					Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDeleteTextures")]
		public static unsafe void DeleteTextures(Int32 n, UInt32* textures) {
			Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glDeleteTransformFeedbacks")]
		public static void DeleteTransformFeedback(Int32 n, Int32[] ids) {
			unsafe {
				fixed (Int32* ids_ptr = ids) {
					Delegates.glDeleteTransformFeedbacks((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glDeleteTransformFeedbacks")]
		public static void DeleteTransformFeedback(Int32 n, ref Int32 ids) {
			unsafe {
				fixed (Int32* ids_ptr = &ids) {
					Delegates.glDeleteTransformFeedbacks((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glDeleteTransformFeedbacks")]
		public static unsafe void DeleteTransformFeedback(Int32 n, Int32* ids) {
			Delegates.glDeleteTransformFeedbacks((Int32)n, (UInt32*)ids);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glDeleteTransformFeedbacks")]
		public static void DeleteTransformFeedback(Int32 n, UInt32[] ids) {
			unsafe {
				fixed (UInt32* ids_ptr = ids) {
					Delegates.glDeleteTransformFeedbacks((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glDeleteTransformFeedbacks")]
		public static void DeleteTransformFeedback(Int32 n, ref UInt32 ids) {
			unsafe {
				fixed (UInt32* ids_ptr = &ids) {
					Delegates.glDeleteTransformFeedbacks((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glDeleteTransformFeedbacks")]
		public static unsafe void DeleteTransformFeedback(Int32 n, UInt32* ids) {
			Delegates.glDeleteTransformFeedbacks((Int32)n, (UInt32*)ids);
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
		public static void DeleteVertexArrays(Int32 n, Int32[] arrays) {
			unsafe {
				fixed (Int32* arrays_ptr = arrays) {
					Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
		public static void DeleteVertexArrays(Int32 n, ref Int32 arrays) {
			unsafe {
				fixed (Int32* arrays_ptr = &arrays) {
					Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
		public static unsafe void DeleteVertexArrays(Int32 n, Int32* arrays) {
			Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
		public static void DeleteVertexArrays(Int32 n, UInt32[] arrays) {
			unsafe {
				fixed (UInt32* arrays_ptr = arrays) {
					Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
		public static void DeleteVertexArrays(Int32 n, ref UInt32 arrays) {
			unsafe {
				fixed (UInt32* arrays_ptr = &arrays) {
					Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glDeleteVertexArrays")]
		public static unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays) {
			Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthFunc")]
		public static void DepthFunc(Pencil.Gaming.Graphics.DepthFunction func) {
			Delegates.glDepthFunc((Pencil.Gaming.Graphics.DepthFunction)func);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthMask")]
		public static void DepthMask(bool flag) {
			Delegates.glDepthMask((bool)flag);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDepthRange")]
		public static void DepthRange(Double near, Double far) {
			Delegates.glDepthRange((Double)near, (Double)far);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
		public static void DepthRangeArray(Int32 first, Int32 count, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glDepthRangeArrayv((UInt32)first, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
		public static void DepthRangeArray(Int32 first, Int32 count, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glDepthRangeArrayv((UInt32)first, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
		public static unsafe void DepthRangeArray(Int32 first, Int32 count, Double* v) {
			Delegates.glDepthRangeArrayv((UInt32)first, (Int32)count, (Double*)v);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
		public static void DepthRangeArray(UInt32 first, Int32 count, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glDepthRangeArrayv((UInt32)first, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
		public static void DepthRangeArray(UInt32 first, Int32 count, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glDepthRangeArrayv((UInt32)first, (Int32)count, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glDepthRangeArrayv")]
		public static unsafe void DepthRangeArray(UInt32 first, Int32 count, Double* v) {
			Delegates.glDepthRangeArrayv((UInt32)first, (Int32)count, (Double*)v);
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glDepthRangef")]
		public static void DepthRange(Single n, Single f) {
			Delegates.glDepthRangef((Single)n, (Single)f);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glDepthRangeIndexed")]
		public static void DepthRangeIndexed(Int32 index, Double n, Double f) {
			Delegates.glDepthRangeIndexed((UInt32)index, (Double)n, (Double)f);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glDepthRangeIndexed")]
		public static void DepthRangeIndexed(UInt32 index, Double n, Double f) {
			Delegates.glDepthRangeIndexed((UInt32)index, (Double)n, (Double)f);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
		public static void DetachShader(Int32 program, Int32 shader) {
			Delegates.glDetachShader((UInt32)program, (UInt32)shader);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
		public static void DetachShader(UInt32 program, UInt32 shader) {
			Delegates.glDetachShader((UInt32)program, (UInt32)shader);
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDisable")]
		public static void Disable(Pencil.Gaming.Graphics.EnableCap cap) {
			Delegates.glDisable((Pencil.Gaming.Graphics.EnableCap)cap);
		}
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glDisableClientState")]
		public static void DisableClientState(Pencil.Gaming.Graphics.ArrayCap array) {
			Delegates.glDisableClientState((Pencil.Gaming.Graphics.ArrayCap)array);
		}
		#endif

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
		public static void Disable(Pencil.Gaming.Graphics.IndexedEnableCap target, Int32 index) {
			Delegates.glDisablei((Pencil.Gaming.Graphics.IndexedEnableCap)target, (UInt32)index);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glDisablei")]
		public static void Disable(Pencil.Gaming.Graphics.IndexedEnableCap target, UInt32 index) {
			Delegates.glDisablei((Pencil.Gaming.Graphics.IndexedEnableCap)target, (UInt32)index);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
		public static void DisableVertexAttribArray(Int32 index) {
			Delegates.glDisableVertexAttribArray((UInt32)index);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
		public static void DisableVertexAttribArray(UInt32 index) {
			Delegates.glDisableVertexAttribArray((UInt32)index);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawArrays")]
		public static void DrawArrays(Pencil.Gaming.Graphics.BeginMode mode, Int32 first, Int32 count) {
			Delegates.glDrawArrays((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)first, (Int32)count);
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawArraysIndirect")]
		public static void DrawArraysIndirect(Pencil.Gaming.Graphics.ArbDrawIndirect mode, IntPtr indirect) {
			Delegates.glDrawArraysIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (IntPtr)indirect);
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawArraysIndirect")]
		public static void DrawArraysIndirect<T1>(Pencil.Gaming.Graphics.ArbDrawIndirect mode, [InAttribute, OutAttribute] T1[] indirect)
			where T1 : struct {
			GCHandle indirect_ptr = GCHandle.Alloc(indirect, GCHandleType.Pinned);
			try {
				Delegates.glDrawArraysIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (IntPtr)indirect_ptr.AddrOfPinnedObject());
			} finally {
				indirect_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawArraysIndirect")]
		public static void DrawArraysIndirect<T1>(Pencil.Gaming.Graphics.ArbDrawIndirect mode, [InAttribute, OutAttribute] T1[,] indirect)
			where T1 : struct {
			GCHandle indirect_ptr = GCHandle.Alloc(indirect, GCHandleType.Pinned);
			try {
				Delegates.glDrawArraysIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (IntPtr)indirect_ptr.AddrOfPinnedObject());
			} finally {
				indirect_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawArraysIndirect")]
		public static void DrawArraysIndirect<T1>(Pencil.Gaming.Graphics.ArbDrawIndirect mode, [InAttribute, OutAttribute] T1[,,] indirect)
			where T1 : struct {
			GCHandle indirect_ptr = GCHandle.Alloc(indirect, GCHandleType.Pinned);
			try {
				Delegates.glDrawArraysIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (IntPtr)indirect_ptr.AddrOfPinnedObject());
			} finally {
				indirect_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawArraysIndirect")]
		public static void DrawArraysIndirect<T1>(Pencil.Gaming.Graphics.ArbDrawIndirect mode, [InAttribute, OutAttribute] ref T1 indirect)
			where T1 : struct {
			GCHandle indirect_ptr = GCHandle.Alloc(indirect, GCHandleType.Pinned);
			try {
				Delegates.glDrawArraysIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (IntPtr)indirect_ptr.AddrOfPinnedObject());
				indirect = (T1)indirect_ptr.Target;
			} finally {
				indirect_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawArraysInstanced")]
		public static void DrawArraysInstanced(Pencil.Gaming.Graphics.BeginMode mode, Int32 first, Int32 count, Int32 primcount) {
			Delegates.glDrawArraysInstanced((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)first, (Int32)count, (Int32)primcount);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glDrawBuffer")]
		public static void DrawBuffer(Pencil.Gaming.Graphics.DrawBufferMode mode) {
			Delegates.glDrawBuffer((Pencil.Gaming.Graphics.DrawBufferMode)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
		public static void DrawBuffers(Int32 n, Pencil.Gaming.Graphics.DrawBuffersEnum[] bufs) {
			unsafe {
				fixed (Pencil.Gaming.Graphics.DrawBuffersEnum* bufs_ptr = bufs) {
					Delegates.glDrawBuffers((Int32)n, (Pencil.Gaming.Graphics.DrawBuffersEnum*)bufs_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
		public static void DrawBuffers(Int32 n, ref Pencil.Gaming.Graphics.DrawBuffersEnum bufs) {
			unsafe {
				fixed (Pencil.Gaming.Graphics.DrawBuffersEnum* bufs_ptr = &bufs) {
					Delegates.glDrawBuffers((Int32)n, (Pencil.Gaming.Graphics.DrawBuffersEnum*)bufs_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glDrawBuffers")]
		public static unsafe void DrawBuffers(Int32 n, Pencil.Gaming.Graphics.DrawBuffersEnum* bufs) {
			Delegates.glDrawBuffers((Int32)n, (Pencil.Gaming.Graphics.DrawBuffersEnum*)bufs);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
		public static void DrawElements(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices) {
			Delegates.glDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
		public static void DrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
		public static void DrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
		public static void DrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glDrawElements")]
		public static void DrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
				indices = (T3)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
		public static void DrawElementsBaseVertex(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 basevertex) {
			Delegates.glDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
		public static void DrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
		public static void DrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
		public static void DrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsBaseVertex")]
		public static void DrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
				indices = (T3)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawElementsIndirect")]
		public static void DrawElementsIndirect(Pencil.Gaming.Graphics.ArbDrawIndirect mode, Pencil.Gaming.Graphics.ArbDrawIndirect type, IntPtr indirect) {
			Delegates.glDrawElementsIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (Pencil.Gaming.Graphics.ArbDrawIndirect)type, (IntPtr)indirect);
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawElementsIndirect")]
		public static void DrawElementsIndirect<T2>(Pencil.Gaming.Graphics.ArbDrawIndirect mode, Pencil.Gaming.Graphics.ArbDrawIndirect type, [InAttribute, OutAttribute] T2[] indirect)
			where T2 : struct {
			GCHandle indirect_ptr = GCHandle.Alloc(indirect, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (Pencil.Gaming.Graphics.ArbDrawIndirect)type, (IntPtr)indirect_ptr.AddrOfPinnedObject());
			} finally {
				indirect_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawElementsIndirect")]
		public static void DrawElementsIndirect<T2>(Pencil.Gaming.Graphics.ArbDrawIndirect mode, Pencil.Gaming.Graphics.ArbDrawIndirect type, [InAttribute, OutAttribute] T2[,] indirect)
			where T2 : struct {
			GCHandle indirect_ptr = GCHandle.Alloc(indirect, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (Pencil.Gaming.Graphics.ArbDrawIndirect)type, (IntPtr)indirect_ptr.AddrOfPinnedObject());
			} finally {
				indirect_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawElementsIndirect")]
		public static void DrawElementsIndirect<T2>(Pencil.Gaming.Graphics.ArbDrawIndirect mode, Pencil.Gaming.Graphics.ArbDrawIndirect type, [InAttribute, OutAttribute] T2[,,] indirect)
			where T2 : struct {
			GCHandle indirect_ptr = GCHandle.Alloc(indirect, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (Pencil.Gaming.Graphics.ArbDrawIndirect)type, (IntPtr)indirect_ptr.AddrOfPinnedObject());
			} finally {
				indirect_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_indirect", Version = "1.2", EntryPoint = "glDrawElementsIndirect")]
		public static void DrawElementsIndirect<T2>(Pencil.Gaming.Graphics.ArbDrawIndirect mode, Pencil.Gaming.Graphics.ArbDrawIndirect type, [InAttribute, OutAttribute] ref T2 indirect)
			where T2 : struct {
			GCHandle indirect_ptr = GCHandle.Alloc(indirect, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsIndirect((Pencil.Gaming.Graphics.ArbDrawIndirect)mode, (Pencil.Gaming.Graphics.ArbDrawIndirect)type, (IntPtr)indirect_ptr.AddrOfPinnedObject());
				indirect = (T2)indirect_ptr.Target;
			} finally {
				indirect_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
		public static void DrawElementsInstanced(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount) {
			Delegates.glDrawElementsInstanced((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
		public static void DrawElementsInstanced<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsInstanced((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
		public static void DrawElementsInstanced<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsInstanced((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
		public static void DrawElementsInstanced<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsInstanced((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glDrawElementsInstanced")]
		public static void DrawElementsInstanced<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsInstanced((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
				indices = (T3)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
		public static void DrawElementsInstancedBaseVertex(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 basevertex) {
			Delegates.glDrawElementsInstancedBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)basevertex);
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
		public static void DrawElementsInstancedBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32 basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsInstancedBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
		public static void DrawElementsInstancedBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32 basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsInstancedBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
		public static void DrawElementsInstancedBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32 basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsInstancedBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawElementsInstancedBaseVertex")]
		public static void DrawElementsInstancedBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32 basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawElementsInstancedBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
				indices = (T3)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
		public static void DrawPixels(Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr pixels) {
			Delegates.glDrawPixels((Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
		public static void DrawPixels<T4>(Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[] pixels)
			where T4 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glDrawPixels((Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
		public static void DrawPixels<T4>(Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[,] pixels)
			where T4 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glDrawPixels((Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
		public static void DrawPixels<T4>(Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[,,] pixels)
			where T4 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glDrawPixels((Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glDrawPixels")]
		public static void DrawPixels<T4>(Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T4 pixels)
			where T4 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glDrawPixels((Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T4)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices) {
			Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices);
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements<T5>(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements<T5>(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements<T5>(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements<T5>(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
				indices = (T5)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices) {
			Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices);
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements<T5>(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements<T5>(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements<T5>(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glDrawRangeElements")]
		public static void DrawRangeElements<T5>(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElements((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
				indices = (T5)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 basevertex) {
			Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex<T5>(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices, Int32 basevertex)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex<T5>(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices, Int32 basevertex)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex<T5>(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices, Int32 basevertex)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex<T5>(Pencil.Gaming.Graphics.BeginMode mode, Int32 start, Int32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices, Int32 basevertex)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
				indices = (T5)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 basevertex) {
			Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex<T5>(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[] indices, Int32 basevertex)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex<T5>(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[,] indices, Int32 basevertex)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex<T5>(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T5[,,] indices, Int32 basevertex)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glDrawRangeElementsBaseVertex")]
		public static void DrawRangeElementsBaseVertex<T5>(Pencil.Gaming.Graphics.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T5 indices, Int32 basevertex)
			where T5 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glDrawRangeElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
				indices = (T5)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glDrawTransformFeedback")]
		public static void DrawTransformFeedback(Pencil.Gaming.Graphics.BeginMode mode, Int32 id) {
			Delegates.glDrawTransformFeedback((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glDrawTransformFeedback")]
		public static void DrawTransformFeedback(Pencil.Gaming.Graphics.BeginMode mode, UInt32 id) {
			Delegates.glDrawTransformFeedback((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glDrawTransformFeedbackStream")]
		public static void DrawTransformFeedbackStream(Pencil.Gaming.Graphics.BeginMode mode, Int32 id, Int32 stream) {
			Delegates.glDrawTransformFeedbackStream((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)id, (UInt32)stream);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glDrawTransformFeedbackStream")]
		public static void DrawTransformFeedbackStream(Pencil.Gaming.Graphics.BeginMode mode, UInt32 id, UInt32 stream) {
			Delegates.glDrawTransformFeedbackStream((Pencil.Gaming.Graphics.BeginMode)mode, (UInt32)id, (UInt32)stream);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEdgeFlag")]
		public static void EdgeFlag(bool flag) {
			Delegates.glEdgeFlag((bool)flag);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
		public static void EdgeFlagPointer(Int32 stride, IntPtr pointer) {
			Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
		public static void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute] T1[] pointer)
			where T1 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
		public static void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute] T1[,] pointer)
			where T1 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
		public static void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute] T1[,,] pointer)
			where T1 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEdgeFlagPointer")]
		public static void EdgeFlagPointer<T1>(Int32 stride, [InAttribute, OutAttribute] ref T1 pointer)
			where T1 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T1)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEdgeFlagv")]
		public static unsafe void EdgeFlag(bool* flag) {
			Delegates.glEdgeFlagv((bool*)flag);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glEnable")]
		public static void Enable(Pencil.Gaming.Graphics.EnableCap cap) {
			Delegates.glEnable((Pencil.Gaming.Graphics.EnableCap)cap);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glEnableClientState")]
		public static void EnableClientState(Pencil.Gaming.Graphics.ArrayCap array) {
			Delegates.glEnableClientState((Pencil.Gaming.Graphics.ArrayCap)array);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
		public static void Enable(Pencil.Gaming.Graphics.IndexedEnableCap target, Int32 index) {
			Delegates.glEnablei((Pencil.Gaming.Graphics.IndexedEnableCap)target, (UInt32)index);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEnablei")]
		public static void Enable(Pencil.Gaming.Graphics.IndexedEnableCap target, UInt32 index) {
			Delegates.glEnablei((Pencil.Gaming.Graphics.IndexedEnableCap)target, (UInt32)index);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
		public static void EnableVertexAttribArray(Int32 index) {
			Delegates.glEnableVertexAttribArray((UInt32)index);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
		public static void EnableVertexAttribArray(UInt32 index) {
			Delegates.glEnableVertexAttribArray((UInt32)index);
		}
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEnd")]
		public static void End() {
			Delegates.glEnd();
		}
		#endif

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndConditionalRender")]
		public static void EndConditionalRender() {
			Delegates.glEndConditionalRender();
		}
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEndList")]
		public static void EndList() {
			Delegates.glEndList();
		}
		#endif

		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glEndQuery")]
		public static void EndQuery(Pencil.Gaming.Graphics.QueryTarget target) {
			Delegates.glEndQuery((Pencil.Gaming.Graphics.QueryTarget)target);
		}

		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glEndQueryIndexed")]
		public static void EndQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, Int32 index) {
			Delegates.glEndQueryIndexed((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index);
		}

		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glEndQueryIndexed")]
		public static void EndQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, UInt32 index) {
			Delegates.glEndQueryIndexed((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glEndTransformFeedback")]
		public static void EndTransformFeedback() {
			Delegates.glEndTransformFeedback();
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord1d")]
		public static void EvalCoord1(Double u) {
			Delegates.glEvalCoord1d((Double)u);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord1dv")]
		public static unsafe void EvalCoord1(Double* u) {
			Delegates.glEvalCoord1dv((Double*)u);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord1f")]
		public static void EvalCoord1(Single u) {
			Delegates.glEvalCoord1f((Single)u);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord1fv")]
		public static unsafe void EvalCoord1(Single* u) {
			Delegates.glEvalCoord1fv((Single*)u);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2d")]
		public static void EvalCoord2(Double u, Double v) {
			Delegates.glEvalCoord2d((Double)u, (Double)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
		public static void EvalCoord2(Double[] u) {
			unsafe {
				fixed (Double* u_ptr = u) {
					Delegates.glEvalCoord2dv((Double*)u_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
		public static void EvalCoord2(ref Double u) {
			unsafe {
				fixed (Double* u_ptr = &u) {
					Delegates.glEvalCoord2dv((Double*)u_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2dv")]
		public static unsafe void EvalCoord2(Double* u) {
			Delegates.glEvalCoord2dv((Double*)u);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2f")]
		public static void EvalCoord2(Single u, Single v) {
			Delegates.glEvalCoord2f((Single)u, (Single)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
		public static void EvalCoord2(Single[] u) {
			unsafe {
				fixed (Single* u_ptr = u) {
					Delegates.glEvalCoord2fv((Single*)u_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
		public static void EvalCoord2(ref Single u) {
			unsafe {
				fixed (Single* u_ptr = &u) {
					Delegates.glEvalCoord2fv((Single*)u_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalCoord2fv")]
		public static unsafe void EvalCoord2(Single* u) {
			Delegates.glEvalCoord2fv((Single*)u);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalMesh1")]
		public static void EvalMesh1(Pencil.Gaming.Graphics.MeshMode1 mode, Int32 i1, Int32 i2) {
			Delegates.glEvalMesh1((Pencil.Gaming.Graphics.MeshMode1)mode, (Int32)i1, (Int32)i2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalMesh2")]
		public static void EvalMesh2(Pencil.Gaming.Graphics.MeshMode2 mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2) {
			Delegates.glEvalMesh2((Pencil.Gaming.Graphics.MeshMode2)mode, (Int32)i1, (Int32)i2, (Int32)j1, (Int32)j2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalPoint1")]
		public static void EvalPoint1(Int32 i) {
			Delegates.glEvalPoint1((Int32)i);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glEvalPoint2")]
		public static void EvalPoint2(Int32 i, Int32 j) {
			Delegates.glEvalPoint2((Int32)i, (Int32)j);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
		public static void FeedbackBuffer(Int32 size, Pencil.Gaming.Graphics.FeedbackType type, [OutAttribute] Single[] buffer) {
			unsafe {
				fixed (Single* buffer_ptr = buffer) {
					Delegates.glFeedbackBuffer((Int32)size, (Pencil.Gaming.Graphics.FeedbackType)type, (Single*)buffer_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
		public static void FeedbackBuffer(Int32 size, Pencil.Gaming.Graphics.FeedbackType type, [OutAttribute] out Single buffer) {
			unsafe {
				fixed (Single* buffer_ptr = &buffer) {
					Delegates.glFeedbackBuffer((Int32)size, (Pencil.Gaming.Graphics.FeedbackType)type, (Single*)buffer_ptr);
					buffer = *buffer_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFeedbackBuffer")]
		public static unsafe void FeedbackBuffer(Int32 size, Pencil.Gaming.Graphics.FeedbackType type, [OutAttribute] Single* buffer) {
			Delegates.glFeedbackBuffer((Int32)size, (Pencil.Gaming.Graphics.FeedbackType)type, (Single*)buffer);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glFenceSync")]
		public static IntPtr FenceSync(Pencil.Gaming.Graphics.ArbSync condition, Int32 flags) {
			return Delegates.glFenceSync((Pencil.Gaming.Graphics.ArbSync)condition, (UInt32)flags);
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glFenceSync")]
		public static IntPtr FenceSync(Pencil.Gaming.Graphics.ArbSync condition, UInt32 flags) {
			return Delegates.glFenceSync((Pencil.Gaming.Graphics.ArbSync)condition, (UInt32)flags);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFinish")]
		public static void Finish() {
			Delegates.glFinish();
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFlush")]
		public static void Flush() {
			Delegates.glFlush();
		}

		
		//[AutoGenerated(Category = "ARB_map_buffer_range", Version = "3.0", EntryPoint = "glFlushMappedBufferRange")]
		public static void FlushMappedBufferRange(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr length) {
			Delegates.glFlushMappedBufferRange((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)length);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordd")]
		public static void FogCoord(Double coord) {
			Delegates.glFogCoordd((Double)coord);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoorddv")]
		public static unsafe void FogCoord(Double* coord) {
			Delegates.glFogCoorddv((Double*)coord);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordf")]
		public static void FogCoord(Single coord) {
			Delegates.glFogCoordf((Single)coord);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordfv")]
		public static unsafe void FogCoord(Single* coord) {
			Delegates.glFogCoordfv((Single*)coord);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
		public static void FogCoordPointer(Pencil.Gaming.Graphics.FogPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glFogCoordPointer((Pencil.Gaming.Graphics.FogPointerType)type, (Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
		public static void FogCoordPointer<T2>(Pencil.Gaming.Graphics.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glFogCoordPointer((Pencil.Gaming.Graphics.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
		public static void FogCoordPointer<T2>(Pencil.Gaming.Graphics.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glFogCoordPointer((Pencil.Gaming.Graphics.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
		public static void FogCoordPointer<T2>(Pencil.Gaming.Graphics.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glFogCoordPointer((Pencil.Gaming.Graphics.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glFogCoordPointer")]
		public static void FogCoordPointer<T2>(Pencil.Gaming.Graphics.FogPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glFogCoordPointer((Pencil.Gaming.Graphics.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T2)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogf")]
		public static void Fog(Pencil.Gaming.Graphics.FogParameter pname, Single param) {
			Delegates.glFogf((Pencil.Gaming.Graphics.FogParameter)pname, (Single)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogfv")]
		public static void Fog(Pencil.Gaming.Graphics.FogParameter pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glFogfv((Pencil.Gaming.Graphics.FogParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogfv")]
		public static unsafe void Fog(Pencil.Gaming.Graphics.FogParameter pname, Single* @params) {
			Delegates.glFogfv((Pencil.Gaming.Graphics.FogParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogi")]
		public static void Fog(Pencil.Gaming.Graphics.FogParameter pname, Int32 param) {
			Delegates.glFogi((Pencil.Gaming.Graphics.FogParameter)pname, (Int32)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogiv")]
		public static void Fog(Pencil.Gaming.Graphics.FogParameter pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glFogiv((Pencil.Gaming.Graphics.FogParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFogiv")]
		public static unsafe void Fog(Pencil.Gaming.Graphics.FogParameter pname, Int32* @params) {
			Delegates.glFogiv((Pencil.Gaming.Graphics.FogParameter)pname, (Int32*)@params);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
		public static void FramebufferRenderbuffer(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.RenderbufferTarget renderbuffertarget, Int32 renderbuffer) {
			Delegates.glFramebufferRenderbuffer((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferRenderbuffer")]
		public static void FramebufferRenderbuffer(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer) {
			Delegates.glFramebufferRenderbuffer((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
		}

		
		//[AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTexture")]
		public static void FramebufferTexture(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level) {
			Delegates.glFramebufferTexture((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
		}

		
		//[AutoGenerated(Category = "VERSION_3_2", Version = "1.2", EntryPoint = "glFramebufferTexture")]
		public static void FramebufferTexture(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level) {
			Delegates.glFramebufferTexture((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
		}

		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
		public static void FramebufferTexture1D(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.TextureTarget textarget, Int32 texture, Int32 level) {
			Delegates.glFramebufferTexture1D((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
		}

		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture1D")]
		public static void FramebufferTexture1D(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.TextureTarget textarget, UInt32 texture, Int32 level) {
			Delegates.glFramebufferTexture1D((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
		}

		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
		public static void FramebufferTexture2D(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.TextureTarget textarget, Int32 texture, Int32 level) {
			Delegates.glFramebufferTexture2D((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
		}

		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture2D")]
		public static void FramebufferTexture2D(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.TextureTarget textarget, UInt32 texture, Int32 level) {
			Delegates.glFramebufferTexture2D((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level);
		}

		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
		public static void FramebufferTexture3D(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset) {
			Delegates.glFramebufferTexture3D((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
		}

		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTexture3D")]
		public static void FramebufferTexture3D(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset) {
			Delegates.glFramebufferTexture3D((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
		public static void FramebufferTextureLayer(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer) {
			Delegates.glFramebufferTextureLayer((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glFramebufferTextureLayer")]
		public static void FramebufferTextureLayer(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer) {
			Delegates.glFramebufferTextureLayer((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glFrontFace")]
		public static void FrontFace(Pencil.Gaming.Graphics.FrontFaceDirection mode) {
			Delegates.glFrontFace((Pencil.Gaming.Graphics.FrontFaceDirection)mode);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glFrustum")]
		public static void Frustum(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar) {
			Delegates.glFrustum((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
		public static void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers) {
			unsafe {
				fixed (Int32* buffers_ptr = buffers) {
					Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
		public static void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers) {
			unsafe {
				fixed (Int32* buffers_ptr = &buffers) {
					Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
					buffers = *buffers_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
		public static unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers) {
			Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
		public static void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers) {
			unsafe {
				fixed (UInt32* buffers_ptr = buffers) {
					Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
		public static void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers) {
			unsafe {
				fixed (UInt32* buffers_ptr = &buffers) {
					Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
					buffers = *buffers_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenBuffers")]
		public static unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers) {
			Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenerateMipmap")]
		public static void GenerateMipmap(Pencil.Gaming.Graphics.GenerateMipmapTarget target) {
			Delegates.glGenerateMipmap((Pencil.Gaming.Graphics.GenerateMipmapTarget)target);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
		public static void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers) {
			unsafe {
				fixed (Int32* framebuffers_ptr = framebuffers) {
					Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
		public static void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers) {
			unsafe {
				fixed (Int32* framebuffers_ptr = &framebuffers) {
					Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
					framebuffers = *framebuffers_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
		public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers) {
			Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
		public static void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers) {
			unsafe {
				fixed (UInt32* framebuffers_ptr = framebuffers) {
					Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
		public static void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers) {
			unsafe {
				fixed (UInt32* framebuffers_ptr = &framebuffers) {
					Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
					framebuffers = *framebuffers_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenFramebuffers")]
		public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers) {
			Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGenLists")]
		public static Int32 GenLists(Int32 range) {
			return Delegates.glGenLists((Int32)range);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
		public static void GenProgramPipelines(Int32 n, [OutAttribute] Int32[] pipelines) {
			unsafe {
				fixed (Int32* pipelines_ptr = pipelines) {
					Delegates.glGenProgramPipelines((Int32)n, (UInt32*)pipelines_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
		public static void GenProgramPipelines(Int32 n, [OutAttribute] out Int32 pipelines) {
			unsafe {
				fixed (Int32* pipelines_ptr = &pipelines) {
					Delegates.glGenProgramPipelines((Int32)n, (UInt32*)pipelines_ptr);
					pipelines = *pipelines_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
		public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute] Int32* pipelines) {
			Delegates.glGenProgramPipelines((Int32)n, (UInt32*)pipelines);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
		public static void GenProgramPipelines(Int32 n, [OutAttribute] UInt32[] pipelines) {
			unsafe {
				fixed (UInt32* pipelines_ptr = pipelines) {
					Delegates.glGenProgramPipelines((Int32)n, (UInt32*)pipelines_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
		public static void GenProgramPipelines(Int32 n, [OutAttribute] out UInt32 pipelines) {
			unsafe {
				fixed (UInt32* pipelines_ptr = &pipelines) {
					Delegates.glGenProgramPipelines((Int32)n, (UInt32*)pipelines_ptr);
					pipelines = *pipelines_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGenProgramPipelines")]
		public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute] UInt32* pipelines) {
			Delegates.glGenProgramPipelines((Int32)n, (UInt32*)pipelines);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
		public static void GenQueries(Int32 n, [OutAttribute] Int32[] ids) {
			unsafe {
				fixed (Int32* ids_ptr = ids) {
					Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
		public static void GenQueries(Int32 n, [OutAttribute] out Int32 ids) {
			unsafe {
				fixed (Int32* ids_ptr = &ids) {
					Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
		public static unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids) {
			Delegates.glGenQueries((Int32)n, (UInt32*)ids);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
		public static void GenQueries(Int32 n, [OutAttribute] UInt32[] ids) {
			unsafe {
				fixed (UInt32* ids_ptr = ids) {
					Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
		public static void GenQueries(Int32 n, [OutAttribute] out UInt32 ids) {
			unsafe {
				fixed (UInt32* ids_ptr = &ids) {
					Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGenQueries")]
		public static unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids) {
			Delegates.glGenQueries((Int32)n, (UInt32*)ids);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
		public static void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers) {
			unsafe {
				fixed (Int32* renderbuffers_ptr = renderbuffers) {
					Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
		public static void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers) {
			unsafe {
				fixed (Int32* renderbuffers_ptr = &renderbuffers) {
					Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
					renderbuffers = *renderbuffers_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
		public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers) {
			Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
		public static void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers) {
			unsafe {
				fixed (UInt32* renderbuffers_ptr = renderbuffers) {
					Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
		public static void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers) {
			unsafe {
				fixed (UInt32* renderbuffers_ptr = &renderbuffers) {
					Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
					renderbuffers = *renderbuffers_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGenRenderbuffers")]
		public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers) {
			Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGenSamplers")]
		public static void GenSamplers(Int32 count, [OutAttribute] Int32[] samplers) {
			unsafe {
				fixed (Int32* samplers_ptr = samplers) {
					Delegates.glGenSamplers((Int32)count, (UInt32*)samplers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGenSamplers")]
		public static void GenSamplers(Int32 count, [OutAttribute] out Int32 samplers) {
			unsafe {
				fixed (Int32* samplers_ptr = &samplers) {
					Delegates.glGenSamplers((Int32)count, (UInt32*)samplers_ptr);
					samplers = *samplers_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGenSamplers")]
		public static unsafe void GenSamplers(Int32 count, [OutAttribute] Int32* samplers) {
			Delegates.glGenSamplers((Int32)count, (UInt32*)samplers);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGenSamplers")]
		public static void GenSamplers(Int32 count, [OutAttribute] UInt32[] samplers) {
			unsafe {
				fixed (UInt32* samplers_ptr = samplers) {
					Delegates.glGenSamplers((Int32)count, (UInt32*)samplers_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGenSamplers")]
		public static void GenSamplers(Int32 count, [OutAttribute] out UInt32 samplers) {
			unsafe {
				fixed (UInt32* samplers_ptr = &samplers) {
					Delegates.glGenSamplers((Int32)count, (UInt32*)samplers_ptr);
					samplers = *samplers_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGenSamplers")]
		public static unsafe void GenSamplers(Int32 count, [OutAttribute] UInt32* samplers) {
			Delegates.glGenSamplers((Int32)count, (UInt32*)samplers);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
		public static void GenTextures(Int32 n, [OutAttribute] Int32[] textures) {
			unsafe {
				fixed (Int32* textures_ptr = textures) {
					Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
		public static void GenTextures(Int32 n, [OutAttribute] out Int32 textures) {
			unsafe {
				fixed (Int32* textures_ptr = &textures) {
					Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
					textures = *textures_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
		public static unsafe void GenTextures(Int32 n, [OutAttribute] Int32* textures) {
			Delegates.glGenTextures((Int32)n, (UInt32*)textures);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
		public static void GenTextures(Int32 n, [OutAttribute] UInt32[] textures) {
			unsafe {
				fixed (UInt32* textures_ptr = textures) {
					Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
		public static void GenTextures(Int32 n, [OutAttribute] out UInt32 textures) {
			unsafe {
				fixed (UInt32* textures_ptr = &textures) {
					Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
					textures = *textures_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGenTextures")]
		public static unsafe void GenTextures(Int32 n, [OutAttribute] UInt32* textures) {
			Delegates.glGenTextures((Int32)n, (UInt32*)textures);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glGenTransformFeedbacks")]
		public static void GenTransformFeedback(Int32 n, [OutAttribute] Int32[] ids) {
			unsafe {
				fixed (Int32* ids_ptr = ids) {
					Delegates.glGenTransformFeedbacks((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glGenTransformFeedbacks")]
		public static void GenTransformFeedback(Int32 n, [OutAttribute] out Int32 ids) {
			unsafe {
				fixed (Int32* ids_ptr = &ids) {
					Delegates.glGenTransformFeedbacks((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glGenTransformFeedbacks")]
		public static unsafe void GenTransformFeedback(Int32 n, [OutAttribute] Int32* ids) {
			Delegates.glGenTransformFeedbacks((Int32)n, (UInt32*)ids);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glGenTransformFeedbacks")]
		public static void GenTransformFeedback(Int32 n, [OutAttribute] UInt32[] ids) {
			unsafe {
				fixed (UInt32* ids_ptr = ids) {
					Delegates.glGenTransformFeedbacks((Int32)n, (UInt32*)ids_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glGenTransformFeedbacks")]
		public static void GenTransformFeedback(Int32 n, [OutAttribute] out UInt32 ids) {
			unsafe {
				fixed (UInt32* ids_ptr = &ids) {
					Delegates.glGenTransformFeedbacks((Int32)n, (UInt32*)ids_ptr);
					ids = *ids_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glGenTransformFeedbacks")]
		public static unsafe void GenTransformFeedback(Int32 n, [OutAttribute] UInt32* ids) {
			Delegates.glGenTransformFeedbacks((Int32)n, (UInt32*)ids);
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
		public static void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays) {
			unsafe {
				fixed (Int32* arrays_ptr = arrays) {
					Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
		public static void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays) {
			unsafe {
				fixed (Int32* arrays_ptr = &arrays) {
					Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
					arrays = *arrays_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
		public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays) {
			Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
		public static void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays) {
			unsafe {
				fixed (UInt32* arrays_ptr = arrays) {
					Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
		public static void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays) {
			unsafe {
				fixed (UInt32* arrays_ptr = &arrays) {
					Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
					arrays = *arrays_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glGenVertexArrays")]
		public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays) {
			Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
		public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out Pencil.Gaming.Graphics.ActiveAttribType type, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Int32* size_ptr = &size)
						fixed (Pencil.Gaming.Graphics.ActiveAttribType* type_ptr = &type) {
							Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Pencil.Gaming.Graphics.ActiveAttribType*)type_ptr, (StringBuilder)name);
							length = *length_ptr;
							size = *size_ptr;
							type = *type_ptr;
						}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
		public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] Pencil.Gaming.Graphics.ActiveAttribType* type, [OutAttribute] StringBuilder name) {
			Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Pencil.Gaming.Graphics.ActiveAttribType*)type, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
		public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out Pencil.Gaming.Graphics.ActiveAttribType type, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Int32* size_ptr = &size)
						fixed (Pencil.Gaming.Graphics.ActiveAttribType* type_ptr = &type) {
							Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Pencil.Gaming.Graphics.ActiveAttribType*)type_ptr, (StringBuilder)name);
							length = *length_ptr;
							size = *size_ptr;
							type = *type_ptr;
						}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
		public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] Pencil.Gaming.Graphics.ActiveAttribType* type, [OutAttribute] StringBuilder name) {
			Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Pencil.Gaming.Graphics.ActiveAttribType*)type, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineName")]
		public static void GetActiveSubroutineName(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetActiveSubroutineName((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineName")]
		public static unsafe void GetActiveSubroutineName(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name) {
			Delegates.glGetActiveSubroutineName((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Int32)bufsize, (Int32*)length, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineName")]
		public static void GetActiveSubroutineName(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetActiveSubroutineName((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineName")]
		public static unsafe void GetActiveSubroutineName(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name) {
			Delegates.glGetActiveSubroutineName((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Int32)bufsize, (Int32*)length, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformiv")]
		public static void GetActiveSubroutineUniform(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Int32 index, Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter pname, [OutAttribute] Int32[] values) {
			unsafe {
				fixed (Int32* values_ptr = values) {
					Delegates.glGetActiveSubroutineUniformiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter)pname, (Int32*)values_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformiv")]
		public static void GetActiveSubroutineUniform(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Int32 index, Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter pname, [OutAttribute] out Int32 values) {
			unsafe {
				fixed (Int32* values_ptr = &values) {
					Delegates.glGetActiveSubroutineUniformiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter)pname, (Int32*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformiv")]
		public static unsafe void GetActiveSubroutineUniform(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Int32 index, Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter pname, [OutAttribute] Int32* values) {
			Delegates.glGetActiveSubroutineUniformiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter)pname, (Int32*)values);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformiv")]
		public static void GetActiveSubroutineUniform(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, UInt32 index, Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter pname, [OutAttribute] Int32[] values) {
			unsafe {
				fixed (Int32* values_ptr = values) {
					Delegates.glGetActiveSubroutineUniformiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter)pname, (Int32*)values_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformiv")]
		public static void GetActiveSubroutineUniform(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, UInt32 index, Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter pname, [OutAttribute] out Int32 values) {
			unsafe {
				fixed (Int32* values_ptr = &values) {
					Delegates.glGetActiveSubroutineUniformiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter)pname, (Int32*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformiv")]
		public static unsafe void GetActiveSubroutineUniform(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, UInt32 index, Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter pname, [OutAttribute] Int32* values) {
			Delegates.glGetActiveSubroutineUniformiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Pencil.Gaming.Graphics.ActiveSubroutineUniformParameter)pname, (Int32*)values);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformName")]
		public static void GetActiveSubroutineUniformName(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetActiveSubroutineUniformName((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformName")]
		public static unsafe void GetActiveSubroutineUniformName(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Int32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name) {
			Delegates.glGetActiveSubroutineUniformName((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Int32)bufsize, (Int32*)length, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformName")]
		public static void GetActiveSubroutineUniformName(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetActiveSubroutineUniformName((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (StringBuilder)name);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetActiveSubroutineUniformName")]
		public static unsafe void GetActiveSubroutineUniformName(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, UInt32 index, Int32 bufsize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder name) {
			Delegates.glGetActiveSubroutineUniformName((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (UInt32)index, (Int32)bufsize, (Int32*)length, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
		public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out Pencil.Gaming.Graphics.ActiveUniformType type, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Int32* size_ptr = &size)
						fixed (Pencil.Gaming.Graphics.ActiveUniformType* type_ptr = &type) {
							Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Pencil.Gaming.Graphics.ActiveUniformType*)type_ptr, (StringBuilder)name);
							length = *length_ptr;
							size = *size_ptr;
							type = *type_ptr;
						}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
		public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] Pencil.Gaming.Graphics.ActiveUniformType* type, [OutAttribute] StringBuilder name) {
			Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Pencil.Gaming.Graphics.ActiveUniformType*)type, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
		public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out Pencil.Gaming.Graphics.ActiveUniformType type, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Int32* size_ptr = &size)
						fixed (Pencil.Gaming.Graphics.ActiveUniformType* type_ptr = &type) {
							Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Pencil.Gaming.Graphics.ActiveUniformType*)type_ptr, (StringBuilder)name);
							length = *length_ptr;
							size = *size_ptr;
							type = *type_ptr;
						}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
		public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] Pencil.Gaming.Graphics.ActiveUniformType* type, [OutAttribute] StringBuilder name) {
			Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Pencil.Gaming.Graphics.ActiveUniformType*)type, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
		public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, Pencil.Gaming.Graphics.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Pencil.Gaming.Graphics.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
		public static void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, Pencil.Gaming.Graphics.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Pencil.Gaming.Graphics.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
		public static unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, Pencil.Gaming.Graphics.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Pencil.Gaming.Graphics.ActiveUniformBlockParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
		public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, Pencil.Gaming.Graphics.ActiveUniformBlockParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Pencil.Gaming.Graphics.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
		public static void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, Pencil.Gaming.Graphics.ActiveUniformBlockParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Pencil.Gaming.Graphics.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockiv")]
		public static unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, Pencil.Gaming.Graphics.ActiveUniformBlockParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Pencil.Gaming.Graphics.ActiveUniformBlockParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
		public static void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformBlockName);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
		public static unsafe void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName) {
			Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformBlockName);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
		public static void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformBlockName) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformBlockName);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformBlockName")]
		public static unsafe void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformBlockName) {
			Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformBlockName);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
		public static void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformName) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformName);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
		public static unsafe void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformName) {
			Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformName);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
		public static void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder uniformName) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)uniformName);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformName")]
		public static unsafe void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder uniformName) {
			Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length, (StringBuilder)uniformName);
		}

		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
		public static void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32[] uniformIndices, Pencil.Gaming.Graphics.ActiveUniformParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* uniformIndices_ptr = uniformIndices)
					fixed (Int32* @params_ptr = @params) {
						Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (Pencil.Gaming.Graphics.ActiveUniformParameter)pname, (Int32*)@params_ptr);
					}
			}
		}

		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
		public static void GetActiveUniforms(Int32 program, Int32 uniformCount, ref Int32 uniformIndices, Pencil.Gaming.Graphics.ActiveUniformParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* uniformIndices_ptr = &uniformIndices)
					fixed (Int32* @params_ptr = &@params) {
						Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (Pencil.Gaming.Graphics.ActiveUniformParameter)pname, (Int32*)@params_ptr);
						 @params = *@params_ptr;
					}
			}
		}

		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
		public static unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32* uniformIndices, Pencil.Gaming.Graphics.ActiveUniformParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (Pencil.Gaming.Graphics.ActiveUniformParameter)pname, (Int32*)@params);
		}

		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
		public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32[] uniformIndices, Pencil.Gaming.Graphics.ActiveUniformParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (UInt32* uniformIndices_ptr = uniformIndices)
					fixed (Int32* @params_ptr = @params) {
						Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (Pencil.Gaming.Graphics.ActiveUniformParameter)pname, (Int32*)@params_ptr);
					}
			}
		}

		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
		public static void GetActiveUniforms(UInt32 program, Int32 uniformCount, ref UInt32 uniformIndices, Pencil.Gaming.Graphics.ActiveUniformParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (UInt32* uniformIndices_ptr = &uniformIndices)
					fixed (Int32* @params_ptr = &@params) {
						Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (Pencil.Gaming.Graphics.ActiveUniformParameter)pname, (Int32*)@params_ptr);
						 @params = *@params_ptr;
					}
			}
		}

		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetActiveUniformsiv")]
		public static unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, Pencil.Gaming.Graphics.ActiveUniformParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (Pencil.Gaming.Graphics.ActiveUniformParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
		public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out Int32 obj) {
			unsafe {
				fixed (Int32* count_ptr = &count)
					fixed (Int32* obj_ptr = &obj) {
						Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
						count = *count_ptr;
						obj = *obj_ptr;
					}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
		public static unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32[] obj) {
			fixed (Int32* obj_ptr = obj) {
				Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
		public static unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32* obj) {
			Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
		public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out UInt32 obj) {
			unsafe {
				fixed (Int32* count_ptr = &count)
					fixed (UInt32* obj_ptr = &obj) {
						Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
						count = *count_ptr;
						obj = *obj_ptr;
					}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
		public static unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32[] obj) {
			fixed (UInt32* obj_ptr = obj) {
				Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
		public static unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* obj) {
			Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
		public static Int32 GetAttribLocation(Int32 program, String name) {
			return Delegates.glGetAttribLocation((UInt32)program, (String)name);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
		public static Int32 GetAttribLocation(UInt32 program, String name) {
			return Delegates.glGetAttribLocation((UInt32)program, (String)name);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
		public static void GetBoolean(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] bool[] data) {
			unsafe {
				fixed (bool* data_ptr = data) {
					Delegates.glGetBooleani_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
		public static void GetBoolean(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] out bool data) {
			unsafe {
				fixed (bool* data_ptr = &data) {
					Delegates.glGetBooleani_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
		public static unsafe void GetBoolean(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] bool* data) {
			Delegates.glGetBooleani_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (bool*)data);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
		public static void GetBoolean(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] bool[] data) {
			unsafe {
				fixed (bool* data_ptr = data) {
					Delegates.glGetBooleani_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
		public static void GetBoolean(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] out bool data) {
			unsafe {
				fixed (bool* data_ptr = &data) {
					Delegates.glGetBooleani_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetBooleani_v")]
		public static unsafe void GetBoolean(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] bool* data) {
			Delegates.glGetBooleani_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (bool*)data);
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
		public static void GetBoolean(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] bool[] @params) {
			unsafe {
				fixed (bool* @params_ptr = @params) {
					Delegates.glGetBooleanv((Pencil.Gaming.Graphics.GetPName)pname, (bool*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
		public static void GetBoolean(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] out bool @params) {
			unsafe {
				fixed (bool* @params_ptr = &@params) {
					Delegates.glGetBooleanv((Pencil.Gaming.Graphics.GetPName)pname, (bool*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetBooleanv")]
		public static unsafe void GetBoolean(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] bool* @params) {
			Delegates.glGetBooleanv((Pencil.Gaming.Graphics.GetPName)pname, (bool*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
		public static void GetBufferParameter(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferParameterName pname, [OutAttribute] Int64[] @params) {
			unsafe {
				fixed (Int64* @params_ptr = @params) {
					Delegates.glGetBufferParameteri64v((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferParameterName)pname, (Int64*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
		public static void GetBufferParameter(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferParameterName pname, [OutAttribute] out Int64 @params) {
			unsafe {
				fixed (Int64* @params_ptr = &@params) {
					Delegates.glGetBufferParameteri64v((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferParameterName)pname, (Int64*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetBufferParameteri64v")]
		public static unsafe void GetBufferParameter(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferParameterName pname, [OutAttribute] Int64* @params) {
			Delegates.glGetBufferParameteri64v((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferParameterName)pname, (Int64*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
		public static void GetBufferParameter(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferParameterName pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetBufferParameteriv((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferParameterName)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
		public static void GetBufferParameter(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferParameterName pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetBufferParameteriv((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferParameterName)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferParameteriv")]
		public static unsafe void GetBufferParameter(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferParameterName pname, [OutAttribute] Int32* @params) {
			Delegates.glGetBufferParameteriv((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferParameterName)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
		public static void GetBufferPointer(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferPointer pname, [OutAttribute] IntPtr @params) {
			Delegates.glGetBufferPointerv((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferPointer)pname, (IntPtr)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
		public static void GetBufferPointer<T2>(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
			where T2 : struct {
			GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
			try {
				Delegates.glGetBufferPointerv((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
			} finally {
				 @params_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
		public static void GetBufferPointer<T2>(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
			where T2 : struct {
			GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
			try {
				Delegates.glGetBufferPointerv((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
			} finally {
				 @params_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
		public static void GetBufferPointer<T2>(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
			where T2 : struct {
			GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
			try {
				Delegates.glGetBufferPointerv((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
			} finally {
				 @params_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferPointerv")]
		public static void GetBufferPointer<T2>(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
			where T2 : struct {
			GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
			try {
				Delegates.glGetBufferPointerv((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
				 @params = (T2)@params_ptr.Target;
			} finally {
				 @params_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
		public static void GetBufferSubData(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [OutAttribute] IntPtr data) {
			Delegates.glGetBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
		public static void GetBufferSubData<T3>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
			where T3 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glGetBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
		public static void GetBufferSubData<T3>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
			where T3 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glGetBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
		public static void GetBufferSubData<T3>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
			where T3 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glGetBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
			} finally {
				data_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetBufferSubData")]
		public static void GetBufferSubData<T3>(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
			where T3 : struct {
			GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
			try {
				Delegates.glGetBufferSubData((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
				data = (T3)data_ptr.Target;
			} finally {
				data_ptr.Free();
			}
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
		public static void GetClipPlane(Pencil.Gaming.Graphics.ClipPlaneName plane, [OutAttribute] Double[] equation) {
			unsafe {
				fixed (Double* equation_ptr = equation) {
					Delegates.glGetClipPlane((Pencil.Gaming.Graphics.ClipPlaneName)plane, (Double*)equation_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
		public static void GetClipPlane(Pencil.Gaming.Graphics.ClipPlaneName plane, [OutAttribute] out Double equation) {
			unsafe {
				fixed (Double* equation_ptr = &equation) {
					Delegates.glGetClipPlane((Pencil.Gaming.Graphics.ClipPlaneName)plane, (Double*)equation_ptr);
					equation = *equation_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetClipPlane")]
		public static unsafe void GetClipPlane(Pencil.Gaming.Graphics.ClipPlaneName plane, [OutAttribute] Double* equation) {
			Delegates.glGetClipPlane((Pencil.Gaming.Graphics.ClipPlaneName)plane, (Double*)equation);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
		public static void GetColorTable(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr table) {
			Delegates.glGetColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
		public static void GetColorTable<T3>(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[] table)
			where T3 : struct {
			GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
			try {
				Delegates.glGetColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
			} finally {
				table_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
		public static void GetColorTable<T3>(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[,] table)
			where T3 : struct {
			GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
			try {
				Delegates.glGetColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
			} finally {
				table_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
		public static void GetColorTable<T3>(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[,,] table)
			where T3 : struct {
			GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
			try {
				Delegates.glGetColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
			} finally {
				table_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTable")]
		public static void GetColorTable<T3>(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T3 table)
			where T3 : struct {
			GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
			try {
				Delegates.glGetColorTable((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
				table = (T3)table_ptr.Target;
			} finally {
				table_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
		public static void GetColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.GetColorTableParameterPName pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetColorTableParameterfv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.GetColorTableParameterPName)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
		public static void GetColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.GetColorTableParameterPName pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetColorTableParameterfv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.GetColorTableParameterPName)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameterfv")]
		public static unsafe void GetColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.GetColorTableParameterPName pname, [OutAttribute] Single* @params) {
			Delegates.glGetColorTableParameterfv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.GetColorTableParameterPName)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
		public static void GetColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.GetColorTableParameterPName pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetColorTableParameteriv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
		public static void GetColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.GetColorTableParameterPName pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetColorTableParameteriv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetColorTableParameteriv")]
		public static unsafe void GetColorTableParameter(Pencil.Gaming.Graphics.ColorTableTarget target, Pencil.Gaming.Graphics.GetColorTableParameterPName pname, [OutAttribute] Int32* @params) {
			Delegates.glGetColorTableParameteriv((Pencil.Gaming.Graphics.ColorTableTarget)target, (Pencil.Gaming.Graphics.GetColorTableParameterPName)pname, (Int32*)@params);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
		public static void GetCompressedTexImage(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, [OutAttribute] IntPtr img) {
			Delegates.glGetCompressedTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img);
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
		public static void GetCompressedTexImage<T2>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[] img)
			where T2 : struct {
			GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
			try {
				Delegates.glGetCompressedTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
			} finally {
				img_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
		public static void GetCompressedTexImage<T2>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,] img)
			where T2 : struct {
			GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
			try {
				Delegates.glGetCompressedTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
			} finally {
				img_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
		public static void GetCompressedTexImage<T2>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, [InAttribute, OutAttribute] T2[,,] img)
			where T2 : struct {
			GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
			try {
				Delegates.glGetCompressedTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
			} finally {
				img_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glGetCompressedTexImage")]
		public static void GetCompressedTexImage<T2>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, [InAttribute, OutAttribute] ref T2 img)
			where T2 : struct {
			GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
			try {
				Delegates.glGetCompressedTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
				img = (T2)img_ptr.Target;
			} finally {
				img_ptr.Free();
			}
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
		public static void GetConvolutionFilter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr image) {
			Delegates.glGetConvolutionFilter((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
		public static void GetConvolutionFilter<T3>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[] image)
			where T3 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glGetConvolutionFilter((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
		public static void GetConvolutionFilter<T3>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[,] image)
			where T3 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glGetConvolutionFilter((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
		public static void GetConvolutionFilter<T3>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[,,] image)
			where T3 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glGetConvolutionFilter((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionFilter")]
		public static void GetConvolutionFilter<T3>(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T3 image)
			where T3 : struct {
			GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
			try {
				Delegates.glGetConvolutionFilter((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
				image = (T3)image_ptr.Target;
			} finally {
				image_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
		public static void GetConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.GetConvolutionParameterPName pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetConvolutionParameterfv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.GetConvolutionParameterPName)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
		public static void GetConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.GetConvolutionParameterPName pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetConvolutionParameterfv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.GetConvolutionParameterPName)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameterfv")]
		public static unsafe void GetConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.GetConvolutionParameterPName pname, [OutAttribute] Single* @params) {
			Delegates.glGetConvolutionParameterfv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.GetConvolutionParameterPName)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
		public static void GetConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.GetConvolutionParameterPName pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetConvolutionParameteriv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.GetConvolutionParameterPName)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
		public static void GetConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.GetConvolutionParameterPName pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetConvolutionParameteriv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.GetConvolutionParameterPName)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetConvolutionParameteriv")]
		public static unsafe void GetConvolutionParameter(Pencil.Gaming.Graphics.ConvolutionTarget target, Pencil.Gaming.Graphics.GetConvolutionParameterPName pname, [OutAttribute] Int32* @params) {
			Delegates.glGetConvolutionParameteriv((Pencil.Gaming.Graphics.ConvolutionTarget)target, (Pencil.Gaming.Graphics.GetConvolutionParameterPName)pname, (Int32*)@params);
		}
		#endif

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetDoublei_v")]
		public static void GetDouble(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] Double[] data) {
			unsafe {
				fixed (Double* data_ptr = data) {
					Delegates.glGetDoublei_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Double*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetDoublei_v")]
		public static void GetDouble(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] out Double data) {
			unsafe {
				fixed (Double* data_ptr = &data) {
					Delegates.glGetDoublei_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Double*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetDoublei_v")]
		public static unsafe void GetDouble(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] Double* data) {
			Delegates.glGetDoublei_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Double*)data);
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetDoublei_v")]
		public static void GetDouble(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] Double[] data) {
			unsafe {
				fixed (Double* data_ptr = data) {
					Delegates.glGetDoublei_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Double*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetDoublei_v")]
		public static void GetDouble(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] out Double data) {
			unsafe {
				fixed (Double* data_ptr = &data) {
					Delegates.glGetDoublei_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Double*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetDoublei_v")]
		public static unsafe void GetDouble(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] Double* data) {
			Delegates.glGetDoublei_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Double*)data);
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
		public static void GetDouble(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glGetDoublev((Pencil.Gaming.Graphics.GetPName)pname, (Double*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
		public static void GetDouble(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] out Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glGetDoublev((Pencil.Gaming.Graphics.GetPName)pname, (Double*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetDoublev")]
		public static unsafe void GetDouble(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] Double* @params) {
			Delegates.glGetDoublev((Pencil.Gaming.Graphics.GetPName)pname, (Double*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetError")]
		public static Pencil.Gaming.Graphics.ErrorCode GetError() {
			return Delegates.glGetError();
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetFloati_v")]
		public static void GetFloat(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] Single[] data) {
			unsafe {
				fixed (Single* data_ptr = data) {
					Delegates.glGetFloati_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Single*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetFloati_v")]
		public static void GetFloat(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] out Single data) {
			unsafe {
				fixed (Single* data_ptr = &data) {
					Delegates.glGetFloati_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Single*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetFloati_v")]
		public static unsafe void GetFloat(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] Single* data) {
			Delegates.glGetFloati_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Single*)data);
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetFloati_v")]
		public static void GetFloat(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] Single[] data) {
			unsafe {
				fixed (Single* data_ptr = data) {
					Delegates.glGetFloati_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Single*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetFloati_v")]
		public static void GetFloat(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] out Single data) {
			unsafe {
				fixed (Single* data_ptr = &data) {
					Delegates.glGetFloati_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Single*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glGetFloati_v")]
		public static unsafe void GetFloat(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] Single* data) {
			Delegates.glGetFloati_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Single*)data);
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
		public static void GetFloat(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetFloatv((Pencil.Gaming.Graphics.GetPName)pname, (Single*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
		public static void GetFloat(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetFloatv((Pencil.Gaming.Graphics.GetPName)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetFloatv")]
		public static unsafe void GetFloat(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] Single* @params) {
			Delegates.glGetFloatv((Pencil.Gaming.Graphics.GetPName)pname, (Single*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_blend_func_extended", Version = "1.2", EntryPoint = "glGetFragDataIndex")]
		public static Int32 GetFragDataIndex(Int32 program, String name) {
			return Delegates.glGetFragDataIndex((UInt32)program, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_blend_func_extended", Version = "1.2", EntryPoint = "glGetFragDataIndex")]
		public static Int32 GetFragDataIndex(UInt32 program, String name) {
			return Delegates.glGetFragDataIndex((UInt32)program, (String)name);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
		public static Int32 GetFragDataLocation(Int32 program, String name) {
			return Delegates.glGetFragDataLocation((UInt32)program, (String)name);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetFragDataLocation")]
		public static Int32 GetFragDataLocation(UInt32 program, String name) {
			return Delegates.glGetFragDataLocation((UInt32)program, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
		public static void GetFramebufferAttachmentParameter(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.FramebufferParameterName pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetFramebufferAttachmentParameteriv((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.FramebufferParameterName)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
		public static void GetFramebufferAttachmentParameter(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.FramebufferParameterName pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetFramebufferAttachmentParameteriv((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.FramebufferParameterName)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
		public static unsafe void GetFramebufferAttachmentParameter(Pencil.Gaming.Graphics.FramebufferTarget target, Pencil.Gaming.Graphics.FramebufferAttachment attachment, Pencil.Gaming.Graphics.FramebufferParameterName pname, [OutAttribute] Int32* @params) {
			Delegates.glGetFramebufferAttachmentParameteriv((Pencil.Gaming.Graphics.FramebufferTarget)target, (Pencil.Gaming.Graphics.FramebufferAttachment)attachment, (Pencil.Gaming.Graphics.FramebufferParameterName)pname, (Int32*)@params);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
		public static void GetHistogram(Pencil.Gaming.Graphics.HistogramTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr values) {
			Delegates.glGetHistogram((Pencil.Gaming.Graphics.HistogramTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
		public static void GetHistogram<T4>(Pencil.Gaming.Graphics.HistogramTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[] values)
			where T4 : struct {
			GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
			try {
				Delegates.glGetHistogram((Pencil.Gaming.Graphics.HistogramTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
			} finally {
				values_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
		public static void GetHistogram<T4>(Pencil.Gaming.Graphics.HistogramTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[,] values)
			where T4 : struct {
			GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
			try {
				Delegates.glGetHistogram((Pencil.Gaming.Graphics.HistogramTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
			} finally {
				values_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
		public static void GetHistogram<T4>(Pencil.Gaming.Graphics.HistogramTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[,,] values)
			where T4 : struct {
			GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
			try {
				Delegates.glGetHistogram((Pencil.Gaming.Graphics.HistogramTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
			} finally {
				values_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogram")]
		public static void GetHistogram<T4>(Pencil.Gaming.Graphics.HistogramTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T4 values)
			where T4 : struct {
			GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
			try {
				Delegates.glGetHistogram((Pencil.Gaming.Graphics.HistogramTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
				values = (T4)values_ptr.Target;
			} finally {
				values_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
		public static void GetHistogramParameter(Pencil.Gaming.Graphics.HistogramTarget target, Pencil.Gaming.Graphics.GetHistogramParameterPName pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetHistogramParameterfv((Pencil.Gaming.Graphics.HistogramTarget)target, (Pencil.Gaming.Graphics.GetHistogramParameterPName)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
		public static void GetHistogramParameter(Pencil.Gaming.Graphics.HistogramTarget target, Pencil.Gaming.Graphics.GetHistogramParameterPName pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetHistogramParameterfv((Pencil.Gaming.Graphics.HistogramTarget)target, (Pencil.Gaming.Graphics.GetHistogramParameterPName)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameterfv")]
		public static unsafe void GetHistogramParameter(Pencil.Gaming.Graphics.HistogramTarget target, Pencil.Gaming.Graphics.GetHistogramParameterPName pname, [OutAttribute] Single* @params) {
			Delegates.glGetHistogramParameterfv((Pencil.Gaming.Graphics.HistogramTarget)target, (Pencil.Gaming.Graphics.GetHistogramParameterPName)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
		public static void GetHistogramParameter(Pencil.Gaming.Graphics.HistogramTarget target, Pencil.Gaming.Graphics.GetHistogramParameterPName pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetHistogramParameteriv((Pencil.Gaming.Graphics.HistogramTarget)target, (Pencil.Gaming.Graphics.GetHistogramParameterPName)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
		public static void GetHistogramParameter(Pencil.Gaming.Graphics.HistogramTarget target, Pencil.Gaming.Graphics.GetHistogramParameterPName pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetHistogramParameteriv((Pencil.Gaming.Graphics.HistogramTarget)target, (Pencil.Gaming.Graphics.GetHistogramParameterPName)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetHistogramParameteriv")]
		public static unsafe void GetHistogramParameter(Pencil.Gaming.Graphics.HistogramTarget target, Pencil.Gaming.Graphics.GetHistogramParameterPName pname, [OutAttribute] Int32* @params) {
			Delegates.glGetHistogramParameteriv((Pencil.Gaming.Graphics.HistogramTarget)target, (Pencil.Gaming.Graphics.GetHistogramParameterPName)pname, (Int32*)@params);
		}
		#endif

		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] Int64[] data) {
			unsafe {
				fixed (Int64* data_ptr = data) {
					Delegates.glGetInteger64i_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] out Int64 data) {
			unsafe {
				fixed (Int64* data_ptr = &data) {
					Delegates.glGetInteger64i_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
		public static unsafe void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] Int64* data) {
			Delegates.glGetInteger64i_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int64*)data);
		}

		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] Int64[] data) {
			unsafe {
				fixed (Int64* data_ptr = data) {
					Delegates.glGetInteger64i_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] out Int64 data) {
			unsafe {
				fixed (Int64* data_ptr = &data) {
					Delegates.glGetInteger64i_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int64*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_2", Version = "3.2", EntryPoint = "glGetInteger64i_v")]
		public static unsafe void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] Int64* data) {
			Delegates.glGetInteger64i_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int64*)data);
		}

		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
		public static void GetInteger64(Pencil.Gaming.Graphics.ArbSync pname, [OutAttribute] Int64[] @params) {
			unsafe {
				fixed (Int64* @params_ptr = @params) {
					Delegates.glGetInteger64v((Pencil.Gaming.Graphics.ArbSync)pname, (Int64*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
		public static void GetInteger64(Pencil.Gaming.Graphics.ArbSync pname, [OutAttribute] out Int64 @params) {
			unsafe {
				fixed (Int64* @params_ptr = &@params) {
					Delegates.glGetInteger64v((Pencil.Gaming.Graphics.ArbSync)pname, (Int64*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetInteger64v")]
		public static unsafe void GetInteger64(Pencil.Gaming.Graphics.ArbSync pname, [OutAttribute] Int64* @params) {
			Delegates.glGetInteger64v((Pencil.Gaming.Graphics.ArbSync)pname, (Int64*)@params);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data) {
			unsafe {
				fixed (Int32* data_ptr = data) {
					Delegates.glGetIntegeri_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data) {
			unsafe {
				fixed (Int32* data_ptr = &data) {
					Delegates.glGetIntegeri_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
		public static unsafe void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data) {
			Delegates.glGetIntegeri_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int32*)data);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data) {
			unsafe {
				fixed (Int32* data_ptr = data) {
					Delegates.glGetIntegeri_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data) {
			unsafe {
				fixed (Int32* data_ptr = &data) {
					Delegates.glGetIntegeri_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
					data = *data_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetIntegeri_v")]
		public static unsafe void GetInteger(Pencil.Gaming.Graphics.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data) {
			Delegates.glGetIntegeri_v((Pencil.Gaming.Graphics.GetIndexedPName)target, (UInt32)index, (Int32*)data);
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetIntegerv((Pencil.Gaming.Graphics.GetPName)pname, (Int32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
		public static void GetInteger(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetIntegerv((Pencil.Gaming.Graphics.GetPName)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetIntegerv")]
		public static unsafe void GetInteger(Pencil.Gaming.Graphics.GetPName pname, [OutAttribute] Int32* @params) {
			Delegates.glGetIntegerv((Pencil.Gaming.Graphics.GetPName)pname, (Int32*)@params);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
		public static void GetLight(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetLightfv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
		public static void GetLight(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetLightfv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightfv")]
		public static unsafe void GetLight(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetLightfv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
		public static void GetLight(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetLightiv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
		public static void GetLight(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetLightiv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetLightiv")]
		public static unsafe void GetLight(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetLightiv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Int32*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
		public static void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glGetMapdv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
		public static void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] out Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glGetMapdv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Double*)v_ptr);
					v = *v_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapdv")]
		public static unsafe void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] Double* v) {
			Delegates.glGetMapdv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
		public static void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glGetMapfv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
		public static void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] out Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glGetMapfv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Single*)v_ptr);
					v = *v_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapfv")]
		public static unsafe void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] Single* v) {
			Delegates.glGetMapfv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
		public static void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glGetMapiv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
		public static void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] out Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glGetMapiv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Int32*)v_ptr);
					v = *v_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMapiv")]
		public static unsafe void GetMap(Pencil.Gaming.Graphics.MapTarget target, Pencil.Gaming.Graphics.GetMapQuery query, [OutAttribute] Int32* v) {
			Delegates.glGetMapiv((Pencil.Gaming.Graphics.MapTarget)target, (Pencil.Gaming.Graphics.GetMapQuery)query, (Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
		public static void GetMaterial(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetMaterialfv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
		public static void GetMaterial(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetMaterialfv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialfv")]
		public static unsafe void GetMaterial(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetMaterialfv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
		public static void GetMaterial(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetMaterialiv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
		public static void GetMaterial(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetMaterialiv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetMaterialiv")]
		public static unsafe void GetMaterial(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetMaterialiv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Int32*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
		public static void GetMinmax(Pencil.Gaming.Graphics.MinmaxTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr values) {
			Delegates.glGetMinmax((Pencil.Gaming.Graphics.MinmaxTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
		public static void GetMinmax<T4>(Pencil.Gaming.Graphics.MinmaxTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[] values)
			where T4 : struct {
			GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
			try {
				Delegates.glGetMinmax((Pencil.Gaming.Graphics.MinmaxTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
			} finally {
				values_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
		public static void GetMinmax<T4>(Pencil.Gaming.Graphics.MinmaxTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[,] values)
			where T4 : struct {
			GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
			try {
				Delegates.glGetMinmax((Pencil.Gaming.Graphics.MinmaxTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
			} finally {
				values_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
		public static void GetMinmax<T4>(Pencil.Gaming.Graphics.MinmaxTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[,,] values)
			where T4 : struct {
			GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
			try {
				Delegates.glGetMinmax((Pencil.Gaming.Graphics.MinmaxTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
			} finally {
				values_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmax")]
		public static void GetMinmax<T4>(Pencil.Gaming.Graphics.MinmaxTarget target, bool reset, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T4 values)
			where T4 : struct {
			GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
			try {
				Delegates.glGetMinmax((Pencil.Gaming.Graphics.MinmaxTarget)target, (bool)reset, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
				values = (T4)values_ptr.Target;
			} finally {
				values_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
		public static void GetMinmaxParameter(Pencil.Gaming.Graphics.MinmaxTarget target, Pencil.Gaming.Graphics.GetMinmaxParameterPName pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetMinmaxParameterfv((Pencil.Gaming.Graphics.MinmaxTarget)target, (Pencil.Gaming.Graphics.GetMinmaxParameterPName)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
		public static void GetMinmaxParameter(Pencil.Gaming.Graphics.MinmaxTarget target, Pencil.Gaming.Graphics.GetMinmaxParameterPName pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetMinmaxParameterfv((Pencil.Gaming.Graphics.MinmaxTarget)target, (Pencil.Gaming.Graphics.GetMinmaxParameterPName)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameterfv")]
		public static unsafe void GetMinmaxParameter(Pencil.Gaming.Graphics.MinmaxTarget target, Pencil.Gaming.Graphics.GetMinmaxParameterPName pname, [OutAttribute] Single* @params) {
			Delegates.glGetMinmaxParameterfv((Pencil.Gaming.Graphics.MinmaxTarget)target, (Pencil.Gaming.Graphics.GetMinmaxParameterPName)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
		public static void GetMinmaxParameter(Pencil.Gaming.Graphics.MinmaxTarget target, Pencil.Gaming.Graphics.GetMinmaxParameterPName pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetMinmaxParameteriv((Pencil.Gaming.Graphics.MinmaxTarget)target, (Pencil.Gaming.Graphics.GetMinmaxParameterPName)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
		public static void GetMinmaxParameter(Pencil.Gaming.Graphics.MinmaxTarget target, Pencil.Gaming.Graphics.GetMinmaxParameterPName pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetMinmaxParameteriv((Pencil.Gaming.Graphics.MinmaxTarget)target, (Pencil.Gaming.Graphics.GetMinmaxParameterPName)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetMinmaxParameteriv")]
		public static unsafe void GetMinmaxParameter(Pencil.Gaming.Graphics.MinmaxTarget target, Pencil.Gaming.Graphics.GetMinmaxParameterPName pname, [OutAttribute] Int32* @params) {
			Delegates.glGetMinmaxParameteriv((Pencil.Gaming.Graphics.MinmaxTarget)target, (Pencil.Gaming.Graphics.GetMinmaxParameterPName)pname, (Int32*)@params);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
		public static void GetMultisample(Pencil.Gaming.Graphics.GetMultisamplePName pname, Int32 index, [OutAttribute] Single[] val) {
			unsafe {
				fixed (Single* val_ptr = val) {
					Delegates.glGetMultisamplefv((Pencil.Gaming.Graphics.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
		public static void GetMultisample(Pencil.Gaming.Graphics.GetMultisamplePName pname, Int32 index, [OutAttribute] out Single val) {
			unsafe {
				fixed (Single* val_ptr = &val) {
					Delegates.glGetMultisamplefv((Pencil.Gaming.Graphics.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
					val = *val_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
		public static unsafe void GetMultisample(Pencil.Gaming.Graphics.GetMultisamplePName pname, Int32 index, [OutAttribute] Single* val) {
			Delegates.glGetMultisamplefv((Pencil.Gaming.Graphics.GetMultisamplePName)pname, (UInt32)index, (Single*)val);
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
		public static void GetMultisample(Pencil.Gaming.Graphics.GetMultisamplePName pname, UInt32 index, [OutAttribute] Single[] val) {
			unsafe {
				fixed (Single* val_ptr = val) {
					Delegates.glGetMultisamplefv((Pencil.Gaming.Graphics.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
		public static void GetMultisample(Pencil.Gaming.Graphics.GetMultisamplePName pname, UInt32 index, [OutAttribute] out Single val) {
			unsafe {
				fixed (Single* val_ptr = &val) {
					Delegates.glGetMultisamplefv((Pencil.Gaming.Graphics.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
					val = *val_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glGetMultisamplefv")]
		public static unsafe void GetMultisample(Pencil.Gaming.Graphics.GetMultisamplePName pname, UInt32 index, [OutAttribute] Single* val) {
			Delegates.glGetMultisamplefv((Pencil.Gaming.Graphics.GetMultisamplePName)pname, (UInt32)index, (Single*)val);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] Single[] values) {
			unsafe {
				fixed (Single* values_ptr = values) {
					Delegates.glGetPixelMapfv((Pencil.Gaming.Graphics.PixelMap)map, (Single*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] out Single values) {
			unsafe {
				fixed (Single* values_ptr = &values) {
					Delegates.glGetPixelMapfv((Pencil.Gaming.Graphics.PixelMap)map, (Single*)values_ptr);
					values = *values_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapfv")]
		public static unsafe void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] Single* values) {
			Delegates.glGetPixelMapfv((Pencil.Gaming.Graphics.PixelMap)map, (Single*)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] Int32[] values) {
			unsafe {
				fixed (Int32* values_ptr = values) {
					Delegates.glGetPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (UInt32*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] out Int32 values) {
			unsafe {
				fixed (Int32* values_ptr = &values) {
					Delegates.glGetPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (UInt32*)values_ptr);
					values = *values_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
		public static unsafe void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] Int32* values) {
			Delegates.glGetPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (UInt32*)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] UInt32[] values) {
			unsafe {
				fixed (UInt32* values_ptr = values) {
					Delegates.glGetPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (UInt32*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] out UInt32 values) {
			unsafe {
				fixed (UInt32* values_ptr = &values) {
					Delegates.glGetPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (UInt32*)values_ptr);
					values = *values_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapuiv")]
		public static unsafe void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] UInt32* values) {
			Delegates.glGetPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (UInt32*)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] Int16[] values) {
			unsafe {
				fixed (Int16* values_ptr = values) {
					Delegates.glGetPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (UInt16*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] out Int16 values) {
			unsafe {
				fixed (Int16* values_ptr = &values) {
					Delegates.glGetPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (UInt16*)values_ptr);
					values = *values_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
		public static unsafe void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] Int16* values) {
			Delegates.glGetPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (UInt16*)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] UInt16[] values) {
			unsafe {
				fixed (UInt16* values_ptr = values) {
					Delegates.glGetPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (UInt16*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
		public static void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] out UInt16 values) {
			unsafe {
				fixed (UInt16* values_ptr = &values) {
					Delegates.glGetPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (UInt16*)values_ptr);
					values = *values_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPixelMapusv")]
		public static unsafe void GetPixelMap(Pencil.Gaming.Graphics.PixelMap map, [OutAttribute] UInt16* values) {
			Delegates.glGetPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (UInt16*)values);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
		public static void GetPointer(Pencil.Gaming.Graphics.GetPointervPName pname, [OutAttribute] IntPtr @params) {
			Delegates.glGetPointerv((Pencil.Gaming.Graphics.GetPointervPName)pname, (IntPtr)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
		public static void GetPointer<T1>(Pencil.Gaming.Graphics.GetPointervPName pname, [InAttribute, OutAttribute] T1[] @params)
			where T1 : struct {
			GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
			try {
				Delegates.glGetPointerv((Pencil.Gaming.Graphics.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
			} finally {
				 @params_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
		public static void GetPointer<T1>(Pencil.Gaming.Graphics.GetPointervPName pname, [InAttribute, OutAttribute] T1[,] @params)
			where T1 : struct {
			GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
			try {
				Delegates.glGetPointerv((Pencil.Gaming.Graphics.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
			} finally {
				 @params_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
		public static void GetPointer<T1>(Pencil.Gaming.Graphics.GetPointervPName pname, [InAttribute, OutAttribute] T1[,,] @params)
			where T1 : struct {
			GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
			try {
				Delegates.glGetPointerv((Pencil.Gaming.Graphics.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
			} finally {
				 @params_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glGetPointerv")]
		public static void GetPointer<T1>(Pencil.Gaming.Graphics.GetPointervPName pname, [InAttribute, OutAttribute] ref T1 @params)
			where T1 : struct {
			GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
			try {
				Delegates.glGetPointerv((Pencil.Gaming.Graphics.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
				 @params = (T1)@params_ptr.Target;
			} finally {
				 @params_ptr.Free();
			}
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
		public static void GetPolygonStipple([OutAttribute] Byte[] mask) {
			unsafe {
				fixed (Byte* mask_ptr = mask) {
					Delegates.glGetPolygonStipple((Byte*)mask_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
		public static void GetPolygonStipple([OutAttribute] out Byte mask) {
			unsafe {
				fixed (Byte* mask_ptr = &mask) {
					Delegates.glGetPolygonStipple((Byte*)mask_ptr);
					mask = *mask_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetPolygonStipple")]
		public static unsafe void GetPolygonStipple([OutAttribute] Byte* mask) {
			Delegates.glGetPolygonStipple((Byte*)mask);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [OutAttribute] IntPtr binary) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary);
						length = *length_ptr;
						binaryFormat = *binaryFormat_ptr;
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[] binary)
			where T4 : struct {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
						try {
							Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
							length = *length_ptr;
							binaryFormat = *binaryFormat_ptr;
						} finally {
							binary_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
			where T4 : struct {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
						try {
							Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
							length = *length_ptr;
							binaryFormat = *binaryFormat_ptr;
						} finally {
							binary_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
			where T4 : struct {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
						try {
							Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
							length = *length_ptr;
							binaryFormat = *binaryFormat_ptr;
						} finally {
							binary_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
			where T4 : struct {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
						try {
							Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
							length = *length_ptr;
							binaryFormat = *binaryFormat_ptr;
							binary = (T4)binary_ptr.Target;
						} finally {
							binary_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [OutAttribute] IntPtr binary) {
			Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary);
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
			where T4 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
			where T4 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
			where T4 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
			where T4 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
				binary = (T4)binary_ptr.Target;
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [OutAttribute] IntPtr binary) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary);
						length = *length_ptr;
						binaryFormat = *binaryFormat_ptr;
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[] binary)
			where T4 : struct {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
						try {
							Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
							length = *length_ptr;
							binaryFormat = *binaryFormat_ptr;
						} finally {
							binary_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
			where T4 : struct {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
						try {
							Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
							length = *length_ptr;
							binaryFormat = *binaryFormat_ptr;
						} finally {
							binary_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
			where T4 : struct {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
						try {
							Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
							length = *length_ptr;
							binaryFormat = *binaryFormat_ptr;
						} finally {
							binary_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
			where T4 : struct {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Pencil.Gaming.Graphics.BinaryFormat* binaryFormat_ptr = &binaryFormat) {
						GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
						try {
							Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
							length = *length_ptr;
							binaryFormat = *binaryFormat_ptr;
							binary = (T4)binary_ptr.Target;
						} finally {
							binary_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [OutAttribute] IntPtr binary) {
			Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary);
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[] binary)
			where T4 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[,] binary)
			where T4 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] T4[,,] binary)
			where T4 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glGetProgramBinary")]
		public static unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Pencil.Gaming.Graphics.BinaryFormat* binaryFormat, [InAttribute, OutAttribute] ref T4 binary)
			where T4 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glGetProgramBinary((UInt32)program, (Int32)bufSize, (Int32*)length, (Pencil.Gaming.Graphics.BinaryFormat*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
				binary = (T4)binary_ptr.Target;
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
		public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
		public static unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) {
			Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
		public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
		public static unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) {
			Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
		public static void GetProgram(Int32 program, Pencil.Gaming.Graphics.ProgramParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetProgramiv((UInt32)program, (Pencil.Gaming.Graphics.ProgramParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
		public static void GetProgram(Int32 program, Pencil.Gaming.Graphics.ProgramParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetProgramiv((UInt32)program, (Pencil.Gaming.Graphics.ProgramParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
		public static unsafe void GetProgram(Int32 program, Pencil.Gaming.Graphics.ProgramParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetProgramiv((UInt32)program, (Pencil.Gaming.Graphics.ProgramParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
		public static void GetProgram(UInt32 program, Pencil.Gaming.Graphics.ProgramParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetProgramiv((UInt32)program, (Pencil.Gaming.Graphics.ProgramParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
		public static void GetProgram(UInt32 program, Pencil.Gaming.Graphics.ProgramParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetProgramiv((UInt32)program, (Pencil.Gaming.Graphics.ProgramParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
		public static unsafe void GetProgram(UInt32 program, Pencil.Gaming.Graphics.ProgramParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetProgramiv((UInt32)program, (Pencil.Gaming.Graphics.ProgramParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
		public static void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetProgramPipelineInfoLog((UInt32)pipeline, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
		public static unsafe void GetProgramPipelineInfoLog(Int32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) {
			Delegates.glGetProgramPipelineInfoLog((UInt32)pipeline, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
		public static void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetProgramPipelineInfoLog((UInt32)pipeline, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineInfoLog")]
		public static unsafe void GetProgramPipelineInfoLog(UInt32 pipeline, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) {
			Delegates.glGetProgramPipelineInfoLog((UInt32)pipeline, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
		public static void GetProgramPipeline(Int32 pipeline, Pencil.Gaming.Graphics.ProgramPipelineParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetProgramPipelineiv((UInt32)pipeline, (Pencil.Gaming.Graphics.ProgramPipelineParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
		public static void GetProgramPipeline(Int32 pipeline, Pencil.Gaming.Graphics.ProgramPipelineParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetProgramPipelineiv((UInt32)pipeline, (Pencil.Gaming.Graphics.ProgramPipelineParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
		public static unsafe void GetProgramPipeline(Int32 pipeline, Pencil.Gaming.Graphics.ProgramPipelineParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetProgramPipelineiv((UInt32)pipeline, (Pencil.Gaming.Graphics.ProgramPipelineParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
		public static void GetProgramPipeline(UInt32 pipeline, Pencil.Gaming.Graphics.ProgramPipelineParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetProgramPipelineiv((UInt32)pipeline, (Pencil.Gaming.Graphics.ProgramPipelineParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
		public static void GetProgramPipeline(UInt32 pipeline, Pencil.Gaming.Graphics.ProgramPipelineParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetProgramPipelineiv((UInt32)pipeline, (Pencil.Gaming.Graphics.ProgramPipelineParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glGetProgramPipelineiv")]
		public static unsafe void GetProgramPipeline(UInt32 pipeline, Pencil.Gaming.Graphics.ProgramPipelineParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetProgramPipelineiv((UInt32)pipeline, (Pencil.Gaming.Graphics.ProgramPipelineParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetProgramStageiv")]
		public static void GetProgramStage(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Pencil.Gaming.Graphics.ProgramStageParameter pname, [OutAttribute] out Int32 values) {
			unsafe {
				fixed (Int32* values_ptr = &values) {
					Delegates.glGetProgramStageiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (Pencil.Gaming.Graphics.ProgramStageParameter)pname, (Int32*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetProgramStageiv")]
		public static unsafe void GetProgramStage(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Pencil.Gaming.Graphics.ProgramStageParameter pname, [OutAttribute] Int32* values) {
			Delegates.glGetProgramStageiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (Pencil.Gaming.Graphics.ProgramStageParameter)pname, (Int32*)values);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetProgramStageiv")]
		public static void GetProgramStage(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Pencil.Gaming.Graphics.ProgramStageParameter pname, [OutAttribute] out Int32 values) {
			unsafe {
				fixed (Int32* values_ptr = &values) {
					Delegates.glGetProgramStageiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (Pencil.Gaming.Graphics.ProgramStageParameter)pname, (Int32*)values_ptr);
					values = *values_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetProgramStageiv")]
		public static unsafe void GetProgramStage(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, Pencil.Gaming.Graphics.ProgramStageParameter pname, [OutAttribute] Int32* values) {
			Delegates.glGetProgramStageiv((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (Pencil.Gaming.Graphics.ProgramStageParameter)pname, (Int32*)values);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glGetQueryIndexediv")]
		public static void GetQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, Int32 index, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetQueryIndexediv((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glGetQueryIndexediv")]
		public static void GetQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, Int32 index, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetQueryIndexediv((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glGetQueryIndexediv")]
		public static unsafe void GetQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, Int32 index, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] Int32* @params) {
			Delegates.glGetQueryIndexediv((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glGetQueryIndexediv")]
		public static void GetQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, UInt32 index, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetQueryIndexediv((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glGetQueryIndexediv")]
		public static void GetQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, UInt32 index, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetQueryIndexediv((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback3", Version = "1.2", EntryPoint = "glGetQueryIndexediv")]
		public static unsafe void GetQueryIndexed(Pencil.Gaming.Graphics.QueryTarget target, UInt32 index, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] Int32* @params) {
			Delegates.glGetQueryIndexediv((Pencil.Gaming.Graphics.QueryTarget)target, (UInt32)index, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
		public static void GetQuery(Pencil.Gaming.Graphics.QueryTarget target, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetQueryiv((Pencil.Gaming.Graphics.QueryTarget)target, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
		public static void GetQuery(Pencil.Gaming.Graphics.QueryTarget target, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetQueryiv((Pencil.Gaming.Graphics.QueryTarget)target, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryiv")]
		public static unsafe void GetQuery(Pencil.Gaming.Graphics.QueryTarget target, Pencil.Gaming.Graphics.GetQueryParam pname, [OutAttribute] Int32* @params) {
			Delegates.glGetQueryiv((Pencil.Gaming.Graphics.QueryTarget)target, (Pencil.Gaming.Graphics.GetQueryParam)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjecti64v")]
		public static void GetQueryObject(Int32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] Int64[] @params) {
			unsafe {
				fixed (Int64* @params_ptr = @params) {
					Delegates.glGetQueryObjecti64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int64*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjecti64v")]
		public static void GetQueryObject(Int32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] out Int64 @params) {
			unsafe {
				fixed (Int64* @params_ptr = &@params) {
					Delegates.glGetQueryObjecti64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int64*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjecti64v")]
		public static unsafe void GetQueryObject(Int32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] Int64* @params) {
			Delegates.glGetQueryObjecti64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int64*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjecti64v")]
		public static void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] Int64[] @params) {
			unsafe {
				fixed (Int64* @params_ptr = @params) {
					Delegates.glGetQueryObjecti64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int64*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjecti64v")]
		public static void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] out Int64 @params) {
			unsafe {
				fixed (Int64* @params_ptr = &@params) {
					Delegates.glGetQueryObjecti64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int64*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjecti64v")]
		public static unsafe void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] Int64* @params) {
			Delegates.glGetQueryObjecti64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int64*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
		public static void GetQueryObject(Int32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetQueryObjectiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
		public static void GetQueryObject(Int32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetQueryObjectiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
		public static unsafe void GetQueryObject(Int32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] Int32* @params) {
			Delegates.glGetQueryObjectiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
		public static void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetQueryObjectiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
		public static void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetQueryObjectiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectiv")]
		public static unsafe void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] Int32* @params) {
			Delegates.glGetQueryObjectiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjectui64v")]
		public static void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] UInt64[] @params) {
			unsafe {
				fixed (UInt64* @params_ptr = @params) {
					Delegates.glGetQueryObjectui64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (UInt64*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjectui64v")]
		public static void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] out UInt64 @params) {
			unsafe {
				fixed (UInt64* @params_ptr = &@params) {
					Delegates.glGetQueryObjectui64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (UInt64*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glGetQueryObjectui64v")]
		public static unsafe void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] UInt64* @params) {
			Delegates.glGetQueryObjectui64v((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (UInt64*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
		public static void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params) {
			unsafe {
				fixed (UInt32* @params_ptr = @params) {
					Delegates.glGetQueryObjectuiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
		public static void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params) {
			unsafe {
				fixed (UInt32* @params_ptr = &@params) {
					Delegates.glGetQueryObjectuiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glGetQueryObjectuiv")]
		public static unsafe void GetQueryObject(UInt32 id, Pencil.Gaming.Graphics.GetQueryObjectParam pname, [OutAttribute] UInt32* @params) {
			Delegates.glGetQueryObjectuiv((UInt32)id, (Pencil.Gaming.Graphics.GetQueryObjectParam)pname, (UInt32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
		public static void GetRenderbufferParameter(Pencil.Gaming.Graphics.RenderbufferTarget target, Pencil.Gaming.Graphics.RenderbufferParameterName pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetRenderbufferParameteriv((Pencil.Gaming.Graphics.RenderbufferTarget)target, (Pencil.Gaming.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
		public static void GetRenderbufferParameter(Pencil.Gaming.Graphics.RenderbufferTarget target, Pencil.Gaming.Graphics.RenderbufferParameterName pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetRenderbufferParameteriv((Pencil.Gaming.Graphics.RenderbufferTarget)target, (Pencil.Gaming.Graphics.RenderbufferParameterName)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glGetRenderbufferParameteriv")]
		public static unsafe void GetRenderbufferParameter(Pencil.Gaming.Graphics.RenderbufferTarget target, Pencil.Gaming.Graphics.RenderbufferParameterName pname, [OutAttribute] Int32* @params) {
			Delegates.glGetRenderbufferParameteriv((Pencil.Gaming.Graphics.RenderbufferTarget)target, (Pencil.Gaming.Graphics.RenderbufferParameterName)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterfv")]
		public static void GetSamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterfv")]
		public static void GetSamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterfv")]
		public static unsafe void GetSamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterfv")]
		public static void GetSamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterfv")]
		public static void GetSamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterfv")]
		public static unsafe void GetSamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)@params);
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIiv")]
		public static void GetSamplerParameterI(Int32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIiv")]
		public static void GetSamplerParameterI(Int32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIiv")]
		public static unsafe void GetSamplerParameterI(Int32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] Int32* @params) {
			Delegates.glGetSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)@params);
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIiv")]
		public static void GetSamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIiv")]
		public static void GetSamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIiv")]
		public static unsafe void GetSamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] Int32* @params) {
			Delegates.glGetSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)@params);
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIuiv")]
		public static void GetSamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] UInt32[] @params) {
			unsafe {
				fixed (UInt32* @params_ptr = @params) {
					Delegates.glGetSamplerParameterIuiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (UInt32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIuiv")]
		public static void GetSamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] out UInt32 @params) {
			unsafe {
				fixed (UInt32* @params_ptr = &@params) {
					Delegates.glGetSamplerParameterIuiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (UInt32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameterIuiv")]
		public static unsafe void GetSamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, [OutAttribute] UInt32* @params) {
			Delegates.glGetSamplerParameterIuiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (UInt32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameteriv")]
		public static void GetSamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameteriv")]
		public static void GetSamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameteriv")]
		public static unsafe void GetSamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameteriv")]
		public static void GetSamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameteriv")]
		public static void GetSamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glGetSamplerParameteriv")]
		public static unsafe void GetSamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)@params);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [OutAttribute] IntPtr span) {
			Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[] span)
			where T5 : struct {
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,] span)
			where T5 : struct {
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] T5[,,] span)
			where T5 : struct {
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [OutAttribute] IntPtr column, [InAttribute, OutAttribute] ref T5 span)
			where T5 : struct {
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
				span = (T5)span_ptr.Target;
			} finally {
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T4,T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[] column, [InAttribute, OutAttribute] T5[,,] span)
			where T4 : struct
			where T5 : struct {
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				column_ptr.Free();
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T4,T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,] column, [InAttribute, OutAttribute] T5[,,] span)
			where T4 : struct
			where T5 : struct {
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				column_ptr.Free();
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T4,T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
			where T4 : struct
			where T5 : struct {
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				column_ptr.Free();
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T4,T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr row, [InAttribute, OutAttribute] ref T4 column, [InAttribute, OutAttribute] T5[,,] span)
			where T4 : struct
			where T5 : struct {
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
				column = (T4)column_ptr.Target;
			} finally {
				column_ptr.Free();
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T3,T4,T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
			where T3 : struct
			where T4 : struct
			where T5 : struct {
			GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				row_ptr.Free();
				column_ptr.Free();
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T3,T4,T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
			where T3 : struct
			where T4 : struct
			where T5 : struct {
			GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				row_ptr.Free();
				column_ptr.Free();
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T3,T4,T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T3[,,] row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
			where T3 : struct
			where T4 : struct
			where T5 : struct {
			GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
			} finally {
				row_ptr.Free();
				column_ptr.Free();
				span_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glGetSeparableFilter")]
		public static void GetSeparableFilter<T3,T4,T5>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T3 row, [InAttribute, OutAttribute] T4[,,] column, [InAttribute, OutAttribute] T5[,,] span)
			where T3 : struct
			where T4 : struct
			where T5 : struct {
			GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
			try {
				Delegates.glGetSeparableFilter((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
				row = (T3)row_ptr.Target;
			} finally {
				row_ptr.Free();
				column_ptr.Free();
				span_ptr.Free();
			}
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
		public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
		public static unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) {
			Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
		public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)infoLog);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
		public static unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) {
			Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)infoLog);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
		public static void GetShader(Int32 shader, Pencil.Gaming.Graphics.ShaderParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetShaderiv((UInt32)shader, (Pencil.Gaming.Graphics.ShaderParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
		public static void GetShader(Int32 shader, Pencil.Gaming.Graphics.ShaderParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetShaderiv((UInt32)shader, (Pencil.Gaming.Graphics.ShaderParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
		public static unsafe void GetShader(Int32 shader, Pencil.Gaming.Graphics.ShaderParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetShaderiv((UInt32)shader, (Pencil.Gaming.Graphics.ShaderParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
		public static void GetShader(UInt32 shader, Pencil.Gaming.Graphics.ShaderParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetShaderiv((UInt32)shader, (Pencil.Gaming.Graphics.ShaderParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
		public static void GetShader(UInt32 shader, Pencil.Gaming.Graphics.ShaderParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetShaderiv((UInt32)shader, (Pencil.Gaming.Graphics.ShaderParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
		public static unsafe void GetShader(UInt32 shader, Pencil.Gaming.Graphics.ShaderParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetShaderiv((UInt32)shader, (Pencil.Gaming.Graphics.ShaderParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
		public static void GetShaderPrecisionFormat(Pencil.Gaming.Graphics.ShaderType shadertype, Pencil.Gaming.Graphics.ShaderPrecisionType precisiontype, [OutAttribute] Int32[] range, [OutAttribute] Int32[] precision) {
			unsafe {
				fixed (Int32* range_ptr = range)
					fixed (Int32* precision_ptr = precision) {
						Delegates.glGetShaderPrecisionFormat((Pencil.Gaming.Graphics.ShaderType)shadertype, (Pencil.Gaming.Graphics.ShaderPrecisionType)precisiontype, (Int32*)range_ptr, (Int32*)precision_ptr);
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
		public static void GetShaderPrecisionFormat(Pencil.Gaming.Graphics.ShaderType shadertype, Pencil.Gaming.Graphics.ShaderPrecisionType precisiontype, [OutAttribute] out Int32 range, [OutAttribute] out Int32 precision) {
			unsafe {
				fixed (Int32* range_ptr = &range)
					fixed (Int32* precision_ptr = &precision) {
						Delegates.glGetShaderPrecisionFormat((Pencil.Gaming.Graphics.ShaderType)shadertype, (Pencil.Gaming.Graphics.ShaderPrecisionType)precisiontype, (Int32*)range_ptr, (Int32*)precision_ptr);
						range = *range_ptr;
						precision = *precision_ptr;
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glGetShaderPrecisionFormat")]
		public static unsafe void GetShaderPrecisionFormat(Pencil.Gaming.Graphics.ShaderType shadertype, Pencil.Gaming.Graphics.ShaderPrecisionType precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision) {
			Delegates.glGetShaderPrecisionFormat((Pencil.Gaming.Graphics.ShaderType)shadertype, (Pencil.Gaming.Graphics.ShaderPrecisionType)precisiontype, (Int32*)range, (Int32*)precision);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
		public static void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)source);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
		public static unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source) {
			Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)source);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
		public static void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, (StringBuilder)source);
					length = *length_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
		public static unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source) {
			Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, (StringBuilder)source);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetString")]
		public static String GetString(Pencil.Gaming.Graphics.StringName name) {
			unsafe {
				return new string((sbyte*)Delegates.glGetString((Pencil.Gaming.Graphics.StringName)name));
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
		public static String GetString(Pencil.Gaming.Graphics.StringName name, Int32 index) {
			unsafe {
				return new string((sbyte*)Delegates.glGetStringi((Pencil.Gaming.Graphics.StringName)name, (UInt32)index));
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetStringi")]
		public static String GetString(Pencil.Gaming.Graphics.StringName name, UInt32 index) {
			unsafe {
				return new string((sbyte*)Delegates.glGetStringi((Pencil.Gaming.Graphics.StringName)name, (UInt32)index));
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetSubroutineIndex")]
		public static Int32 GetSubroutineIndex(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, String name) {
			return Delegates.glGetSubroutineIndex((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetSubroutineIndex")]
		public static Int32 GetSubroutineIndex(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, String name) {
			return Delegates.glGetSubroutineIndex((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetSubroutineUniformLocation")]
		public static Int32 GetSubroutineUniformLocation(Int32 program, Pencil.Gaming.Graphics.ShaderType shadertype, String name) {
			return Delegates.glGetSubroutineUniformLocation((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetSubroutineUniformLocation")]
		public static Int32 GetSubroutineUniformLocation(UInt32 program, Pencil.Gaming.Graphics.ShaderType shadertype, String name) {
			return Delegates.glGetSubroutineUniformLocation((UInt32)program, (Pencil.Gaming.Graphics.ShaderType)shadertype, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
		public static void GetSync(IntPtr sync, Pencil.Gaming.Graphics.ArbSync pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Int32* values_ptr = &values) {
						Delegates.glGetSynciv((IntPtr)sync, (Pencil.Gaming.Graphics.ArbSync)pname, (Int32)bufSize, (Int32*)length_ptr, (Int32*)values_ptr);
						length = *length_ptr;
						values = *values_ptr;
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
		public static unsafe void GetSync(IntPtr sync, Pencil.Gaming.Graphics.ArbSync pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32[] values) {
			fixed (Int32* values_ptr = values) {
				Delegates.glGetSynciv((IntPtr)sync, (Pencil.Gaming.Graphics.ArbSync)pname, (Int32)bufSize, (Int32*)length, (Int32*)values_ptr);
			}
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glGetSynciv")]
		public static unsafe void GetSync(IntPtr sync, Pencil.Gaming.Graphics.ArbSync pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values) {
			Delegates.glGetSynciv((IntPtr)sync, (Pencil.Gaming.Graphics.ArbSync)pname, (Int32)bufSize, (Int32*)length, (Int32*)values);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
		public static void GetTexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetTexEnvfv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
		public static void GetTexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetTexEnvfv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnvfv")]
		public static unsafe void GetTexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetTexEnvfv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
		public static void GetTexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetTexEnviv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
		public static void GetTexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetTexEnviv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexEnviv")]
		public static unsafe void GetTexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetTexEnviv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Int32*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
		public static void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glGetTexGendv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
		public static void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] out Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glGetTexGendv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGendv")]
		public static unsafe void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] Double* @params) {
			Delegates.glGetTexGendv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Double*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
		public static void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetTexGenfv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
		public static void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetTexGenfv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGenfv")]
		public static unsafe void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetTexGenfv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
		public static void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetTexGeniv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
		public static void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetTexGeniv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glGetTexGeniv")]
		public static unsafe void GetTexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetTexGeniv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Int32*)@params);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
		public static void GetTexImage(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr pixels) {
			Delegates.glGetTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
		public static void GetTexImage<T4>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[] pixels)
			where T4 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glGetTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
		public static void GetTexImage<T4>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[,] pixels)
			where T4 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glGetTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
		public static void GetTexImage<T4>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T4[,,] pixels)
			where T4 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glGetTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexImage")]
		public static void GetTexImage<T4>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T4 pixels)
			where T4 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glGetTexImage((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T4)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
		public static void GetTexLevelParameter(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetTexLevelParameterfv((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
		public static void GetTexLevelParameter(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetTexLevelParameterfv((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameterfv")]
		public static unsafe void GetTexLevelParameter(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetTexLevelParameterfv((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Single*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
		public static void GetTexLevelParameter(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetTexLevelParameteriv((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
		public static void GetTexLevelParameter(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetTexLevelParameteriv((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexLevelParameteriv")]
		public static unsafe void GetTexLevelParameter(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetTexLevelParameteriv((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
		public static void GetTexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetTexParameterfv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
		public static void GetTexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetTexParameterfv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameterfv")]
		public static unsafe void GetTexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetTexParameterfv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Single*)@params);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
		public static void GetTexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetTexParameterIiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
		public static void GetTexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetTexParameterIiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIiv")]
		public static unsafe void GetTexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetTexParameterIiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
		public static void GetTexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] UInt32[] @params) {
			unsafe {
				fixed (UInt32* @params_ptr = @params) {
					Delegates.glGetTexParameterIuiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
		public static void GetTexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] out UInt32 @params) {
			unsafe {
				fixed (UInt32* @params_ptr = &@params) {
					Delegates.glGetTexParameterIuiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (UInt32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTexParameterIuiv")]
		public static unsafe void GetTexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] UInt32* @params) {
			Delegates.glGetTexParameterIuiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (UInt32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
		public static void GetTexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetTexParameteriv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
		public static void GetTexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetTexParameteriv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glGetTexParameteriv")]
		public static unsafe void GetTexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.GetTextureParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetTexParameteriv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.GetTextureParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
		public static void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out Pencil.Gaming.Graphics.ActiveAttribType type, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Int32* size_ptr = &size)
						fixed (Pencil.Gaming.Graphics.ActiveAttribType* type_ptr = &type) {
							Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Pencil.Gaming.Graphics.ActiveAttribType*)type_ptr, (StringBuilder)name);
							length = *length_ptr;
							size = *size_ptr;
							type = *type_ptr;
						}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
		public static unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] Pencil.Gaming.Graphics.ActiveAttribType* type, [OutAttribute] StringBuilder name) {
			Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Pencil.Gaming.Graphics.ActiveAttribType*)type, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
		public static void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out Pencil.Gaming.Graphics.ActiveAttribType type, [OutAttribute] StringBuilder name) {
			unsafe {
				fixed (Int32* length_ptr = &length)
					fixed (Int32* size_ptr = &size)
						fixed (Pencil.Gaming.Graphics.ActiveAttribType* type_ptr = &type) {
							Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Pencil.Gaming.Graphics.ActiveAttribType*)type_ptr, (StringBuilder)name);
							length = *length_ptr;
							size = *size_ptr;
							type = *type_ptr;
						}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetTransformFeedbackVarying")]
		public static unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] Pencil.Gaming.Graphics.ActiveAttribType* type, [OutAttribute] StringBuilder name) {
			Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Pencil.Gaming.Graphics.ActiveAttribType*)type, (StringBuilder)name);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformBlockIndex")]
		public static Int32 GetUniformBlockIndex(Int32 program, String uniformBlockName) {
			return Delegates.glGetUniformBlockIndex((UInt32)program, (String)uniformBlockName);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformBlockIndex")]
		public static Int32 GetUniformBlockIndex(UInt32 program, String uniformBlockName) {
			return Delegates.glGetUniformBlockIndex((UInt32)program, (String)uniformBlockName);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glGetUniformdv")]
		public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glGetUniformdv((UInt32)program, (Int32)location, (Double*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glGetUniformdv")]
		public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glGetUniformdv((UInt32)program, (Int32)location, (Double*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glGetUniformdv")]
		public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Double* @params) {
			Delegates.glGetUniformdv((UInt32)program, (Int32)location, (Double*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glGetUniformdv")]
		public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glGetUniformdv((UInt32)program, (Int32)location, (Double*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glGetUniformdv")]
		public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glGetUniformdv((UInt32)program, (Int32)location, (Double*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glGetUniformdv")]
		public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Double* @params) {
			Delegates.glGetUniformdv((UInt32)program, (Int32)location, (Double*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
		public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
		public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
		public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Single* @params) {
			Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
		public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
		public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
		public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single* @params) {
			Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
		public static void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32[] uniformIndices) {
			unsafe {
				fixed (Int32* uniformIndices_ptr = uniformIndices) {
					Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
		public static void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out Int32 uniformIndices) {
			unsafe {
				fixed (Int32* uniformIndices_ptr = &uniformIndices) {
					Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
					uniformIndices = *uniformIndices_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
		public static unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] Int32* uniformIndices) {
			Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
		public static void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32[] uniformIndices) {
			unsafe {
				fixed (UInt32* uniformIndices_ptr = uniformIndices) {
					Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
		public static void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] out UInt32 uniformIndices) {
			unsafe {
				fixed (UInt32* uniformIndices_ptr = &uniformIndices) {
					Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices_ptr);
					uniformIndices = *uniformIndices_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glGetUniformIndices")]
		public static unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, [OutAttribute] UInt32* uniformIndices) {
			Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, (String[])uniformNames, (UInt32*)uniformIndices);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
		public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
		public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
		public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32* @params) {
			Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
		public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
		public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
		public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32* @params) {
			Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
		public static Int32 GetUniformLocation(Int32 program, String name) {
			return Delegates.glGetUniformLocation((UInt32)program, (String)name);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
		public static Int32 GetUniformLocation(UInt32 program, String name) {
			return Delegates.glGetUniformLocation((UInt32)program, (String)name);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetUniformSubroutineuiv")]
		public static void GetUniformSubroutine(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 location, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetUniformSubroutineuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)location, (UInt32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetUniformSubroutineuiv")]
		public static unsafe void GetUniformSubroutine(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 location, [OutAttribute] Int32* @params) {
			Delegates.glGetUniformSubroutineuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)location, (UInt32*)@params);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetUniformSubroutineuiv")]
		public static void GetUniformSubroutine(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 location, [OutAttribute] out UInt32 @params) {
			unsafe {
				fixed (UInt32* @params_ptr = &@params) {
					Delegates.glGetUniformSubroutineuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)location, (UInt32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glGetUniformSubroutineuiv")]
		public static unsafe void GetUniformSubroutine(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 location, [OutAttribute] UInt32* @params) {
			Delegates.glGetUniformSubroutineuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)location, (UInt32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
		public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32[] @params) {
			unsafe {
				fixed (UInt32* @params_ptr = @params) {
					Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
		public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out UInt32 @params) {
			unsafe {
				fixed (UInt32* @params_ptr = &@params) {
					Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetUniformuiv")]
		public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] UInt32* @params) {
			Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
		public static void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glGetVertexAttribdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
		public static void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glGetVertexAttribdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
		public static unsafe void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Double* @params) {
			Delegates.glGetVertexAttribdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
		public static void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glGetVertexAttribdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
		public static void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glGetVertexAttribdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribdv")]
		public static unsafe void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Double* @params) {
			Delegates.glGetVertexAttribdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
		public static void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetVertexAttribfv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
		public static void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetVertexAttribfv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
		public static unsafe void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetVertexAttribfv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Single*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
		public static void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glGetVertexAttribfv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
		public static void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Single @params) {
			unsafe {
				fixed (Single* @params_ptr = &@params) {
					Delegates.glGetVertexAttribfv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Single*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
		public static unsafe void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Single* @params) {
			Delegates.glGetVertexAttribfv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Single*)@params);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
		public static void GetVertexAttribI(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetVertexAttribIiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
		public static unsafe void GetVertexAttribI(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetVertexAttribIiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
		public static void GetVertexAttribI(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetVertexAttribIiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIiv")]
		public static unsafe void GetVertexAttribI(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetVertexAttribIiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
		public static void GetVertexAttribI(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out UInt32 @params) {
			unsafe {
				fixed (UInt32* @params_ptr = &@params) {
					Delegates.glGetVertexAttribIuiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (UInt32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glGetVertexAttribIuiv")]
		public static unsafe void GetVertexAttribI(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] UInt32* @params) {
			Delegates.glGetVertexAttribIuiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (UInt32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
		public static void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetVertexAttribiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
		public static void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetVertexAttribiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
		public static unsafe void GetVertexAttrib(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetVertexAttribiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
		public static void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glGetVertexAttribiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
		public static void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glGetVertexAttribiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
		public static unsafe void GetVertexAttrib(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Int32* @params) {
			Delegates.glGetVertexAttribiv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Int32*)@params);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
		public static void GetVertexAttribL(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glGetVertexAttribLdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
		public static void GetVertexAttribL(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glGetVertexAttribLdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
		public static unsafe void GetVertexAttribL(Int32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Double* @params) {
			Delegates.glGetVertexAttribLdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
		public static void GetVertexAttribL(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glGetVertexAttribLdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
		public static void GetVertexAttribL(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] out Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glGetVertexAttribLdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params_ptr);
					 @params = *@params_ptr;
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glGetVertexAttribLdv")]
		public static unsafe void GetVertexAttribL(UInt32 index, Pencil.Gaming.Graphics.VertexAttribParameter pname, [OutAttribute] Double* @params) {
			Delegates.glGetVertexAttribLdv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribParameter)pname, (Double*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer(Int32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer) {
			Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer<T2>(Int32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer<T2>(Int32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer<T2>(Int32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer<T2>(Int32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T2)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer(UInt32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer) {
			Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer<T2>(UInt32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer<T2>(UInt32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer<T2>(UInt32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
		public static void GetVertexAttribPointer<T2>(UInt32 index, Pencil.Gaming.Graphics.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glGetVertexAttribPointerv((UInt32)index, (Pencil.Gaming.Graphics.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T2)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glHint")]
		public static void Hint(Pencil.Gaming.Graphics.HintTarget target, Pencil.Gaming.Graphics.HintMode mode) {
			Delegates.glHint((Pencil.Gaming.Graphics.HintTarget)target, (Pencil.Gaming.Graphics.HintMode)mode);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glHistogram")]
		public static void Histogram(Pencil.Gaming.Graphics.HistogramTarget target, Int32 width, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, bool sink) {
			Delegates.glHistogram((Pencil.Gaming.Graphics.HistogramTarget)target, (Int32)width, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (bool)sink);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexd")]
		public static void Index(Double c) {
			Delegates.glIndexd((Double)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexdv")]
		public static unsafe void Index(Double* c) {
			Delegates.glIndexdv((Double*)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexf")]
		public static void Index(Single c) {
			Delegates.glIndexf((Single)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexfv")]
		public static unsafe void Index(Single* c) {
			Delegates.glIndexfv((Single*)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexi")]
		public static void Index(Int32 c) {
			Delegates.glIndexi((Int32)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexiv")]
		public static unsafe void Index(Int32* c) {
			Delegates.glIndexiv((Int32*)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexMask")]
		public static void IndexMask(Int32 mask) {
			Delegates.glIndexMask((UInt32)mask);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexMask")]
		public static void IndexMask(UInt32 mask) {
			Delegates.glIndexMask((UInt32)mask);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
		public static void IndexPointer(Pencil.Gaming.Graphics.IndexPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glIndexPointer((Pencil.Gaming.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
		public static void IndexPointer<T2>(Pencil.Gaming.Graphics.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glIndexPointer((Pencil.Gaming.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
		public static void IndexPointer<T2>(Pencil.Gaming.Graphics.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glIndexPointer((Pencil.Gaming.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
		public static void IndexPointer<T2>(Pencil.Gaming.Graphics.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glIndexPointer((Pencil.Gaming.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexPointer")]
		public static void IndexPointer<T2>(Pencil.Gaming.Graphics.IndexPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glIndexPointer((Pencil.Gaming.Graphics.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T2)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexs")]
		public static void Index(Int16 c) {
			Delegates.glIndexs((Int16)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIndexsv")]
		public static unsafe void Index(Int16* c) {
			Delegates.glIndexsv((Int16*)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexub")]
		public static void Index(Byte c) {
			Delegates.glIndexub((Byte)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glIndexubv")]
		public static unsafe void Index(Byte* c) {
			Delegates.glIndexubv((Byte*)c);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glInitNames")]
		public static void InitNames() {
			Delegates.glInitNames();
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
		public static void InterleavedArrays(Pencil.Gaming.Graphics.InterleavedArrayFormat format, Int32 stride, IntPtr pointer) {
			Delegates.glInterleavedArrays((Pencil.Gaming.Graphics.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
		public static void InterleavedArrays<T2>(Pencil.Gaming.Graphics.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glInterleavedArrays((Pencil.Gaming.Graphics.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
		public static void InterleavedArrays<T2>(Pencil.Gaming.Graphics.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glInterleavedArrays((Pencil.Gaming.Graphics.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
		public static void InterleavedArrays<T2>(Pencil.Gaming.Graphics.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glInterleavedArrays((Pencil.Gaming.Graphics.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glInterleavedArrays")]
		public static void InterleavedArrays<T2>(Pencil.Gaming.Graphics.InterleavedArrayFormat format, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glInterleavedArrays((Pencil.Gaming.Graphics.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T2)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
		public static bool IsBuffer(Int32 buffer) {
			return Delegates.glIsBuffer((UInt32)buffer);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsBuffer")]
		public static bool IsBuffer(UInt32 buffer) {
			return Delegates.glIsBuffer((UInt32)buffer);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glIsEnabled")]
		public static bool IsEnabled(Pencil.Gaming.Graphics.EnableCap cap) {
			return Delegates.glIsEnabled((Pencil.Gaming.Graphics.EnableCap)cap);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
		public static bool IsEnabled(Pencil.Gaming.Graphics.IndexedEnableCap target, Int32 index) {
			return Delegates.glIsEnabledi((Pencil.Gaming.Graphics.IndexedEnableCap)target, (UInt32)index);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glIsEnabledi")]
		public static bool IsEnabled(Pencil.Gaming.Graphics.IndexedEnableCap target, UInt32 index) {
			return Delegates.glIsEnabledi((Pencil.Gaming.Graphics.IndexedEnableCap)target, (UInt32)index);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glIsFramebuffer")]
		public static bool IsFramebuffer(Int32 framebuffer) {
			return Delegates.glIsFramebuffer((UInt32)framebuffer);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glIsFramebuffer")]
		public static bool IsFramebuffer(UInt32 framebuffer) {
			return Delegates.glIsFramebuffer((UInt32)framebuffer);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIsList")]
		public static bool IsList(Int32 list) {
			return Delegates.glIsList((UInt32)list);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glIsList")]
		public static bool IsList(UInt32 list) {
			return Delegates.glIsList((UInt32)list);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
		public static bool IsProgram(Int32 program) {
			return Delegates.glIsProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
		public static bool IsProgram(UInt32 program) {
			return Delegates.glIsProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glIsProgramPipeline")]
		public static bool IsProgramPipeline(Int32 pipeline) {
			return Delegates.glIsProgramPipeline((UInt32)pipeline);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glIsProgramPipeline")]
		public static bool IsProgramPipeline(UInt32 pipeline) {
			return Delegates.glIsProgramPipeline((UInt32)pipeline);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
		public static bool IsQuery(Int32 id) {
			return Delegates.glIsQuery((UInt32)id);
		}

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glIsQuery")]
		public static bool IsQuery(UInt32 id) {
			return Delegates.glIsQuery((UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
		public static bool IsRenderbuffer(Int32 renderbuffer) {
			return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glIsRenderbuffer")]
		public static bool IsRenderbuffer(UInt32 renderbuffer) {
			return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glIsSampler")]
		public static bool IsSampler(Int32 sampler) {
			return Delegates.glIsSampler((UInt32)sampler);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glIsSampler")]
		public static bool IsSampler(UInt32 sampler) {
			return Delegates.glIsSampler((UInt32)sampler);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
		public static bool IsShader(Int32 shader) {
			return Delegates.glIsShader((UInt32)shader);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
		public static bool IsShader(UInt32 shader) {
			return Delegates.glIsShader((UInt32)shader);
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glIsSync")]
		public static bool IsSync(IntPtr sync) {
			return Delegates.glIsSync((IntPtr)sync);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
		public static bool IsTexture(Int32 texture) {
			return Delegates.glIsTexture((UInt32)texture);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glIsTexture")]
		public static bool IsTexture(UInt32 texture) {
			return Delegates.glIsTexture((UInt32)texture);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glIsTransformFeedback")]
		public static bool IsTransformFeedback(Int32 id) {
			return Delegates.glIsTransformFeedback((UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glIsTransformFeedback")]
		public static bool IsTransformFeedback(UInt32 id) {
			return Delegates.glIsTransformFeedback((UInt32)id);
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glIsVertexArray")]
		public static bool IsVertexArray(Int32 array) {
			return Delegates.glIsVertexArray((UInt32)array);
		}

		
		//[AutoGenerated(Category = "ARB_vertex_array_object", Version = "3.0", EntryPoint = "glIsVertexArray")]
		public static bool IsVertexArray(UInt32 array) {
			return Delegates.glIsVertexArray((UInt32)array);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightf")]
		public static void Light(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, Single param) {
			Delegates.glLightf((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Single)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightfv")]
		public static void Light(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glLightfv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightfv")]
		public static unsafe void Light(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, Single* @params) {
			Delegates.glLightfv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLighti")]
		public static void Light(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, Int32 param) {
			Delegates.glLighti((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Int32)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightiv")]
		public static void Light(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glLightiv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightiv")]
		public static unsafe void Light(Pencil.Gaming.Graphics.LightName light, Pencil.Gaming.Graphics.LightParameter pname, Int32* @params) {
			Delegates.glLightiv((Pencil.Gaming.Graphics.LightName)light, (Pencil.Gaming.Graphics.LightParameter)pname, (Int32*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelf")]
		public static void LightModel(Pencil.Gaming.Graphics.LightModelParameter pname, Single param) {
			Delegates.glLightModelf((Pencil.Gaming.Graphics.LightModelParameter)pname, (Single)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelfv")]
		public static void LightModel(Pencil.Gaming.Graphics.LightModelParameter pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glLightModelfv((Pencil.Gaming.Graphics.LightModelParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModelfv")]
		public static unsafe void LightModel(Pencil.Gaming.Graphics.LightModelParameter pname, Single* @params) {
			Delegates.glLightModelfv((Pencil.Gaming.Graphics.LightModelParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeli")]
		public static void LightModel(Pencil.Gaming.Graphics.LightModelParameter pname, Int32 param) {
			Delegates.glLightModeli((Pencil.Gaming.Graphics.LightModelParameter)pname, (Int32)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeliv")]
		public static void LightModel(Pencil.Gaming.Graphics.LightModelParameter pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glLightModeliv((Pencil.Gaming.Graphics.LightModelParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLightModeliv")]
		public static unsafe void LightModel(Pencil.Gaming.Graphics.LightModelParameter pname, Int32* @params) {
			Delegates.glLightModeliv((Pencil.Gaming.Graphics.LightModelParameter)pname, (Int32*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLineStipple")]
		public static void LineStipple(Int32 factor, Int16 pattern) {
			Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLineStipple")]
		public static void LineStipple(Int32 factor, UInt16 pattern) {
			Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLineWidth")]
		public static void LineWidth(Single width) {
			Delegates.glLineWidth((Single)width);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
		public static void LinkProgram(Int32 program) {
			Delegates.glLinkProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
		public static void LinkProgram(UInt32 program) {
			Delegates.glLinkProgram((UInt32)program);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glListBase")]
		public static void ListBase(Int32 @base) {
			Delegates.glListBase((UInt32)@base);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glListBase")]
		public static void ListBase(UInt32 @base) {
			Delegates.glListBase((UInt32)@base);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadIdentity")]
		public static void LoadIdentity() {
			Delegates.glLoadIdentity();
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixd")]
		public static void LoadMatrix(Double[] m) {
			unsafe {
				fixed (Double* m_ptr = m) {
					Delegates.glLoadMatrixd((Double*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixd")]
		public static void LoadMatrix(ref Double m) {
			unsafe {
				fixed (Double* m_ptr = &m) {
					Delegates.glLoadMatrixd((Double*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixd")]
		public static unsafe void LoadMatrix(Double* m) {
			Delegates.glLoadMatrixd((Double*)m);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixf")]
		public static void LoadMatrix(Single[] m) {
			unsafe {
				fixed (Single* m_ptr = m) {
					Delegates.glLoadMatrixf((Single*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixf")]
		public static void LoadMatrix(ref Single m) {
			unsafe {
				fixed (Single* m_ptr = &m) {
					Delegates.glLoadMatrixf((Single*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadMatrixf")]
		public static unsafe void LoadMatrix(Single* m) {
			Delegates.glLoadMatrixf((Single*)m);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadName")]
		public static void LoadName(Int32 name) {
			Delegates.glLoadName((UInt32)name);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glLoadName")]
		public static void LoadName(UInt32 name) {
			Delegates.glLoadName((UInt32)name);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
		public static void LoadTransposeMatrix(Double[] m) {
			unsafe {
				fixed (Double* m_ptr = m) {
					Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
		public static void LoadTransposeMatrix(ref Double m) {
			unsafe {
				fixed (Double* m_ptr = &m) {
					Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixd")]
		public static unsafe void LoadTransposeMatrix(Double* m) {
			Delegates.glLoadTransposeMatrixd((Double*)m);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
		public static void LoadTransposeMatrix(Single[] m) {
			unsafe {
				fixed (Single* m_ptr = m) {
					Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
		public static void LoadTransposeMatrix(ref Single m) {
			unsafe {
				fixed (Single* m_ptr = &m) {
					Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glLoadTransposeMatrixf")]
		public static unsafe void LoadTransposeMatrix(Single* m) {
			Delegates.glLoadTransposeMatrixf((Single*)m);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glLogicOp")]
		public static void LogicOp(Pencil.Gaming.Graphics.LogicOp opcode) {
			Delegates.glLogicOp((Pencil.Gaming.Graphics.LogicOp)opcode);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
		public static void Map1(Pencil.Gaming.Graphics.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, Double[] points) {
			unsafe {
				fixed (Double* points_ptr = points) {
					Delegates.glMap1d((Pencil.Gaming.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
		public static void Map1(Pencil.Gaming.Graphics.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, ref Double points) {
			unsafe {
				fixed (Double* points_ptr = &points) {
					Delegates.glMap1d((Pencil.Gaming.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1d")]
		public static unsafe void Map1(Pencil.Gaming.Graphics.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, Double* points) {
			Delegates.glMap1d((Pencil.Gaming.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
		public static void Map1(Pencil.Gaming.Graphics.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, Single[] points) {
			unsafe {
				fixed (Single* points_ptr = points) {
					Delegates.glMap1f((Pencil.Gaming.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
		public static void Map1(Pencil.Gaming.Graphics.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, ref Single points) {
			unsafe {
				fixed (Single* points_ptr = &points) {
					Delegates.glMap1f((Pencil.Gaming.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap1f")]
		public static unsafe void Map1(Pencil.Gaming.Graphics.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, Single* points) {
			Delegates.glMap1f((Pencil.Gaming.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
		public static void Map2(Pencil.Gaming.Graphics.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points) {
			unsafe {
				fixed (Double* points_ptr = points) {
					Delegates.glMap2d((Pencil.Gaming.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
		public static void Map2(Pencil.Gaming.Graphics.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points) {
			unsafe {
				fixed (Double* points_ptr = &points) {
					Delegates.glMap2d((Pencil.Gaming.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2d")]
		public static unsafe void Map2(Pencil.Gaming.Graphics.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double* points) {
			Delegates.glMap2d((Pencil.Gaming.Graphics.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
		public static void Map2(Pencil.Gaming.Graphics.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points) {
			unsafe {
				fixed (Single* points_ptr = points) {
					Delegates.glMap2f((Pencil.Gaming.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
		public static void Map2(Pencil.Gaming.Graphics.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points) {
			unsafe {
				fixed (Single* points_ptr = &points) {
					Delegates.glMap2f((Pencil.Gaming.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMap2f")]
		public static unsafe void Map2(Pencil.Gaming.Graphics.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single* points) {
			Delegates.glMap2f((Pencil.Gaming.Graphics.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glMapBuffer")]
		public static unsafe IntPtr MapBuffer(Pencil.Gaming.Graphics.BufferTarget target, Pencil.Gaming.Graphics.BufferAccess access) {
			return Delegates.glMapBuffer((Pencil.Gaming.Graphics.BufferTarget)target, (Pencil.Gaming.Graphics.BufferAccess)access);
		}

		
		//[AutoGenerated(Category = "ARB_map_buffer_range", Version = "3.0", EntryPoint = "glMapBufferRange")]
		public static unsafe IntPtr MapBufferRange(Pencil.Gaming.Graphics.BufferTarget target, IntPtr offset, IntPtr length, Pencil.Gaming.Graphics.BufferAccessMask access) {
			return Delegates.glMapBufferRange((Pencil.Gaming.Graphics.BufferTarget)target, (IntPtr)offset, (IntPtr)length, (Pencil.Gaming.Graphics.BufferAccessMask)access);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMapGrid1d")]
		public static void MapGrid1(Int32 un, Double u1, Double u2) {
			Delegates.glMapGrid1d((Int32)un, (Double)u1, (Double)u2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMapGrid1f")]
		public static void MapGrid1(Int32 un, Single u1, Single u2) {
			Delegates.glMapGrid1f((Int32)un, (Single)u1, (Single)u2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMapGrid2d")]
		public static void MapGrid2(Int32 un, Double u1, Double u2, Int32 vn, Double v1, Double v2) {
			Delegates.glMapGrid2d((Int32)un, (Double)u1, (Double)u2, (Int32)vn, (Double)v1, (Double)v2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMapGrid2f")]
		public static void MapGrid2(Int32 un, Single u1, Single u2, Int32 vn, Single v1, Single v2) {
			Delegates.glMapGrid2f((Int32)un, (Single)u1, (Single)u2, (Int32)vn, (Single)v1, (Single)v2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialf")]
		public static void Material(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, Single param) {
			Delegates.glMaterialf((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Single)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialfv")]
		public static void Material(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glMaterialfv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialfv")]
		public static unsafe void Material(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, Single* @params) {
			Delegates.glMaterialfv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMateriali")]
		public static void Material(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, Int32 param) {
			Delegates.glMateriali((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Int32)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialiv")]
		public static void Material(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glMaterialiv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMaterialiv")]
		public static unsafe void Material(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.MaterialParameter pname, Int32* @params) {
			Delegates.glMaterialiv((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.MaterialParameter)pname, (Int32*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMatrixMode")]
		public static void MatrixMode(Pencil.Gaming.Graphics.MatrixMode mode) {
			Delegates.glMatrixMode((Pencil.Gaming.Graphics.MatrixMode)mode);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glMinmax")]
		public static void Minmax(Pencil.Gaming.Graphics.MinmaxTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, bool sink) {
			Delegates.glMinmax((Pencil.Gaming.Graphics.MinmaxTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (bool)sink);
		}
		#endif

		//[AutoGenerated(Category = "VERSION_4_0", Version = "1.2", EntryPoint = "glMinSampleShading")]
		public static void MinSampleShading(Single value) {
			Delegates.glMinSampleShading((Single)value);
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
		public static void MultiDrawArrays(Pencil.Gaming.Graphics.BeginMode mode, Int32[] first, Int32[] count, Int32 primcount) {
			unsafe {
				fixed (Int32* first_ptr = first)
					fixed (Int32* count_ptr = count) {
						Delegates.glMultiDrawArrays((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
					}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
		public static void MultiDrawArrays(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 first, ref Int32 count, Int32 primcount) {
			unsafe {
				fixed (Int32* first_ptr = &first)
					fixed (Int32* count_ptr = &count) {
						Delegates.glMultiDrawArrays((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
					}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawArrays")]
		public static unsafe void MultiDrawArrays(Pencil.Gaming.Graphics.BeginMode mode, Int32* first, Int32* count, Int32 primcount) {
			Delegates.glMultiDrawArrays((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount) {
			unsafe {
				fixed (Int32* count_ptr = count) {
					Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = count) {
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try {
						Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					} finally {
						indices_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = count) {
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try {
						Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					} finally {
						indices_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = count) {
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try {
						Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					} finally {
						indices_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = count) {
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try {
						Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
						indices = (T3)indices_ptr.Target;
					} finally {
						indices_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount) {
			unsafe {
				fixed (Int32* count_ptr = &count) {
					Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = &count) {
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try {
						Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					} finally {
						indices_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = &count) {
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try {
						Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					} finally {
						indices_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = &count) {
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try {
						Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
					} finally {
						indices_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = &count) {
					GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
					try {
						Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
						indices = (T3)indices_ptr.Target;
					} finally {
						indices_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static unsafe void MultiDrawElements(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount) {
			Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static unsafe void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static unsafe void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static unsafe void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glMultiDrawElements")]
		public static unsafe void MultiDrawElements<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glMultiDrawElements((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
				indices = (T3)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount, Int32[] basevertex) {
			unsafe {
				fixed (Int32* count_ptr = count)
					fixed (Int32* basevertex_ptr = basevertex) {
						Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex_ptr);
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32[] basevertex)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = count)
					fixed (Int32* basevertex_ptr = basevertex) {
						GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
						try {
							Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
						} finally {
							indices_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32[] basevertex)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = count)
					fixed (Int32* basevertex_ptr = basevertex) {
						GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
						try {
							Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
						} finally {
							indices_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32[] basevertex)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = count)
					fixed (Int32* basevertex_ptr = basevertex) {
						GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
						try {
							Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
						} finally {
							indices_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32[] count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32[] basevertex)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = count)
					fixed (Int32* basevertex_ptr = basevertex) {
						GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
						try {
							Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
							indices = (T3)indices_ptr.Target;
						} finally {
							indices_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount, ref Int32 basevertex) {
			unsafe {
				fixed (Int32* count_ptr = &count)
					fixed (Int32* basevertex_ptr = &basevertex) {
						Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex_ptr);
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, ref Int32 basevertex)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = &count)
					fixed (Int32* basevertex_ptr = &basevertex) {
						GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
						try {
							Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
						} finally {
							indices_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, ref Int32 basevertex)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = &count)
					fixed (Int32* basevertex_ptr = &basevertex) {
						GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
						try {
							Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
						} finally {
							indices_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, ref Int32 basevertex)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = &count)
					fixed (Int32* basevertex_ptr = &basevertex) {
						GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
						try {
							Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
						} finally {
							indices_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, ref Int32 count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, ref Int32 basevertex)
			where T3 : struct {
			unsafe {
				fixed (Int32* count_ptr = &count)
					fixed (Int32* basevertex_ptr = &basevertex) {
						GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
						try {
							Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count_ptr, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
							indices = (T3)indices_ptr.Target;
						} finally {
							indices_ptr.Free();
						}
					}
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static unsafe void MultiDrawElementsBaseVertex(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, IntPtr indices, Int32 primcount, Int32* basevertex) {
			Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex);
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static unsafe void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount, Int32* basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static unsafe void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount, Int32* basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static unsafe void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount, Int32* basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
			} finally {
				indices_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_draw_elements_base_vertex", Version = "1.2", EntryPoint = "glMultiDrawElementsBaseVertex")]
		public static unsafe void MultiDrawElementsBaseVertex<T3>(Pencil.Gaming.Graphics.BeginMode mode, Int32* count, Pencil.Gaming.Graphics.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount, Int32* basevertex)
			where T3 : struct {
			GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try {
				Delegates.glMultiDrawElementsBaseVertex((Pencil.Gaming.Graphics.BeginMode)mode, (Int32*)count, (Pencil.Gaming.Graphics.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
				indices = (T3)indices_ptr.Target;
			} finally {
				indices_ptr.Free();
			}
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1d")]
		public static void MultiTexCoord1(Pencil.Gaming.Graphics.TextureUnit target, Double s) {
			Delegates.glMultiTexCoord1d((Pencil.Gaming.Graphics.TextureUnit)target, (Double)s);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1dv")]
		public static unsafe void MultiTexCoord1(Pencil.Gaming.Graphics.TextureUnit target, Double* v) {
			Delegates.glMultiTexCoord1dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1f")]
		public static void MultiTexCoord1(Pencil.Gaming.Graphics.TextureUnit target, Single s) {
			Delegates.glMultiTexCoord1f((Pencil.Gaming.Graphics.TextureUnit)target, (Single)s);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1fv")]
		public static unsafe void MultiTexCoord1(Pencil.Gaming.Graphics.TextureUnit target, Single* v) {
			Delegates.glMultiTexCoord1fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1i")]
		public static void MultiTexCoord1(Pencil.Gaming.Graphics.TextureUnit target, Int32 s) {
			Delegates.glMultiTexCoord1i((Pencil.Gaming.Graphics.TextureUnit)target, (Int32)s);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1iv")]
		public static unsafe void MultiTexCoord1(Pencil.Gaming.Graphics.TextureUnit target, Int32* v) {
			Delegates.glMultiTexCoord1iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1s")]
		public static void MultiTexCoord1(Pencil.Gaming.Graphics.TextureUnit target, Int16 s) {
			Delegates.glMultiTexCoord1s((Pencil.Gaming.Graphics.TextureUnit)target, (Int16)s);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord1sv")]
		public static unsafe void MultiTexCoord1(Pencil.Gaming.Graphics.TextureUnit target, Int16* v) {
			Delegates.glMultiTexCoord1sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2d")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Double s, Double t) {
			Delegates.glMultiTexCoord2d((Pencil.Gaming.Graphics.TextureUnit)target, (Double)s, (Double)t);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glMultiTexCoord2dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glMultiTexCoord2dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2dv")]
		public static unsafe void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Double* v) {
			Delegates.glMultiTexCoord2dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2f")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Single s, Single t) {
			Delegates.glMultiTexCoord2f((Pencil.Gaming.Graphics.TextureUnit)target, (Single)s, (Single)t);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glMultiTexCoord2fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glMultiTexCoord2fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2fv")]
		public static unsafe void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Single* v) {
			Delegates.glMultiTexCoord2fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2i")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Int32 s, Int32 t) {
			Delegates.glMultiTexCoord2i((Pencil.Gaming.Graphics.TextureUnit)target, (Int32)s, (Int32)t);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glMultiTexCoord2iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glMultiTexCoord2iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2iv")]
		public static unsafe void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Int32* v) {
			Delegates.glMultiTexCoord2iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2s")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Int16 s, Int16 t) {
			Delegates.glMultiTexCoord2s((Pencil.Gaming.Graphics.TextureUnit)target, (Int16)s, (Int16)t);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glMultiTexCoord2sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
		public static void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glMultiTexCoord2sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord2sv")]
		public static unsafe void MultiTexCoord2(Pencil.Gaming.Graphics.TextureUnit target, Int16* v) {
			Delegates.glMultiTexCoord2sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3d")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Double s, Double t, Double r) {
			Delegates.glMultiTexCoord3d((Pencil.Gaming.Graphics.TextureUnit)target, (Double)s, (Double)t, (Double)r);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glMultiTexCoord3dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glMultiTexCoord3dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3dv")]
		public static unsafe void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Double* v) {
			Delegates.glMultiTexCoord3dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3f")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Single s, Single t, Single r) {
			Delegates.glMultiTexCoord3f((Pencil.Gaming.Graphics.TextureUnit)target, (Single)s, (Single)t, (Single)r);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glMultiTexCoord3fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glMultiTexCoord3fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3fv")]
		public static unsafe void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Single* v) {
			Delegates.glMultiTexCoord3fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3i")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Int32 s, Int32 t, Int32 r) {
			Delegates.glMultiTexCoord3i((Pencil.Gaming.Graphics.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glMultiTexCoord3iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glMultiTexCoord3iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3iv")]
		public static unsafe void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Int32* v) {
			Delegates.glMultiTexCoord3iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3s")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Int16 s, Int16 t, Int16 r) {
			Delegates.glMultiTexCoord3s((Pencil.Gaming.Graphics.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glMultiTexCoord3sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
		public static void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glMultiTexCoord3sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord3sv")]
		public static unsafe void MultiTexCoord3(Pencil.Gaming.Graphics.TextureUnit target, Int16* v) {
			Delegates.glMultiTexCoord3sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4d")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Double s, Double t, Double r, Double q) {
			Delegates.glMultiTexCoord4d((Pencil.Gaming.Graphics.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glMultiTexCoord4dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glMultiTexCoord4dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4dv")]
		public static unsafe void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Double* v) {
			Delegates.glMultiTexCoord4dv((Pencil.Gaming.Graphics.TextureUnit)target, (Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4f")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Single s, Single t, Single r, Single q) {
			Delegates.glMultiTexCoord4f((Pencil.Gaming.Graphics.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glMultiTexCoord4fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glMultiTexCoord4fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4fv")]
		public static unsafe void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Single* v) {
			Delegates.glMultiTexCoord4fv((Pencil.Gaming.Graphics.TextureUnit)target, (Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4i")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q) {
			Delegates.glMultiTexCoord4i((Pencil.Gaming.Graphics.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glMultiTexCoord4iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glMultiTexCoord4iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4iv")]
		public static unsafe void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Int32* v) {
			Delegates.glMultiTexCoord4iv((Pencil.Gaming.Graphics.TextureUnit)target, (Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4s")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q) {
			Delegates.glMultiTexCoord4s((Pencil.Gaming.Graphics.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glMultiTexCoord4sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
		public static void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glMultiTexCoord4sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultiTexCoord4sv")]
		public static unsafe void MultiTexCoord4(Pencil.Gaming.Graphics.TextureUnit target, Int16* v) {
			Delegates.glMultiTexCoord4sv((Pencil.Gaming.Graphics.TextureUnit)target, (Int16*)v);
		}
		#endif

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP1ui")]
		public static void MultiTexCoordP1(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glMultiTexCoordP1ui((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP1ui")]
		public static void MultiTexCoordP1(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glMultiTexCoordP1ui((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP1uiv")]
		public static unsafe void MultiTexCoordP1(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glMultiTexCoordP1uiv((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP1uiv")]
		public static unsafe void MultiTexCoordP1(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glMultiTexCoordP1uiv((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP2ui")]
		public static void MultiTexCoordP2(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glMultiTexCoordP2ui((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP2ui")]
		public static void MultiTexCoordP2(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glMultiTexCoordP2ui((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP2uiv")]
		public static unsafe void MultiTexCoordP2(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glMultiTexCoordP2uiv((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP2uiv")]
		public static unsafe void MultiTexCoordP2(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glMultiTexCoordP2uiv((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP3ui")]
		public static void MultiTexCoordP3(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glMultiTexCoordP3ui((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP3ui")]
		public static void MultiTexCoordP3(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glMultiTexCoordP3ui((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP3uiv")]
		public static unsafe void MultiTexCoordP3(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glMultiTexCoordP3uiv((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP3uiv")]
		public static unsafe void MultiTexCoordP3(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glMultiTexCoordP3uiv((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP4ui")]
		public static void MultiTexCoordP4(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glMultiTexCoordP4ui((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP4ui")]
		public static void MultiTexCoordP4(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glMultiTexCoordP4ui((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP4uiv")]
		public static unsafe void MultiTexCoordP4(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glMultiTexCoordP4uiv((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glMultiTexCoordP4uiv")]
		public static unsafe void MultiTexCoordP4(Pencil.Gaming.Graphics.TextureUnit texture, Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glMultiTexCoordP4uiv((Pencil.Gaming.Graphics.TextureUnit)texture, (Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixd")]
		public static void MultMatrix(Double[] m) {
			unsafe {
				fixed (Double* m_ptr = m) {
					Delegates.glMultMatrixd((Double*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixd")]
		public static void MultMatrix(ref Double m) {
			unsafe {
				fixed (Double* m_ptr = &m) {
					Delegates.glMultMatrixd((Double*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixd")]
		public static unsafe void MultMatrix(Double* m) {
			Delegates.glMultMatrixd((Double*)m);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixf")]
		public static void MultMatrix(Single[] m) {
			unsafe {
				fixed (Single* m_ptr = m) {
					Delegates.glMultMatrixf((Single*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixf")]
		public static void MultMatrix(ref Single m) {
			unsafe {
				fixed (Single* m_ptr = &m) {
					Delegates.glMultMatrixf((Single*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glMultMatrixf")]
		public static unsafe void MultMatrix(Single* m) {
			Delegates.glMultMatrixf((Single*)m);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
		public static void MultTransposeMatrix(Double[] m) {
			unsafe {
				fixed (Double* m_ptr = m) {
					Delegates.glMultTransposeMatrixd((Double*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
		public static void MultTransposeMatrix(ref Double m) {
			unsafe {
				fixed (Double* m_ptr = &m) {
					Delegates.glMultTransposeMatrixd((Double*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixd")]
		public static unsafe void MultTransposeMatrix(Double* m) {
			Delegates.glMultTransposeMatrixd((Double*)m);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
		public static void MultTransposeMatrix(Single[] m) {
			unsafe {
				fixed (Single* m_ptr = m) {
					Delegates.glMultTransposeMatrixf((Single*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
		public static void MultTransposeMatrix(ref Single m) {
			unsafe {
				fixed (Single* m_ptr = &m) {
					Delegates.glMultTransposeMatrixf((Single*)m_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_3_DEPRECATED", Version = "1.3", EntryPoint = "glMultTransposeMatrixf")]
		public static unsafe void MultTransposeMatrix(Single* m) {
			Delegates.glMultTransposeMatrixf((Single*)m);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNewList")]
		public static void NewList(Int32 list, Pencil.Gaming.Graphics.ListMode mode) {
			Delegates.glNewList((UInt32)list, (Pencil.Gaming.Graphics.ListMode)mode);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNewList")]
		public static void NewList(UInt32 list, Pencil.Gaming.Graphics.ListMode mode) {
			Delegates.glNewList((UInt32)list, (Pencil.Gaming.Graphics.ListMode)mode);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3b")]
		public static void Normal3(Byte nx, Byte ny, Byte nz) {
			Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3b")]
		public static void Normal3(SByte nx, SByte ny, SByte nz) {
			Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
		public static void Normal3(Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glNormal3bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
		public static void Normal3(ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glNormal3bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
		public static unsafe void Normal3(Byte* v) {
			Delegates.glNormal3bv((SByte*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
		public static void Normal3(SByte[] v) {
			unsafe {
				fixed (SByte* v_ptr = v) {
					Delegates.glNormal3bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
		public static void Normal3(ref SByte v) {
			unsafe {
				fixed (SByte* v_ptr = &v) {
					Delegates.glNormal3bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3bv")]
		public static unsafe void Normal3(SByte* v) {
			Delegates.glNormal3bv((SByte*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3d")]
		public static void Normal3(Double nx, Double ny, Double nz) {
			Delegates.glNormal3d((Double)nx, (Double)ny, (Double)nz);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3dv")]
		public static void Normal3(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glNormal3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3dv")]
		public static void Normal3(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glNormal3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3dv")]
		public static unsafe void Normal3(Double* v) {
			Delegates.glNormal3dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3f")]
		public static void Normal3(Single nx, Single ny, Single nz) {
			Delegates.glNormal3f((Single)nx, (Single)ny, (Single)nz);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3fv")]
		public static void Normal3(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glNormal3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3fv")]
		public static void Normal3(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glNormal3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3fv")]
		public static unsafe void Normal3(Single* v) {
			Delegates.glNormal3fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3i")]
		public static void Normal3(Int32 nx, Int32 ny, Int32 nz) {
			Delegates.glNormal3i((Int32)nx, (Int32)ny, (Int32)nz);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3iv")]
		public static void Normal3(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glNormal3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3iv")]
		public static void Normal3(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glNormal3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3iv")]
		public static unsafe void Normal3(Int32* v) {
			Delegates.glNormal3iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3s")]
		public static void Normal3(Int16 nx, Int16 ny, Int16 nz) {
			Delegates.glNormal3s((Int16)nx, (Int16)ny, (Int16)nz);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3sv")]
		public static void Normal3(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glNormal3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3sv")]
		public static void Normal3(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glNormal3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glNormal3sv")]
		public static unsafe void Normal3(Int16* v) {
			Delegates.glNormal3sv((Int16*)v);
		}
		#endif

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glNormalP3ui")]
		public static void NormalP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glNormalP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glNormalP3ui")]
		public static void NormalP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glNormalP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glNormalP3uiv")]
		public static unsafe void NormalP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glNormalP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glNormalP3uiv")]
		public static unsafe void NormalP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glNormalP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
		public static void NormalPointer(Pencil.Gaming.Graphics.NormalPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glNormalPointer((Pencil.Gaming.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
		public static void NormalPointer<T2>(Pencil.Gaming.Graphics.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glNormalPointer((Pencil.Gaming.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
		public static void NormalPointer<T2>(Pencil.Gaming.Graphics.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glNormalPointer((Pencil.Gaming.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
		public static void NormalPointer<T2>(Pencil.Gaming.Graphics.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] T2[,,] pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glNormalPointer((Pencil.Gaming.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glNormalPointer")]
		public static void NormalPointer<T2>(Pencil.Gaming.Graphics.NormalPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T2 pointer)
			where T2 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glNormalPointer((Pencil.Gaming.Graphics.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T2)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glOrtho")]
		public static void Ortho(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar) {
			Delegates.glOrtho((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPassThrough")]
		public static void PassThrough(Single token) {
			Delegates.glPassThrough((Single)token);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_tessellation_shader", Version = "1.2", EntryPoint = "glPatchParameterfv")]
		public static void PatchParameter(Pencil.Gaming.Graphics.PatchParameterFloat pname, Single[] values) {
			unsafe {
				fixed (Single* values_ptr = values) {
					Delegates.glPatchParameterfv((Pencil.Gaming.Graphics.PatchParameterFloat)pname, (Single*)values_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_tessellation_shader", Version = "1.2", EntryPoint = "glPatchParameterfv")]
		public static void PatchParameter(Pencil.Gaming.Graphics.PatchParameterFloat pname, ref Single values) {
			unsafe {
				fixed (Single* values_ptr = &values) {
					Delegates.glPatchParameterfv((Pencil.Gaming.Graphics.PatchParameterFloat)pname, (Single*)values_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_tessellation_shader", Version = "1.2", EntryPoint = "glPatchParameterfv")]
		public static unsafe void PatchParameter(Pencil.Gaming.Graphics.PatchParameterFloat pname, Single* values) {
			Delegates.glPatchParameterfv((Pencil.Gaming.Graphics.PatchParameterFloat)pname, (Single*)values);
		}

		
		//[AutoGenerated(Category = "ARB_tessellation_shader", Version = "1.2", EntryPoint = "glPatchParameteri")]
		public static void PatchParameter(Pencil.Gaming.Graphics.PatchParameterInt pname, Int32 value) {
			Delegates.glPatchParameteri((Pencil.Gaming.Graphics.PatchParameterInt)pname, (Int32)value);
		}

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glPauseTransformFeedback")]
		public static void PauseTransformFeedback() {
			Delegates.glPauseTransformFeedback();
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, Single[] values) {
			unsafe {
				fixed (Single* values_ptr = values) {
					Delegates.glPixelMapfv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, ref Single values) {
			unsafe {
				fixed (Single* values_ptr = &values) {
					Delegates.glPixelMapfv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapfv")]
		public static unsafe void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, Single* values) {
			Delegates.glPixelMapfv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (Single*)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, Int32[] values) {
			unsafe {
				fixed (Int32* values_ptr = values) {
					Delegates.glPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, ref Int32 values) {
			unsafe {
				fixed (Int32* values_ptr = &values) {
					Delegates.glPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
		public static unsafe void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, Int32* values) {
			Delegates.glPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, UInt32[] values) {
			unsafe {
				fixed (UInt32* values_ptr = values) {
					Delegates.glPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, ref UInt32 values) {
			unsafe {
				fixed (UInt32* values_ptr = &values) {
					Delegates.glPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapuiv")]
		public static unsafe void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, UInt32* values) {
			Delegates.glPixelMapuiv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt32*)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, Int16[] values) {
			unsafe {
				fixed (Int16* values_ptr = values) {
					Delegates.glPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, ref Int16 values) {
			unsafe {
				fixed (Int16* values_ptr = &values) {
					Delegates.glPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
		public static unsafe void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, Int16* values) {
			Delegates.glPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, UInt16[] values) {
			unsafe {
				fixed (UInt16* values_ptr = values) {
					Delegates.glPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
		public static void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, ref UInt16 values) {
			unsafe {
				fixed (UInt16* values_ptr = &values) {
					Delegates.glPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelMapusv")]
		public static unsafe void PixelMap(Pencil.Gaming.Graphics.PixelMap map, Int32 mapsize, UInt16* values) {
			Delegates.glPixelMapusv((Pencil.Gaming.Graphics.PixelMap)map, (Int32)mapsize, (UInt16*)values);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStoref")]
		public static void PixelStore(Pencil.Gaming.Graphics.PixelStoreParameter pname, Single param) {
			Delegates.glPixelStoref((Pencil.Gaming.Graphics.PixelStoreParameter)pname, (Single)param);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPixelStorei")]
		public static void PixelStore(Pencil.Gaming.Graphics.PixelStoreParameter pname, Int32 param) {
			Delegates.glPixelStorei((Pencil.Gaming.Graphics.PixelStoreParameter)pname, (Int32)param);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelTransferf")]
		public static void PixelTransfer(Pencil.Gaming.Graphics.PixelTransferParameter pname, Single param) {
			Delegates.glPixelTransferf((Pencil.Gaming.Graphics.PixelTransferParameter)pname, (Single)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelTransferi")]
		public static void PixelTransfer(Pencil.Gaming.Graphics.PixelTransferParameter pname, Int32 param) {
			Delegates.glPixelTransferi((Pencil.Gaming.Graphics.PixelTransferParameter)pname, (Int32)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPixelZoom")]
		public static void PixelZoom(Single xfactor, Single yfactor) {
			Delegates.glPixelZoom((Single)xfactor, (Single)yfactor);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterf")]
		public static void PointParameter(Pencil.Gaming.Graphics.PointParameterName pname, Single param) {
			Delegates.glPointParameterf((Pencil.Gaming.Graphics.PointParameterName)pname, (Single)param);
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
		public static void PointParameter(Pencil.Gaming.Graphics.PointParameterName pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glPointParameterfv((Pencil.Gaming.Graphics.PointParameterName)pname, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameterfv")]
		public static unsafe void PointParameter(Pencil.Gaming.Graphics.PointParameterName pname, Single* @params) {
			Delegates.glPointParameterfv((Pencil.Gaming.Graphics.PointParameterName)pname, (Single*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteri")]
		public static void PointParameter(Pencil.Gaming.Graphics.PointParameterName pname, Int32 param) {
			Delegates.glPointParameteri((Pencil.Gaming.Graphics.PointParameterName)pname, (Int32)param);
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
		public static void PointParameter(Pencil.Gaming.Graphics.PointParameterName pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glPointParameteriv((Pencil.Gaming.Graphics.PointParameterName)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_4", Version = "1.4", EntryPoint = "glPointParameteriv")]
		public static unsafe void PointParameter(Pencil.Gaming.Graphics.PointParameterName pname, Int32* @params) {
			Delegates.glPointParameteriv((Pencil.Gaming.Graphics.PointParameterName)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPointSize")]
		public static void PointSize(Single size) {
			Delegates.glPointSize((Single)size);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glPolygonMode")]
		public static void PolygonMode(Pencil.Gaming.Graphics.MaterialFace face, Pencil.Gaming.Graphics.PolygonMode mode) {
			Delegates.glPolygonMode((Pencil.Gaming.Graphics.MaterialFace)face, (Pencil.Gaming.Graphics.PolygonMode)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glPolygonOffset")]
		public static void PolygonOffset(Single factor, Single units) {
			Delegates.glPolygonOffset((Single)factor, (Single)units);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPolygonStipple")]
		public static void PolygonStipple(Byte[] mask) {
			unsafe {
				fixed (Byte* mask_ptr = mask) {
					Delegates.glPolygonStipple((Byte*)mask_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPolygonStipple")]
		public static void PolygonStipple(ref Byte mask) {
			unsafe {
				fixed (Byte* mask_ptr = &mask) {
					Delegates.glPolygonStipple((Byte*)mask_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPolygonStipple")]
		public static unsafe void PolygonStipple(Byte* mask) {
			Delegates.glPolygonStipple((Byte*)mask);
		}
		#endif
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPopAttrib")]
		public static void PopAttrib() {
			Delegates.glPopAttrib();
		}
		#endif
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPopClientAttrib")]
		public static void PopClientAttrib() {
			Delegates.glPopClientAttrib();
		}
		#endif
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPopMatrix")]
		public static void PopMatrix() {
			Delegates.glPopMatrix();
		}
		#endif
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPopName")]
		public static void PopName() {
			Delegates.glPopName();
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
		public static void PrimitiveRestartIndex(Int32 index) {
			Delegates.glPrimitiveRestartIndex((UInt32)index);
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glPrimitiveRestartIndex")]
		public static void PrimitiveRestartIndex(UInt32 index) {
			Delegates.glPrimitiveRestartIndex((UInt32)index);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
		public static void PrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities) {
			unsafe {
				fixed (Int32* textures_ptr = textures)
					fixed (Single* priorities_ptr = priorities) {
						Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
		public static void PrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities) {
			unsafe {
				fixed (Int32* textures_ptr = &textures)
					fixed (Single* priorities_ptr = &priorities) {
						Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
		public static unsafe void PrioritizeTextures(Int32 n, Int32* textures, Single* priorities) {
			Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
		public static void PrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities) {
			unsafe {
				fixed (UInt32* textures_ptr = textures)
					fixed (Single* priorities_ptr = priorities) {
						Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
		public static void PrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities) {
			unsafe {
				fixed (UInt32* textures_ptr = &textures)
					fixed (Single* priorities_ptr = &priorities) {
						Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPrioritizeTextures")]
		public static unsafe void PrioritizeTextures(Int32 n, UInt32* textures, Single* priorities) {
			Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary(Int32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, IntPtr binary, Int32 length) {
			Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary, (Int32)length);
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary<T2>(Int32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
			where T2 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary<T2>(Int32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
			where T2 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary<T2>(Int32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
			where T2 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary<T2>(Int32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
			where T2 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
				binary = (T2)binary_ptr.Target;
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary(UInt32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, IntPtr binary, Int32 length) {
			Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary, (Int32)length);
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary<T2>(UInt32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
			where T2 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary<T2>(UInt32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
			where T2 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary<T2>(UInt32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
			where T2 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "4.1", EntryPoint = "glProgramBinary")]
		public static void ProgramBinary<T2>(UInt32 program, Pencil.Gaming.Graphics.BinaryFormat binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
			where T2 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glProgramBinary((UInt32)program, (Pencil.Gaming.Graphics.BinaryFormat)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
				binary = (T2)binary_ptr.Target;
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "3.0", EntryPoint = "glProgramParameteri")]
		public static void ProgramParameter(Int32 program, Pencil.Gaming.Graphics.AssemblyProgramParameterArb pname, Int32 value) {
			Delegates.glProgramParameteri((UInt32)program, (Pencil.Gaming.Graphics.AssemblyProgramParameterArb)pname, (Int32)value);
		}

		
		//[AutoGenerated(Category = "ARB_get_program_binary", Version = "3.0", EntryPoint = "glProgramParameteri")]
		public static void ProgramParameter(UInt32 program, Pencil.Gaming.Graphics.AssemblyProgramParameterArb pname, Int32 value) {
			Delegates.glProgramParameteri((UInt32)program, (Pencil.Gaming.Graphics.AssemblyProgramParameterArb)pname, (Int32)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1d")]
		public static void ProgramUniform1(Int32 program, Int32 location, Double v0) {
			Delegates.glProgramUniform1d((UInt32)program, (Int32)location, (Double)v0);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1d")]
		public static void ProgramUniform1(UInt32 program, Int32 location, Double v0) {
			Delegates.glProgramUniform1d((UInt32)program, (Int32)location, (Double)v0);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
		public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniform1dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
		public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Double* value) {
			Delegates.glProgramUniform1dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
		public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniform1dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1dv")]
		public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Double* value) {
			Delegates.glProgramUniform1dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1f")]
		public static void ProgramUniform1(Int32 program, Int32 location, Single v0) {
			Delegates.glProgramUniform1f((UInt32)program, (Int32)location, (Single)v0);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1f")]
		public static void ProgramUniform1(UInt32 program, Int32 location, Single v0) {
			Delegates.glProgramUniform1f((UInt32)program, (Int32)location, (Single)v0);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
		public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniform1fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
		public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single* value) {
			Delegates.glProgramUniform1fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
		public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniform1fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1fv")]
		public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single* value) {
			Delegates.glProgramUniform1fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1i")]
		public static void ProgramUniform1(Int32 program, Int32 location, Int32 v0) {
			Delegates.glProgramUniform1i((UInt32)program, (Int32)location, (Int32)v0);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1i")]
		public static void ProgramUniform1(UInt32 program, Int32 location, Int32 v0) {
			Delegates.glProgramUniform1i((UInt32)program, (Int32)location, (Int32)v0);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
		public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glProgramUniform1iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
		public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32* value) {
			Delegates.glProgramUniform1iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
		public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glProgramUniform1iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1iv")]
		public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32* value) {
			Delegates.glProgramUniform1iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1ui")]
		public static void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0) {
			Delegates.glProgramUniform1ui((UInt32)program, (Int32)location, (UInt32)v0);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
		public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glProgramUniform1uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform1uiv")]
		public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32* value) {
			Delegates.glProgramUniform1uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2d")]
		public static void ProgramUniform2(Int32 program, Int32 location, Double v0, Double v1) {
			Delegates.glProgramUniform2d((UInt32)program, (Int32)location, (Double)v0, (Double)v1);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2d")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Double v0, Double v1) {
			Delegates.glProgramUniform2d((UInt32)program, (Int32)location, (Double)v0, (Double)v1);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
		public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniform2dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
		public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniform2dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
		public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Double* value) {
			Delegates.glProgramUniform2dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniform2dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniform2dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2dv")]
		public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Double* value) {
			Delegates.glProgramUniform2dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2f")]
		public static void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1) {
			Delegates.glProgramUniform2f((UInt32)program, (Int32)location, (Single)v0, (Single)v1);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2f")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1) {
			Delegates.glProgramUniform2f((UInt32)program, (Int32)location, (Single)v0, (Single)v1);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
		public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniform2fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
		public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniform2fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
		public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single* value) {
			Delegates.glProgramUniform2fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniform2fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniform2fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2fv")]
		public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single* value) {
			Delegates.glProgramUniform2fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2i")]
		public static void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1) {
			Delegates.glProgramUniform2i((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2i")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1) {
			Delegates.glProgramUniform2i((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
		public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glProgramUniform2iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
		public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32* value) {
			Delegates.glProgramUniform2iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glProgramUniform2iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2iv")]
		public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32* value) {
			Delegates.glProgramUniform2iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2ui")]
		public static void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1) {
			Delegates.glProgramUniform2ui((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32[] value) {
			unsafe {
				fixed (UInt32* value_ptr = value) {
					Delegates.glProgramUniform2uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
		public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glProgramUniform2uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform2uiv")]
		public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32* value) {
			Delegates.glProgramUniform2uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3d")]
		public static void ProgramUniform3(Int32 program, Int32 location, Double v0, Double v1, Double v2) {
			Delegates.glProgramUniform3d((UInt32)program, (Int32)location, (Double)v0, (Double)v1, (Double)v2);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3d")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Double v0, Double v1, Double v2) {
			Delegates.glProgramUniform3d((UInt32)program, (Int32)location, (Double)v0, (Double)v1, (Double)v2);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
		public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniform3dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
		public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniform3dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
		public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Double* value) {
			Delegates.glProgramUniform3dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniform3dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniform3dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3dv")]
		public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Double* value) {
			Delegates.glProgramUniform3dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3f")]
		public static void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2) {
			Delegates.glProgramUniform3f((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3f")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2) {
			Delegates.glProgramUniform3f((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
		public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniform3fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
		public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniform3fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
		public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single* value) {
			Delegates.glProgramUniform3fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniform3fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniform3fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3fv")]
		public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single* value) {
			Delegates.glProgramUniform3fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3i")]
		public static void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) {
			Delegates.glProgramUniform3i((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3i")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) {
			Delegates.glProgramUniform3i((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
		public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glProgramUniform3iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
		public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glProgramUniform3iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
		public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32* value) {
			Delegates.glProgramUniform3iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glProgramUniform3iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glProgramUniform3iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3iv")]
		public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32* value) {
			Delegates.glProgramUniform3iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3ui")]
		public static void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) {
			Delegates.glProgramUniform3ui((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32[] value) {
			unsafe {
				fixed (UInt32* value_ptr = value) {
					Delegates.glProgramUniform3uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
		public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glProgramUniform3uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform3uiv")]
		public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32* value) {
			Delegates.glProgramUniform3uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4d")]
		public static void ProgramUniform4(Int32 program, Int32 location, Double v0, Double v1, Double v2, Double v3) {
			Delegates.glProgramUniform4d((UInt32)program, (Int32)location, (Double)v0, (Double)v1, (Double)v2, (Double)v3);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4d")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Double v0, Double v1, Double v2, Double v3) {
			Delegates.glProgramUniform4d((UInt32)program, (Int32)location, (Double)v0, (Double)v1, (Double)v2, (Double)v3);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
		public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniform4dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
		public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniform4dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
		public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Double* value) {
			Delegates.glProgramUniform4dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniform4dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniform4dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4dv")]
		public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Double* value) {
			Delegates.glProgramUniform4dv((UInt32)program, (Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4f")]
		public static void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) {
			Delegates.glProgramUniform4f((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4f")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) {
			Delegates.glProgramUniform4f((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
		public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniform4fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
		public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniform4fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
		public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single* value) {
			Delegates.glProgramUniform4fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniform4fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniform4fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4fv")]
		public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single* value) {
			Delegates.glProgramUniform4fv((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4i")]
		public static void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) {
			Delegates.glProgramUniform4i((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4i")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) {
			Delegates.glProgramUniform4i((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
		public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glProgramUniform4iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
		public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glProgramUniform4iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
		public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32* value) {
			Delegates.glProgramUniform4iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glProgramUniform4iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glProgramUniform4iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4iv")]
		public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32* value) {
			Delegates.glProgramUniform4iv((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4ui")]
		public static void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) {
			Delegates.glProgramUniform4ui((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32[] value) {
			unsafe {
				fixed (UInt32* value_ptr = value) {
					Delegates.glProgramUniform4uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
		public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glProgramUniform4uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniform4uiv")]
		public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32* value) {
			Delegates.glProgramUniform4uiv((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
		public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
		public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
		public static unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
		public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
		public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2dv")]
		public static unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
		public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
		public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
		public static unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
		public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
		public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2fv")]
		public static unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
		public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix2x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
		public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
		public static unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix2x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
		public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix2x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
		public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3dv")]
		public static unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix2x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
		public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix2x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
		public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
		public static unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix2x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
		public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix2x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
		public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x3fv")]
		public static unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix2x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
		public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix2x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
		public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
		public static unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix2x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
		public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix2x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
		public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4dv")]
		public static unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix2x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
		public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix2x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
		public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
		public static unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix2x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
		public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix2x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
		public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix2x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix2x4fv")]
		public static unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix2x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
		public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
		public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
		public static unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
		public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
		public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3dv")]
		public static unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
		public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
		public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
		public static unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
		public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
		public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3fv")]
		public static unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
		public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix3x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
		public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
		public static unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix3x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
		public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix3x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
		public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2dv")]
		public static unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix3x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
		public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix3x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
		public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
		public static unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix3x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
		public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix3x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
		public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x2fv")]
		public static unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix3x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
		public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix3x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
		public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
		public static unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix3x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
		public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix3x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
		public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4dv")]
		public static unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix3x4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
		public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix3x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
		public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
		public static unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix3x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
		public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix3x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
		public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix3x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix3x4fv")]
		public static unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix3x4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
		public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
		public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
		public static unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
		public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
		public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4dv")]
		public static unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix4dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
		public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
		public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
		public static unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
		public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
		public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4fv")]
		public static unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix4fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
		public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix4x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
		public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
		public static unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix4x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
		public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix4x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
		public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2dv")]
		public static unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix4x2dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
		public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix4x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
		public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
		public static unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix4x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
		public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix4x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
		public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x2fv")]
		public static unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix4x2fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
		public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix4x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
		public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
		public static unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix4x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
		public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glProgramUniformMatrix4x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
		public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3dv")]
		public static unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glProgramUniformMatrix4x3dv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
		public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix4x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
		public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
		public static unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix4x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
		public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glProgramUniformMatrix4x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
		public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glProgramUniformMatrix4x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glProgramUniformMatrix4x3fv")]
		public static unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glProgramUniformMatrix4x3fv((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_provoking_vertex", Version = "1.2", EntryPoint = "glProvokingVertex")]
		public static void ProvokingVertex(Pencil.Gaming.Graphics.ProvokingVertexMode mode) {
			Delegates.glProvokingVertex((Pencil.Gaming.Graphics.ProvokingVertexMode)mode);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushAttrib")]
		public static void PushAttrib(Pencil.Gaming.Graphics.AttribMask mask) {
			Delegates.glPushAttrib((Pencil.Gaming.Graphics.AttribMask)mask);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glPushClientAttrib")]
		public static void PushClientAttrib(Pencil.Gaming.Graphics.ClientAttribMask mask) {
			Delegates.glPushClientAttrib((Pencil.Gaming.Graphics.ClientAttribMask)mask);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushMatrix")]
		public static void PushMatrix() {
			Delegates.glPushMatrix();
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushName")]
		public static void PushName(Int32 name) {
			Delegates.glPushName((UInt32)name);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glPushName")]
		public static void PushName(UInt32 name) {
			Delegates.glPushName((UInt32)name);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glQueryCounter")]
		public static void QueryCounter(Int32 id, Pencil.Gaming.Graphics.QueryCounterTarget target) {
			Delegates.glQueryCounter((UInt32)id, (Pencil.Gaming.Graphics.QueryCounterTarget)target);
		}

		
		//[AutoGenerated(Category = "ARB_timer_query", Version = "1.2", EntryPoint = "glQueryCounter")]
		public static void QueryCounter(UInt32 id, Pencil.Gaming.Graphics.QueryCounterTarget target) {
			Delegates.glQueryCounter((UInt32)id, (Pencil.Gaming.Graphics.QueryCounterTarget)target);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2d")]
		public static void RasterPos2(Double x, Double y) {
			Delegates.glRasterPos2d((Double)x, (Double)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2dv")]
		public static void RasterPos2(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glRasterPos2dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2dv")]
		public static void RasterPos2(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glRasterPos2dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2dv")]
		public static unsafe void RasterPos2(Double* v) {
			Delegates.glRasterPos2dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2f")]
		public static void RasterPos2(Single x, Single y) {
			Delegates.glRasterPos2f((Single)x, (Single)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2fv")]
		public static void RasterPos2(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glRasterPos2fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2fv")]
		public static void RasterPos2(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glRasterPos2fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2fv")]
		public static unsafe void RasterPos2(Single* v) {
			Delegates.glRasterPos2fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2i")]
		public static void RasterPos2(Int32 x, Int32 y) {
			Delegates.glRasterPos2i((Int32)x, (Int32)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2iv")]
		public static void RasterPos2(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glRasterPos2iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2iv")]
		public static void RasterPos2(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glRasterPos2iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2iv")]
		public static unsafe void RasterPos2(Int32* v) {
			Delegates.glRasterPos2iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2s")]
		public static void RasterPos2(Int16 x, Int16 y) {
			Delegates.glRasterPos2s((Int16)x, (Int16)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2sv")]
		public static void RasterPos2(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glRasterPos2sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2sv")]
		public static void RasterPos2(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glRasterPos2sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos2sv")]
		public static unsafe void RasterPos2(Int16* v) {
			Delegates.glRasterPos2sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3d")]
		public static void RasterPos3(Double x, Double y, Double z) {
			Delegates.glRasterPos3d((Double)x, (Double)y, (Double)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3dv")]
		public static void RasterPos3(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glRasterPos3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3dv")]
		public static void RasterPos3(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glRasterPos3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3dv")]
		public static unsafe void RasterPos3(Double* v) {
			Delegates.glRasterPos3dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3f")]
		public static void RasterPos3(Single x, Single y, Single z) {
			Delegates.glRasterPos3f((Single)x, (Single)y, (Single)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3fv")]
		public static void RasterPos3(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glRasterPos3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3fv")]
		public static void RasterPos3(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glRasterPos3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3fv")]
		public static unsafe void RasterPos3(Single* v) {
			Delegates.glRasterPos3fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3i")]
		public static void RasterPos3(Int32 x, Int32 y, Int32 z) {
			Delegates.glRasterPos3i((Int32)x, (Int32)y, (Int32)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3iv")]
		public static void RasterPos3(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glRasterPos3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3iv")]
		public static void RasterPos3(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glRasterPos3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3iv")]
		public static unsafe void RasterPos3(Int32* v) {
			Delegates.glRasterPos3iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3s")]
		public static void RasterPos3(Int16 x, Int16 y, Int16 z) {
			Delegates.glRasterPos3s((Int16)x, (Int16)y, (Int16)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3sv")]
		public static void RasterPos3(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glRasterPos3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3sv")]
		public static void RasterPos3(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glRasterPos3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos3sv")]
		public static unsafe void RasterPos3(Int16* v) {
			Delegates.glRasterPos3sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4d")]
		public static void RasterPos4(Double x, Double y, Double z, Double w) {
			Delegates.glRasterPos4d((Double)x, (Double)y, (Double)z, (Double)w);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4dv")]
		public static void RasterPos4(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glRasterPos4dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4dv")]
		public static void RasterPos4(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glRasterPos4dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4dv")]
		public static unsafe void RasterPos4(Double* v) {
			Delegates.glRasterPos4dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4f")]
		public static void RasterPos4(Single x, Single y, Single z, Single w) {
			Delegates.glRasterPos4f((Single)x, (Single)y, (Single)z, (Single)w);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4fv")]
		public static void RasterPos4(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glRasterPos4fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4fv")]
		public static void RasterPos4(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glRasterPos4fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4fv")]
		public static unsafe void RasterPos4(Single* v) {
			Delegates.glRasterPos4fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4i")]
		public static void RasterPos4(Int32 x, Int32 y, Int32 z, Int32 w) {
			Delegates.glRasterPos4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4iv")]
		public static void RasterPos4(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glRasterPos4iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4iv")]
		public static void RasterPos4(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glRasterPos4iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4iv")]
		public static unsafe void RasterPos4(Int32* v) {
			Delegates.glRasterPos4iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4s")]
		public static void RasterPos4(Int16 x, Int16 y, Int16 z, Int16 w) {
			Delegates.glRasterPos4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4sv")]
		public static void RasterPos4(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glRasterPos4sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4sv")]
		public static void RasterPos4(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glRasterPos4sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRasterPos4sv")]
		public static unsafe void RasterPos4(Int16* v) {
			Delegates.glRasterPos4sv((Int16*)v);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadBuffer")]
		public static void ReadBuffer(Pencil.Gaming.Graphics.ReadBufferMode mode) {
			Delegates.glReadBuffer((Pencil.Gaming.Graphics.ReadBufferMode)mode);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [OutAttribute] IntPtr pixels) {
			Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
			where T6 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
			where T6 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
			where T6 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glReadPixels")]
		public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
			where T6 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T6)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectd")]
		public static void Rect(Double x1, Double y1, Double x2, Double y2) {
			Delegates.glRectd((Double)x1, (Double)y1, (Double)x2, (Double)y2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectdv")]
		public static void Rect(Double[] v1, Double[] v2) {
			unsafe {
				fixed (Double* v1_ptr = v1)
					fixed (Double* v2_ptr = v2) {
						Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectdv")]
		public static void Rect(ref Double v1, ref Double v2) {
			unsafe {
				fixed (Double* v1_ptr = &v1)
					fixed (Double* v2_ptr = &v2) {
						Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectdv")]
		public static unsafe void Rect(Double* v1, Double* v2) {
			Delegates.glRectdv((Double*)v1, (Double*)v2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectf")]
		public static void Rect(Single x1, Single y1, Single x2, Single y2) {
			Delegates.glRectf((Single)x1, (Single)y1, (Single)x2, (Single)y2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectfv")]
		public static void Rect(Single[] v1, Single[] v2) {
			unsafe {
				fixed (Single* v1_ptr = v1)
					fixed (Single* v2_ptr = v2) {
						Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectfv")]
		public static void Rect(ref Single v1, ref Single v2) {
			unsafe {
				fixed (Single* v1_ptr = &v1)
					fixed (Single* v2_ptr = &v2) {
						Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectfv")]
		public static unsafe void Rect(Single* v1, Single* v2) {
			Delegates.glRectfv((Single*)v1, (Single*)v2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRecti")]
		public static void Rect(Int32 x1, Int32 y1, Int32 x2, Int32 y2) {
			Delegates.glRecti((Int32)x1, (Int32)y1, (Int32)x2, (Int32)y2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectiv")]
		public static void Rect(Int32[] v1, Int32[] v2) {
			unsafe {
				fixed (Int32* v1_ptr = v1)
					fixed (Int32* v2_ptr = v2) {
						Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectiv")]
		public static void Rect(ref Int32 v1, ref Int32 v2) {
			unsafe {
				fixed (Int32* v1_ptr = &v1)
					fixed (Int32* v2_ptr = &v2) {
						Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectiv")]
		public static unsafe void Rect(Int32* v1, Int32* v2) {
			Delegates.glRectiv((Int32*)v1, (Int32*)v2);
		}
		#endif
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRects")]
		public static void Rects(Int16 x1, Int16 y1, Int16 x2, Int16 y2) {
			Delegates.glRects((Int16)x1, (Int16)y1, (Int16)x2, (Int16)y2);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectsv")]
		public static void Rect(Int16[] v1, Int16[] v2) {
			unsafe {
				fixed (Int16* v1_ptr = v1)
					fixed (Int16* v2_ptr = v2) {
						Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectsv")]
		public static void Rect(ref Int16 v1, ref Int16 v2) {
			unsafe {
				fixed (Int16* v1_ptr = &v1)
					fixed (Int16* v2_ptr = &v2) {
						Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
					}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRectsv")]
		public static unsafe void Rect(Int16* v1, Int16* v2) {
			Delegates.glRectsv((Int16*)v1, (Int16*)v2);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glReleaseShaderCompiler")]
		public static void ReleaseShaderCompiler() {
			Delegates.glReleaseShaderCompiler();
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glRenderbufferStorage")]
		public static void RenderbufferStorage(Pencil.Gaming.Graphics.RenderbufferTarget target, Pencil.Gaming.Graphics.RenderbufferStorage internalformat, Int32 width, Int32 height) {
			Delegates.glRenderbufferStorage((Pencil.Gaming.Graphics.RenderbufferTarget)target, (Pencil.Gaming.Graphics.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
		}

		
		//[AutoGenerated(Category = "ARB_framebuffer_object", Version = "3.0", EntryPoint = "glRenderbufferStorageMultisample")]
		public static void RenderbufferStorageMultisample(Pencil.Gaming.Graphics.RenderbufferTarget target, Int32 samples, Pencil.Gaming.Graphics.RenderbufferStorage internalformat, Int32 width, Int32 height) {
			Delegates.glRenderbufferStorageMultisample((Pencil.Gaming.Graphics.RenderbufferTarget)target, (Int32)samples, (Pencil.Gaming.Graphics.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRenderMode")]
		public static Int32 RenderMode(Pencil.Gaming.Graphics.RenderingMode mode) {
			return Delegates.glRenderMode((Pencil.Gaming.Graphics.RenderingMode)mode);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glResetHistogram")]
		public static void ResetHistogram(Pencil.Gaming.Graphics.HistogramTarget target) {
			Delegates.glResetHistogram((Pencil.Gaming.Graphics.HistogramTarget)target);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glResetMinmax")]
		public static void ResetMinmax(Pencil.Gaming.Graphics.MinmaxTarget target) {
			Delegates.glResetMinmax((Pencil.Gaming.Graphics.MinmaxTarget)target);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_transform_feedback2", Version = "1.2", EntryPoint = "glResumeTransformFeedback")]
		public static void ResumeTransformFeedback() {
			Delegates.glResumeTransformFeedback();
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRotated")]
		public static void Rotate(Double angle, Double x, Double y, Double z) {
			Delegates.glRotated((Double)angle, (Double)x, (Double)y, (Double)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glRotatef")]
		public static void Rotate(Single angle, Single x, Single y, Single z) {
			Delegates.glRotatef((Single)angle, (Single)x, (Single)y, (Single)z);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_3", Version = "1.3", EntryPoint = "glSampleCoverage")]
		public static void SampleCoverage(Single value, bool invert) {
			Delegates.glSampleCoverage((Single)value, (bool)invert);
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glSampleMaski")]
		public static void SampleMask(Int32 index, Int32 mask) {
			Delegates.glSampleMaski((UInt32)index, (UInt32)mask);
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glSampleMaski")]
		public static void SampleMask(UInt32 index, UInt32 mask) {
			Delegates.glSampleMaski((UInt32)index, (UInt32)mask);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterf")]
		public static void SamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Single param) {
			Delegates.glSamplerParameterf((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single)param);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterf")]
		public static void SamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Single param) {
			Delegates.glSamplerParameterf((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single)param);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterfv")]
		public static void SamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Single[] param) {
			unsafe {
				fixed (Single* param_ptr = param) {
					Delegates.glSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)param_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterfv")]
		public static unsafe void SamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Single* param) {
			Delegates.glSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)param);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterfv")]
		public static void SamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Single[] param) {
			unsafe {
				fixed (Single* param_ptr = param) {
					Delegates.glSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)param_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterfv")]
		public static unsafe void SamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Single* param) {
			Delegates.glSamplerParameterfv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Single*)param);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameteri")]
		public static void SamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Int32 param) {
			Delegates.glSamplerParameteri((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32)param);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameteri")]
		public static void SamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Int32 param) {
			Delegates.glSamplerParameteri((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32)param);
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIiv")]
		public static void SamplerParameterI(Int32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, Int32[] param) {
			unsafe {
				fixed (Int32* param_ptr = param) {
					Delegates.glSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)param_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIiv")]
		public static void SamplerParameterI(Int32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, ref Int32 param) {
			unsafe {
				fixed (Int32* param_ptr = &param) {
					Delegates.glSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)param_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIiv")]
		public static unsafe void SamplerParameterI(Int32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, Int32* param) {
			Delegates.glSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)param);
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIiv")]
		public static void SamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, Int32[] param) {
			unsafe {
				fixed (Int32* param_ptr = param) {
					Delegates.glSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)param_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIiv")]
		public static void SamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, ref Int32 param) {
			unsafe {
				fixed (Int32* param_ptr = &param) {
					Delegates.glSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)param_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIiv")]
		public static unsafe void SamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, Int32* param) {
			Delegates.glSamplerParameterIiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (Int32*)param);
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIuiv")]
		public static void SamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, UInt32[] param) {
			unsafe {
				fixed (UInt32* param_ptr = param) {
					Delegates.glSamplerParameterIuiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (UInt32*)param_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIuiv")]
		public static void SamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, ref UInt32 param) {
			unsafe {
				fixed (UInt32* param_ptr = &param) {
					Delegates.glSamplerParameterIuiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (UInt32*)param_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameterIuiv")]
		public static unsafe void SamplerParameterI(UInt32 sampler, Pencil.Gaming.Graphics.ArbSamplerObjects pname, UInt32* param) {
			Delegates.glSamplerParameterIuiv((UInt32)sampler, (Pencil.Gaming.Graphics.ArbSamplerObjects)pname, (UInt32*)param);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameteriv")]
		public static void SamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Int32[] param) {
			unsafe {
				fixed (Int32* param_ptr = param) {
					Delegates.glSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)param_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameteriv")]
		public static unsafe void SamplerParameter(Int32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Int32* param) {
			Delegates.glSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)param);
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameteriv")]
		public static void SamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Int32[] param) {
			unsafe {
				fixed (Int32* param_ptr = param) {
					Delegates.glSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)param_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_sampler_objects", Version = "1.2", EntryPoint = "glSamplerParameteriv")]
		public static unsafe void SamplerParameter(UInt32 sampler, Pencil.Gaming.Graphics.SamplerParameter pname, Int32* param) {
			Delegates.glSamplerParameteriv((UInt32)sampler, (Pencil.Gaming.Graphics.SamplerParameter)pname, (Int32*)param);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glScaled")]
		public static void Scale(Double x, Double y, Double z) {
			Delegates.glScaled((Double)x, (Double)y, (Double)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glScalef")]
		public static void Scale(Single x, Single y, Single z) {
			Delegates.glScalef((Single)x, (Single)y, (Single)z);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glScissor")]
		public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height) {
			Delegates.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorArrayv")]
		public static void ScissorArray(Int32 first, Int32 count, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glScissorArrayv((UInt32)first, (Int32)count, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorArrayv")]
		public static void ScissorArray(Int32 first, Int32 count, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glScissorArrayv((UInt32)first, (Int32)count, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorArrayv")]
		public static unsafe void ScissorArray(Int32 first, Int32 count, Int32* v) {
			Delegates.glScissorArrayv((UInt32)first, (Int32)count, (Int32*)v);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorArrayv")]
		public static void ScissorArray(UInt32 first, Int32 count, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glScissorArrayv((UInt32)first, (Int32)count, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorArrayv")]
		public static void ScissorArray(UInt32 first, Int32 count, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glScissorArrayv((UInt32)first, (Int32)count, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorArrayv")]
		public static unsafe void ScissorArray(UInt32 first, Int32 count, Int32* v) {
			Delegates.glScissorArrayv((UInt32)first, (Int32)count, (Int32*)v);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorIndexed")]
		public static void ScissorIndexed(Int32 index, Int32 left, Int32 bottom, Int32 width, Int32 height) {
			Delegates.glScissorIndexed((UInt32)index, (Int32)left, (Int32)bottom, (Int32)width, (Int32)height);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorIndexed")]
		public static void ScissorIndexed(UInt32 index, Int32 left, Int32 bottom, Int32 width, Int32 height) {
			Delegates.glScissorIndexed((UInt32)index, (Int32)left, (Int32)bottom, (Int32)width, (Int32)height);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorIndexedv")]
		public static void ScissorIndexed(Int32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glScissorIndexedv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorIndexedv")]
		public static void ScissorIndexed(Int32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glScissorIndexedv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorIndexedv")]
		public static unsafe void ScissorIndexed(Int32 index, Int32* v) {
			Delegates.glScissorIndexedv((UInt32)index, (Int32*)v);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorIndexedv")]
		public static void ScissorIndexed(UInt32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glScissorIndexedv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorIndexedv")]
		public static void ScissorIndexed(UInt32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glScissorIndexedv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glScissorIndexedv")]
		public static unsafe void ScissorIndexed(UInt32 index, Int32* v) {
			Delegates.glScissorIndexedv((UInt32)index, (Int32*)v);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3b")]
		public static void SecondaryColor3(SByte red, SByte green, SByte blue) {
			Delegates.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
		public static void SecondaryColor3(SByte[] v) {
			unsafe {
				fixed (SByte* v_ptr = v) {
					Delegates.glSecondaryColor3bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
		public static void SecondaryColor3(ref SByte v) {
			unsafe {
				fixed (SByte* v_ptr = &v) {
					Delegates.glSecondaryColor3bv((SByte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3bv")]
		public static unsafe void SecondaryColor3(SByte* v) {
			Delegates.glSecondaryColor3bv((SByte*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3d")]
		public static void SecondaryColor3(Double red, Double green, Double blue) {
			Delegates.glSecondaryColor3d((Double)red, (Double)green, (Double)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
		public static void SecondaryColor3(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glSecondaryColor3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
		public static void SecondaryColor3(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glSecondaryColor3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3dv")]
		public static unsafe void SecondaryColor3(Double* v) {
			Delegates.glSecondaryColor3dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3f")]
		public static void SecondaryColor3(Single red, Single green, Single blue) {
			Delegates.glSecondaryColor3f((Single)red, (Single)green, (Single)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
		public static void SecondaryColor3(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glSecondaryColor3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
		public static void SecondaryColor3(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glSecondaryColor3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3fv")]
		public static unsafe void SecondaryColor3(Single* v) {
			Delegates.glSecondaryColor3fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3i")]
		public static void SecondaryColor3(Int32 red, Int32 green, Int32 blue) {
			Delegates.glSecondaryColor3i((Int32)red, (Int32)green, (Int32)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
		public static void SecondaryColor3(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glSecondaryColor3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
		public static void SecondaryColor3(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glSecondaryColor3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3iv")]
		public static unsafe void SecondaryColor3(Int32* v) {
			Delegates.glSecondaryColor3iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3s")]
		public static void SecondaryColor3(Int16 red, Int16 green, Int16 blue) {
			Delegates.glSecondaryColor3s((Int16)red, (Int16)green, (Int16)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
		public static void SecondaryColor3(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glSecondaryColor3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
		public static void SecondaryColor3(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glSecondaryColor3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3sv")]
		public static unsafe void SecondaryColor3(Int16* v) {
			Delegates.glSecondaryColor3sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ub")]
		public static void SecondaryColor3(Byte red, Byte green, Byte blue) {
			Delegates.glSecondaryColor3ub((Byte)red, (Byte)green, (Byte)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
		public static void SecondaryColor3(Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
		public static void SecondaryColor3(ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ubv")]
		public static unsafe void SecondaryColor3(Byte* v) {
			Delegates.glSecondaryColor3ubv((Byte*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3ui")]
		public static void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue) {
			Delegates.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
		public static void SecondaryColor3(UInt32[] v) {
			unsafe {
				fixed (UInt32* v_ptr = v) {
					Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
		public static void SecondaryColor3(ref UInt32 v) {
			unsafe {
				fixed (UInt32* v_ptr = &v) {
					Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3uiv")]
		public static unsafe void SecondaryColor3(UInt32* v) {
			Delegates.glSecondaryColor3uiv((UInt32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3us")]
		public static void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue) {
			Delegates.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
		public static void SecondaryColor3(UInt16[] v) {
			unsafe {
				fixed (UInt16* v_ptr = v) {
					Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
		public static void SecondaryColor3(ref UInt16 v) {
			unsafe {
				fixed (UInt16* v_ptr = &v) {
					Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColor3usv")]
		public static unsafe void SecondaryColor3(UInt16* v) {
			Delegates.glSecondaryColor3usv((UInt16*)v);
		}
		#endif

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glSecondaryColorP3ui")]
		public static void SecondaryColorP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32 color) {
			Delegates.glSecondaryColorP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glSecondaryColorP3ui")]
		public static void SecondaryColorP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 color) {
			Delegates.glSecondaryColorP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glSecondaryColorP3uiv")]
		public static unsafe void SecondaryColorP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32* color) {
			Delegates.glSecondaryColorP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)color);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glSecondaryColorP3uiv")]
		public static unsafe void SecondaryColorP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* color) {
			Delegates.glSecondaryColorP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)color);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
		public static void SecondaryColorPointer(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glSecondaryColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
		public static void SecondaryColorPointer<T3>(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glSecondaryColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
		public static void SecondaryColorPointer<T3>(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glSecondaryColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
		public static void SecondaryColorPointer<T3>(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glSecondaryColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glSecondaryColorPointer")]
		public static void SecondaryColorPointer<T3>(Int32 size, Pencil.Gaming.Graphics.ColorPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glSecondaryColorPointer((Int32)size, (Pencil.Gaming.Graphics.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T3)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
		public static void SelectBuffer(Int32 size, [OutAttribute] Int32[] buffer) {
			unsafe {
				fixed (Int32* buffer_ptr = buffer) {
					Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
		public static void SelectBuffer(Int32 size, [OutAttribute] out Int32 buffer) {
			unsafe {
				fixed (Int32* buffer_ptr = &buffer) {
					Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
					buffer = *buffer_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
		public static unsafe void SelectBuffer(Int32 size, [OutAttribute] Int32* buffer) {
			Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
		public static void SelectBuffer(Int32 size, [OutAttribute] UInt32[] buffer) {
			unsafe {
				fixed (UInt32* buffer_ptr = buffer) {
					Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
		public static void SelectBuffer(Int32 size, [OutAttribute] out UInt32 buffer) {
			unsafe {
				fixed (UInt32* buffer_ptr = &buffer) {
					Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
					buffer = *buffer_ptr;
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glSelectBuffer")]
		public static unsafe void SelectBuffer(Int32 size, [OutAttribute] UInt32* buffer) {
			Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr row, IntPtr column) {
			Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D<T7>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[] column)
			where T7 : struct {
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			try {
				Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
			} finally {
				column_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D<T7>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[,] column)
			where T7 : struct {
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			try {
				Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
			} finally {
				column_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D<T7>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr row, [InAttribute, OutAttribute] T7[,,] column)
			where T7 : struct {
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			try {
				Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
			} finally {
				column_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D<T7>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr row, [InAttribute, OutAttribute] ref T7 column)
			where T7 : struct {
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			try {
				Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
				column = (T7)column_ptr.Target;
			} finally {
				column_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D<T6,T7>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[] row, [InAttribute, OutAttribute] T7[,,] column)
			where T6 : struct
			where T7 : struct {
			GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			try {
				Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
			} finally {
				row_ptr.Free();
				column_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D<T6,T7>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[,] row, [InAttribute, OutAttribute] T7[,,] column)
			where T6 : struct
			where T7 : struct {
			GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			try {
				Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
			} finally {
				row_ptr.Free();
				column_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D<T6,T7>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[,,] row, [InAttribute, OutAttribute] T7[,,] column)
			where T6 : struct
			where T7 : struct {
			GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			try {
				Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
			} finally {
				row_ptr.Free();
				column_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_2_DEPRECATED", Version = "1.2", EntryPoint = "glSeparableFilter2D")]
		public static void SeparableFilter2D<T6,T7>(Pencil.Gaming.Graphics.SeparableTarget target, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T6 row, [InAttribute, OutAttribute] T7[,,] column)
			where T6 : struct
			where T7 : struct {
			GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
			GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
			try {
				Delegates.glSeparableFilter2D((Pencil.Gaming.Graphics.SeparableTarget)target, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
				row = (T6)row_ptr.Target;
			} finally {
				row_ptr.Free();
				column_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glShadeModel")]
		public static void ShadeModel(Pencil.Gaming.Graphics.ShadingModel mode) {
			Delegates.glShadeModel((Pencil.Gaming.Graphics.ShadingModel)mode);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary(Int32 count, Int32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, IntPtr binary, Int32 length) {
			unsafe {
				fixed (Int32* shaders_ptr = shaders) {
					Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (Int32* shaders_ptr = shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (Int32* shaders_ptr = shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (Int32* shaders_ptr = shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (Int32* shaders_ptr = shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
						binary = (T3)binary_ptr.Target;
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary(Int32 count, ref Int32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, IntPtr binary, Int32 length) {
			unsafe {
				fixed (Int32* shaders_ptr = &shaders) {
					Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (Int32* shaders_ptr = &shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (Int32* shaders_ptr = &shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (Int32* shaders_ptr = &shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (Int32* shaders_ptr = &shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
						binary = (T3)binary_ptr.Target;
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary(Int32 count, Int32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, IntPtr binary, Int32 length) {
			Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
			where T3 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
			where T3 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
			where T3 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
			where T3 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
				binary = (T3)binary_ptr.Target;
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary(Int32 count, UInt32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, IntPtr binary, Int32 length) {
			unsafe {
				fixed (UInt32* shaders_ptr = shaders) {
					Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (UInt32* shaders_ptr = shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (UInt32* shaders_ptr = shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (UInt32* shaders_ptr = shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (UInt32* shaders_ptr = shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
						binary = (T3)binary_ptr.Target;
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary(Int32 count, ref UInt32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, IntPtr binary, Int32 length) {
			unsafe {
				fixed (UInt32* shaders_ptr = &shaders) {
					Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (UInt32* shaders_ptr = &shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (UInt32* shaders_ptr = &shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (UInt32* shaders_ptr = &shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
			where T3 : struct {
			unsafe {
				fixed (UInt32* shaders_ptr = &shaders) {
					GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
					try {
						Delegates.glShaderBinary((Int32)count, (UInt32*)shaders_ptr, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
						binary = (T3)binary_ptr.Target;
					} finally {
						binary_ptr.Free();
					}
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary(Int32 count, UInt32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, IntPtr binary, Int32 length) {
			Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
			where T3 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
			where T3 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
			where T3 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_ES2_compatibility", Version = "4.1", EntryPoint = "glShaderBinary")]
		public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, Pencil.Gaming.Graphics.BinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
			where T3 : struct {
			GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
			try {
				Delegates.glShaderBinary((Int32)count, (UInt32*)shaders, (Pencil.Gaming.Graphics.BinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
				binary = (T3)binary_ptr.Target;
			} finally {
				binary_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
		public static void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
		public static unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length) {
			Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
		public static void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length) {
			unsafe {
				fixed (Int32* length_ptr = &length) {
					Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
		public static unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length) {
			Delegates.glShaderSource((UInt32)shader, (Int32)count, (String[])@string, (Int32*)length);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
		public static void StencilFunc(Pencil.Gaming.Graphics.StencilFunction func, Int32 @ref, Int32 mask) {
			Delegates.glStencilFunc((Pencil.Gaming.Graphics.StencilFunction)func, (Int32)@ref, (UInt32)mask);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilFunc")]
		public static void StencilFunc(Pencil.Gaming.Graphics.StencilFunction func, Int32 @ref, UInt32 mask) {
			Delegates.glStencilFunc((Pencil.Gaming.Graphics.StencilFunction)func, (Int32)@ref, (UInt32)mask);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
		public static void StencilFuncSeparate(Pencil.Gaming.Graphics.StencilFace face, Pencil.Gaming.Graphics.StencilFunction func, Int32 @ref, Int32 mask) {
			Delegates.glStencilFuncSeparate((Pencil.Gaming.Graphics.StencilFace)face, (Pencil.Gaming.Graphics.StencilFunction)func, (Int32)@ref, (UInt32)mask);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
		public static void StencilFuncSeparate(Pencil.Gaming.Graphics.StencilFace face, Pencil.Gaming.Graphics.StencilFunction func, Int32 @ref, UInt32 mask) {
			Delegates.glStencilFuncSeparate((Pencil.Gaming.Graphics.StencilFace)face, (Pencil.Gaming.Graphics.StencilFunction)func, (Int32)@ref, (UInt32)mask);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
		public static void StencilMask(Int32 mask) {
			Delegates.glStencilMask((UInt32)mask);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilMask")]
		public static void StencilMask(UInt32 mask) {
			Delegates.glStencilMask((UInt32)mask);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
		public static void StencilMaskSeparate(Pencil.Gaming.Graphics.StencilFace face, Int32 mask) {
			Delegates.glStencilMaskSeparate((Pencil.Gaming.Graphics.StencilFace)face, (UInt32)mask);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
		public static void StencilMaskSeparate(Pencil.Gaming.Graphics.StencilFace face, UInt32 mask) {
			Delegates.glStencilMaskSeparate((Pencil.Gaming.Graphics.StencilFace)face, (UInt32)mask);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glStencilOp")]
		public static void StencilOp(Pencil.Gaming.Graphics.StencilOp fail, Pencil.Gaming.Graphics.StencilOp zfail, Pencil.Gaming.Graphics.StencilOp zpass) {
			Delegates.glStencilOp((Pencil.Gaming.Graphics.StencilOp)fail, (Pencil.Gaming.Graphics.StencilOp)zfail, (Pencil.Gaming.Graphics.StencilOp)zpass);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
		public static void StencilOpSeparate(Pencil.Gaming.Graphics.StencilFace face, Pencil.Gaming.Graphics.StencilOp sfail, Pencil.Gaming.Graphics.StencilOp dpfail, Pencil.Gaming.Graphics.StencilOp dppass) {
			Delegates.glStencilOpSeparate((Pencil.Gaming.Graphics.StencilFace)face, (Pencil.Gaming.Graphics.StencilOp)sfail, (Pencil.Gaming.Graphics.StencilOp)dpfail, (Pencil.Gaming.Graphics.StencilOp)dppass);
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
		public static void TexBuffer(Pencil.Gaming.Graphics.TextureBufferTarget target, Pencil.Gaming.Graphics.SizedInternalFormat internalformat, Int32 buffer) {
			Delegates.glTexBuffer((Pencil.Gaming.Graphics.TextureBufferTarget)target, (Pencil.Gaming.Graphics.SizedInternalFormat)internalformat, (UInt32)buffer);
		}

		
		//[AutoGenerated(Category = "VERSION_3_1", Version = "3.1", EntryPoint = "glTexBuffer")]
		public static void TexBuffer(Pencil.Gaming.Graphics.TextureBufferTarget target, Pencil.Gaming.Graphics.SizedInternalFormat internalformat, UInt32 buffer) {
			Delegates.glTexBuffer((Pencil.Gaming.Graphics.TextureBufferTarget)target, (Pencil.Gaming.Graphics.SizedInternalFormat)internalformat, (UInt32)buffer);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1d")]
		public static void TexCoord1(Double s) {
			Delegates.glTexCoord1d((Double)s);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1dv")]
		public static unsafe void TexCoord1(Double* v) {
			Delegates.glTexCoord1dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1f")]
		public static void TexCoord1(Single s) {
			Delegates.glTexCoord1f((Single)s);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1fv")]
		public static unsafe void TexCoord1(Single* v) {
			Delegates.glTexCoord1fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1i")]
		public static void TexCoord1(Int32 s) {
			Delegates.glTexCoord1i((Int32)s);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1iv")]
		public static unsafe void TexCoord1(Int32* v) {
			Delegates.glTexCoord1iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1s")]
		public static void TexCoord1(Int16 s) {
			Delegates.glTexCoord1s((Int16)s);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord1sv")]
		public static unsafe void TexCoord1(Int16* v) {
			Delegates.glTexCoord1sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2d")]
		public static void TexCoord2(Double s, Double t) {
			Delegates.glTexCoord2d((Double)s, (Double)t);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2dv")]
		public static void TexCoord2(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glTexCoord2dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2dv")]
		public static void TexCoord2(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glTexCoord2dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2dv")]
		public static unsafe void TexCoord2(Double* v) {
			Delegates.glTexCoord2dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2f")]
		public static void TexCoord2(Single s, Single t) {
			Delegates.glTexCoord2f((Single)s, (Single)t);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2fv")]
		public static void TexCoord2(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glTexCoord2fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2fv")]
		public static void TexCoord2(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glTexCoord2fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2fv")]
		public static unsafe void TexCoord2(Single* v) {
			Delegates.glTexCoord2fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2i")]
		public static void TexCoord2(Int32 s, Int32 t) {
			Delegates.glTexCoord2i((Int32)s, (Int32)t);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2iv")]
		public static void TexCoord2(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glTexCoord2iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2iv")]
		public static void TexCoord2(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glTexCoord2iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2iv")]
		public static unsafe void TexCoord2(Int32* v) {
			Delegates.glTexCoord2iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2s")]
		public static void TexCoord2(Int16 s, Int16 t) {
			Delegates.glTexCoord2s((Int16)s, (Int16)t);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2sv")]
		public static void TexCoord2(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glTexCoord2sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2sv")]
		public static void TexCoord2(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glTexCoord2sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord2sv")]
		public static unsafe void TexCoord2(Int16* v) {
			Delegates.glTexCoord2sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3d")]
		public static void TexCoord3(Double s, Double t, Double r) {
			Delegates.glTexCoord3d((Double)s, (Double)t, (Double)r);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3dv")]
		public static void TexCoord3(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glTexCoord3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3dv")]
		public static void TexCoord3(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glTexCoord3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3dv")]
		public static unsafe void TexCoord3(Double* v) {
			Delegates.glTexCoord3dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3f")]
		public static void TexCoord3(Single s, Single t, Single r) {
			Delegates.glTexCoord3f((Single)s, (Single)t, (Single)r);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3fv")]
		public static void TexCoord3(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glTexCoord3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3fv")]
		public static void TexCoord3(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glTexCoord3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3fv")]
		public static unsafe void TexCoord3(Single* v) {
			Delegates.glTexCoord3fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3i")]
		public static void TexCoord3(Int32 s, Int32 t, Int32 r) {
			Delegates.glTexCoord3i((Int32)s, (Int32)t, (Int32)r);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3iv")]
		public static void TexCoord3(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glTexCoord3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3iv")]
		public static void TexCoord3(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glTexCoord3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3iv")]
		public static unsafe void TexCoord3(Int32* v) {
			Delegates.glTexCoord3iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3s")]
		public static void TexCoord3(Int16 s, Int16 t, Int16 r) {
			Delegates.glTexCoord3s((Int16)s, (Int16)t, (Int16)r);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3sv")]
		public static void TexCoord3(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glTexCoord3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3sv")]
		public static void TexCoord3(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glTexCoord3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord3sv")]
		public static unsafe void TexCoord3(Int16* v) {
			Delegates.glTexCoord3sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4d")]
		public static void TexCoord4(Double s, Double t, Double r, Double q) {
			Delegates.glTexCoord4d((Double)s, (Double)t, (Double)r, (Double)q);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4dv")]
		public static void TexCoord4(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glTexCoord4dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4dv")]
		public static void TexCoord4(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glTexCoord4dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4dv")]
		public static unsafe void TexCoord4(Double* v) {
			Delegates.glTexCoord4dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4f")]
		public static void TexCoord4(Single s, Single t, Single r, Single q) {
			Delegates.glTexCoord4f((Single)s, (Single)t, (Single)r, (Single)q);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4fv")]
		public static void TexCoord4(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glTexCoord4fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4fv")]
		public static void TexCoord4(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glTexCoord4fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4fv")]
		public static unsafe void TexCoord4(Single* v) {
			Delegates.glTexCoord4fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4i")]
		public static void TexCoord4(Int32 s, Int32 t, Int32 r, Int32 q) {
			Delegates.glTexCoord4i((Int32)s, (Int32)t, (Int32)r, (Int32)q);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4iv")]
		public static void TexCoord4(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glTexCoord4iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4iv")]
		public static void TexCoord4(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glTexCoord4iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4iv")]
		public static unsafe void TexCoord4(Int32* v) {
			Delegates.glTexCoord4iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4s")]
		public static void TexCoord4(Int16 s, Int16 t, Int16 r, Int16 q) {
			Delegates.glTexCoord4s((Int16)s, (Int16)t, (Int16)r, (Int16)q);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4sv")]
		public static void TexCoord4(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glTexCoord4sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4sv")]
		public static void TexCoord4(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glTexCoord4sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexCoord4sv")]
		public static unsafe void TexCoord4(Int16* v) {
			Delegates.glTexCoord4sv((Int16*)v);
		}
		#endif

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP1ui")]
		public static void TexCoordP1(Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glTexCoordP1ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP1ui")]
		public static void TexCoordP1(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glTexCoordP1ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP1uiv")]
		public static unsafe void TexCoordP1(Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glTexCoordP1uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP1uiv")]
		public static unsafe void TexCoordP1(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glTexCoordP1uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP2ui")]
		public static void TexCoordP2(Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glTexCoordP2ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP2ui")]
		public static void TexCoordP2(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glTexCoordP2ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP2uiv")]
		public static unsafe void TexCoordP2(Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glTexCoordP2uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP2uiv")]
		public static unsafe void TexCoordP2(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glTexCoordP2uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP3ui")]
		public static void TexCoordP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glTexCoordP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP3ui")]
		public static void TexCoordP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glTexCoordP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP3uiv")]
		public static unsafe void TexCoordP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glTexCoordP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP3uiv")]
		public static unsafe void TexCoordP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glTexCoordP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP4ui")]
		public static void TexCoordP4(Pencil.Gaming.Graphics.PackedPointerType type, Int32 coords) {
			Delegates.glTexCoordP4ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP4ui")]
		public static void TexCoordP4(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 coords) {
			Delegates.glTexCoordP4ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP4uiv")]
		public static unsafe void TexCoordP4(Pencil.Gaming.Graphics.PackedPointerType type, Int32* coords) {
			Delegates.glTexCoordP4uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glTexCoordP4uiv")]
		public static unsafe void TexCoordP4(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* coords) {
			Delegates.glTexCoordP4uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)coords);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer(Int32 size, Pencil.Gaming.Graphics.TexCoordPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glTexCoordPointer((Int32)size, (Pencil.Gaming.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer<T3>(Int32 size, Pencil.Gaming.Graphics.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glTexCoordPointer((Int32)size, (Pencil.Gaming.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer<T3>(Int32 size, Pencil.Gaming.Graphics.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glTexCoordPointer((Int32)size, (Pencil.Gaming.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer<T3>(Int32 size, Pencil.Gaming.Graphics.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glTexCoordPointer((Int32)size, (Pencil.Gaming.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glTexCoordPointer")]
		public static void TexCoordPointer<T3>(Int32 size, Pencil.Gaming.Graphics.TexCoordPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glTexCoordPointer((Int32)size, (Pencil.Gaming.Graphics.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T3)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvf")]
		public static void TexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, Single param) {
			Delegates.glTexEnvf((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Single)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvfv")]
		public static void TexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glTexEnvfv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvfv")]
		public static unsafe void TexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, Single* @params) {
			Delegates.glTexEnvfv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnvi")]
		public static void TexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, Int32 param) {
			Delegates.glTexEnvi((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Int32)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnviv")]
		public static void TexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glTexEnviv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexEnviv")]
		public static unsafe void TexEnv(Pencil.Gaming.Graphics.TextureEnvTarget target, Pencil.Gaming.Graphics.TextureEnvParameter pname, Int32* @params) {
			Delegates.glTexEnviv((Pencil.Gaming.Graphics.TextureEnvTarget)target, (Pencil.Gaming.Graphics.TextureEnvParameter)pname, (Int32*)@params);
		}
		#endif
#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGend")]
		public static void TexGend(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Double param) {
			Delegates.glTexGend((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Double)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
		public static void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Double[] @params) {
			unsafe {
				fixed (Double* @params_ptr = @params) {
					Delegates.glTexGendv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
		public static void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, ref Double @params) {
			unsafe {
				fixed (Double* @params_ptr = &@params) {
					Delegates.glTexGendv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Double*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGendv")]
		public static unsafe void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Double* @params) {
			Delegates.glTexGendv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Double*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenf")]
		public static void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Single param) {
			Delegates.glTexGenf((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Single)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenfv")]
		public static void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glTexGenfv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Single*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGenfv")]
		public static unsafe void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Single* @params) {
			Delegates.glTexGenfv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Single*)@params);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeni")]
		public static void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Int32 param) {
			Delegates.glTexGeni((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Int32)param);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeniv")]
		public static void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glTexGeniv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Int32*)@params_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTexGeniv")]
		public static unsafe void TexGen(Pencil.Gaming.Graphics.TextureCoordName coord, Pencil.Gaming.Graphics.TextureGenParameter pname, Int32* @params) {
			Delegates.glTexGeniv((Pencil.Gaming.Graphics.TextureCoordName)coord, (Pencil.Gaming.Graphics.TextureGenParameter)pname, (Int32*)@params);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
		public static void TexImage1D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr pixels) {
			Delegates.glTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
		public static void TexImage1D<T7>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T7[] pixels)
			where T7 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
		public static void TexImage1D<T7>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T7[,] pixels)
			where T7 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
		public static void TexImage1D<T7>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T7[,,] pixels)
			where T7 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage1D")]
		public static void TexImage1D<T7>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T7 pixels)
			where T7 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T7)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr pixels) {
			Delegates.glTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
			where T8 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
			where T8 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
			where T8 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexImage2D")]
		public static void TexImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
			where T8 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T8)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glTexImage2DMultisample")]
		public static void TexImage2DMultisample(Pencil.Gaming.Graphics.TextureTargetMultisample target, Int32 samples, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations) {
			Delegates.glTexImage2DMultisample((Pencil.Gaming.Graphics.TextureTargetMultisample)target, (Int32)samples, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (bool)fixedsamplelocations);
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
		public static void TexImage3D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr pixels) {
			Delegates.glTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
		public static void TexImage3D<T9>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
			where T9 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
		public static void TexImage3D<T9>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
			where T9 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
		public static void TexImage3D<T9>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
			where T9 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexImage3D")]
		public static void TexImage3D<T9>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
			where T9 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T9)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "ARB_texture_multisample", Version = "1.2", EntryPoint = "glTexImage3DMultisample")]
		public static void TexImage3DMultisample(Pencil.Gaming.Graphics.TextureTargetMultisample target, Int32 samples, Pencil.Gaming.Graphics.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations) {
			Delegates.glTexImage3DMultisample((Pencil.Gaming.Graphics.TextureTargetMultisample)target, (Int32)samples, (Pencil.Gaming.Graphics.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (bool)fixedsamplelocations);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterf")]
		public static void TexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, Single param) {
			Delegates.glTexParameterf((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Single)param);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
		public static void TexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, Single[] @params) {
			unsafe {
				fixed (Single* @params_ptr = @params) {
					Delegates.glTexParameterfv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Single*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameterfv")]
		public static unsafe void TexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, Single* @params) {
			Delegates.glTexParameterfv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Single*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteri")]
		public static void TexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, Int32 param) {
			Delegates.glTexParameteri((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Int32)param);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
		public static void TexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glTexParameterIiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
		public static void TexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, ref Int32 @params) {
			unsafe {
				fixed (Int32* @params_ptr = &@params) {
					Delegates.glTexParameterIiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIiv")]
		public static unsafe void TexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, Int32* @params) {
			Delegates.glTexParameterIiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Int32*)@params);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
		public static void TexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, UInt32[] @params) {
			unsafe {
				fixed (UInt32* @params_ptr = @params) {
					Delegates.glTexParameterIuiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
		public static void TexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, ref UInt32 @params) {
			unsafe {
				fixed (UInt32* @params_ptr = &@params) {
					Delegates.glTexParameterIuiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (UInt32*)@params_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTexParameterIuiv")]
		public static unsafe void TexParameterI(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, UInt32* @params) {
			Delegates.glTexParameterIuiv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (UInt32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
		public static void TexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, Int32[] @params) {
			unsafe {
				fixed (Int32* @params_ptr = @params) {
					Delegates.glTexParameteriv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Int32*)@params_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glTexParameteriv")]
		public static unsafe void TexParameter(Pencil.Gaming.Graphics.TextureTarget target, Pencil.Gaming.Graphics.TextureParameterName pname, Int32* @params) {
			Delegates.glTexParameteriv((Pencil.Gaming.Graphics.TextureTarget)target, (Pencil.Gaming.Graphics.TextureParameterName)pname, (Int32*)@params);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
		public static void TexSubImage1D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr pixels) {
			Delegates.glTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
		public static void TexSubImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
			where T6 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
		public static void TexSubImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
			where T6 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
		public static void TexSubImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
			where T6 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage1D")]
		public static void TexSubImage1D<T6>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
			where T6 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage1D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T6)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr pixels) {
			Delegates.glTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
			where T8 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
			where T8 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
			where T8 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_1", Version = "1.1", EntryPoint = "glTexSubImage2D")]
		public static void TexSubImage2D<T8>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
			where T8 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage2D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T8)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
		public static void TexSubImage3D(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, IntPtr pixels) {
			Delegates.glTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels);
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
		public static void TexSubImage3D<T10>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T10[] pixels)
			where T10 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
		public static void TexSubImage3D<T10>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T10[,] pixels)
			where T10 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
		public static void TexSubImage3D<T10>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] T10[,,] pixels)
			where T10 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_1_2", Version = "1.2", EntryPoint = "glTexSubImage3D")]
		public static void TexSubImage3D<T10>(Pencil.Gaming.Graphics.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Pencil.Gaming.Graphics.PixelFormat format, Pencil.Gaming.Graphics.PixelType type, [InAttribute, OutAttribute] ref T10 pixels)
			where T10 : struct {
			GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try {
				Delegates.glTexSubImage3D((Pencil.Gaming.Graphics.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Pencil.Gaming.Graphics.PixelFormat)format, (Pencil.Gaming.Graphics.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
				pixels = (T10)pixels_ptr.Target;
			} finally {
				pixels_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
		public static void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, Pencil.Gaming.Graphics.TransformFeedbackMode bufferMode) {
			Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (String[])varyings, (Pencil.Gaming.Graphics.TransformFeedbackMode)bufferMode);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glTransformFeedbackVaryings")]
		public static void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, Pencil.Gaming.Graphics.TransformFeedbackMode bufferMode) {
			Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, (String[])varyings, (Pencil.Gaming.Graphics.TransformFeedbackMode)bufferMode);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTranslated")]
		public static void Translate(Double x, Double y, Double z) {
			Delegates.glTranslated((Double)x, (Double)y, (Double)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glTranslatef")]
		public static void Translate(Single x, Single y, Single z) {
			Delegates.glTranslatef((Single)x, (Single)y, (Single)z);
		}
		#endif

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform1d")]
		public static void Uniform1(Int32 location, Double x) {
			Delegates.glUniform1d((Int32)location, (Double)x);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform1dv")]
		public static void Uniform1(Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniform1dv((Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform1dv")]
		public static void Uniform1(Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniform1dv((Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform1dv")]
		public static unsafe void Uniform1(Int32 location, Int32 count, Double* value) {
			Delegates.glUniform1dv((Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
		public static void Uniform1(Int32 location, Single v0) {
			Delegates.glUniform1f((Int32)location, (Single)v0);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
		public static void Uniform1(Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
		public static void Uniform1(Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
		public static unsafe void Uniform1(Int32 location, Int32 count, Single* value) {
			Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
		public static void Uniform1(Int32 location, Int32 v0) {
			Delegates.glUniform1i((Int32)location, (Int32)v0);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
		public static void Uniform1(Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
		public static void Uniform1(Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
		public static unsafe void Uniform1(Int32 location, Int32 count, Int32* value) {
			Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1ui")]
		public static void Uniform1(Int32 location, UInt32 v0) {
			Delegates.glUniform1ui((Int32)location, (UInt32)v0);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
		public static void Uniform1(Int32 location, Int32 count, UInt32[] value) {
			unsafe {
				fixed (UInt32* value_ptr = value) {
					Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
		public static void Uniform1(Int32 location, Int32 count, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform1uiv")]
		public static unsafe void Uniform1(Int32 location, Int32 count, UInt32* value) {
			Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform2d")]
		public static void Uniform2(Int32 location, Double x, Double y) {
			Delegates.glUniform2d((Int32)location, (Double)x, (Double)y);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform2dv")]
		public static void Uniform2(Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniform2dv((Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform2dv")]
		public static void Uniform2(Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniform2dv((Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform2dv")]
		public static unsafe void Uniform2(Int32 location, Int32 count, Double* value) {
			Delegates.glUniform2dv((Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
		public static void Uniform2(Int32 location, Single v0, Single v1) {
			Delegates.glUniform2f((Int32)location, (Single)v0, (Single)v1);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
		public static void Uniform2(Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
		public static void Uniform2(Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
		public static unsafe void Uniform2(Int32 location, Int32 count, Single* value) {
			Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
		public static void Uniform2(Int32 location, Int32 v0, Int32 v1) {
			Delegates.glUniform2i((Int32)location, (Int32)v0, (Int32)v1);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
		public static void Uniform2(Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
		public static unsafe void Uniform2(Int32 location, Int32 count, Int32* value) {
			Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2ui")]
		public static void Uniform2(Int32 location, UInt32 v0, UInt32 v1) {
			Delegates.glUniform2ui((Int32)location, (UInt32)v0, (UInt32)v1);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
		public static void Uniform2(Int32 location, Int32 count, UInt32[] value) {
			unsafe {
				fixed (UInt32* value_ptr = value) {
					Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
		public static void Uniform2(Int32 location, Int32 count, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform2uiv")]
		public static unsafe void Uniform2(Int32 location, Int32 count, UInt32* value) {
			Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform3d")]
		public static void Uniform3(Int32 location, Double x, Double y, Double z) {
			Delegates.glUniform3d((Int32)location, (Double)x, (Double)y, (Double)z);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform3dv")]
		public static void Uniform3(Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniform3dv((Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform3dv")]
		public static void Uniform3(Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniform3dv((Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform3dv")]
		public static unsafe void Uniform3(Int32 location, Int32 count, Double* value) {
			Delegates.glUniform3dv((Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
		public static void Uniform3(Int32 location, Single v0, Single v1, Single v2) {
			Delegates.glUniform3f((Int32)location, (Single)v0, (Single)v1, (Single)v2);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
		public static void Uniform3(Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
		public static void Uniform3(Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
		public static unsafe void Uniform3(Int32 location, Int32 count, Single* value) {
			Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
		public static void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2) {
			Delegates.glUniform3i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
		public static void Uniform3(Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
		public static void Uniform3(Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
		public static unsafe void Uniform3(Int32 location, Int32 count, Int32* value) {
			Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3ui")]
		public static void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) {
			Delegates.glUniform3ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
		public static void Uniform3(Int32 location, Int32 count, UInt32[] value) {
			unsafe {
				fixed (UInt32* value_ptr = value) {
					Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
		public static void Uniform3(Int32 location, Int32 count, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform3uiv")]
		public static unsafe void Uniform3(Int32 location, Int32 count, UInt32* value) {
			Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform4d")]
		public static void Uniform4(Int32 location, Double x, Double y, Double z, Double w) {
			Delegates.glUniform4d((Int32)location, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform4dv")]
		public static void Uniform4(Int32 location, Int32 count, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniform4dv((Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform4dv")]
		public static void Uniform4(Int32 location, Int32 count, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniform4dv((Int32)location, (Int32)count, (Double*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniform4dv")]
		public static unsafe void Uniform4(Int32 location, Int32 count, Double* value) {
			Delegates.glUniform4dv((Int32)location, (Int32)count, (Double*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
		public static void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3) {
			Delegates.glUniform4f((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
		public static void Uniform4(Int32 location, Int32 count, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
		public static void Uniform4(Int32 location, Int32 count, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
		public static unsafe void Uniform4(Int32 location, Int32 count, Single* value) {
			Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
		public static void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) {
			Delegates.glUniform4i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
		public static void Uniform4(Int32 location, Int32 count, Int32[] value) {
			unsafe {
				fixed (Int32* value_ptr = value) {
					Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
		public static void Uniform4(Int32 location, Int32 count, ref Int32 value) {
			unsafe {
				fixed (Int32* value_ptr = &value) {
					Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
		public static unsafe void Uniform4(Int32 location, Int32 count, Int32* value) {
			Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4ui")]
		public static void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) {
			Delegates.glUniform4ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
		public static void Uniform4(Int32 location, Int32 count, UInt32[] value) {
			unsafe {
				fixed (UInt32* value_ptr = value) {
					Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
		public static void Uniform4(Int32 location, Int32 count, ref UInt32 value) {
			unsafe {
				fixed (UInt32* value_ptr = &value) {
					Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glUniform4uiv")]
		public static unsafe void Uniform4(Int32 location, Int32 count, UInt32* value) {
			Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glUniformBlockBinding")]
		public static void UniformBlockBinding(Int32 program, Int32 uniformBlockIndex, Int32 uniformBlockBinding) {
			Delegates.glUniformBlockBinding((UInt32)program, (UInt32)uniformBlockIndex, (UInt32)uniformBlockBinding);
		}

		
		//[AutoGenerated(Category = "ARB_uniform_buffer_object", Version = "2.0", EntryPoint = "glUniformBlockBinding")]
		public static void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding) {
			Delegates.glUniformBlockBinding((UInt32)program, (UInt32)uniformBlockIndex, (UInt32)uniformBlockBinding);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2dv")]
		public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2dv")]
		public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2dv")]
		public static unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
		public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
		public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
		public static unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2x3dv")]
		public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix2x3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2x3dv")]
		public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix2x3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2x3dv")]
		public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix2x3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
		public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
		public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x3fv")]
		public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2x4dv")]
		public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix2x4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2x4dv")]
		public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix2x4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix2x4dv")]
		public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix2x4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
		public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
		public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix2x4fv")]
		public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3dv")]
		public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3dv")]
		public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3dv")]
		public static unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
		public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
		public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
		public static unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3x2dv")]
		public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix3x2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3x2dv")]
		public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix3x2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3x2dv")]
		public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix3x2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
		public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
		public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x2fv")]
		public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3x4dv")]
		public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix3x4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3x4dv")]
		public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix3x4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix3x4dv")]
		public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix3x4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
		public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
		public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix3x4fv")]
		public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4dv")]
		public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4dv")]
		public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4dv")]
		public static unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix4dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
		public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
		public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
		public static unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4x2dv")]
		public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix4x2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4x2dv")]
		public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix4x2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4x2dv")]
		public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix4x2dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
		public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
		public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x2fv")]
		public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4x3dv")]
		public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Double[] value) {
			unsafe {
				fixed (Double* value_ptr = value) {
					Delegates.glUniformMatrix4x3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4x3dv")]
		public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Double value) {
			unsafe {
				fixed (Double* value_ptr = &value) {
					Delegates.glUniformMatrix4x3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_gpu_shader_fp64", Version = "1.2", EntryPoint = "glUniformMatrix4x3dv")]
		public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Double* value) {
			Delegates.glUniformMatrix4x3dv((Int32)location, (Int32)count, (bool)transpose, (Double*)value);
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
		public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value) {
			unsafe {
				fixed (Single* value_ptr = value) {
					Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
		public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value) {
			unsafe {
				fixed (Single* value_ptr = &value) {
					Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_1", Version = "2.1", EntryPoint = "glUniformMatrix4x3fv")]
		public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value) {
			Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glUniformSubroutinesuiv")]
		public static void UniformSubroutines(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 count, Int32[] indices) {
			unsafe {
				fixed (Int32* indices_ptr = indices) {
					Delegates.glUniformSubroutinesuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)count, (UInt32*)indices_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glUniformSubroutinesuiv")]
		public static void UniformSubroutines(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 count, ref Int32 indices) {
			unsafe {
				fixed (Int32* indices_ptr = &indices) {
					Delegates.glUniformSubroutinesuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)count, (UInt32*)indices_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glUniformSubroutinesuiv")]
		public static unsafe void UniformSubroutines(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 count, Int32* indices) {
			Delegates.glUniformSubroutinesuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)count, (UInt32*)indices);
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glUniformSubroutinesuiv")]
		public static void UniformSubroutines(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 count, UInt32[] indices) {
			unsafe {
				fixed (UInt32* indices_ptr = indices) {
					Delegates.glUniformSubroutinesuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)count, (UInt32*)indices_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glUniformSubroutinesuiv")]
		public static void UniformSubroutines(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 count, ref UInt32 indices) {
			unsafe {
				fixed (UInt32* indices_ptr = &indices) {
					Delegates.glUniformSubroutinesuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)count, (UInt32*)indices_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_shader_subroutine", Version = "1.2", EntryPoint = "glUniformSubroutinesuiv")]
		public static unsafe void UniformSubroutines(Pencil.Gaming.Graphics.ShaderType shadertype, Int32 count, UInt32* indices) {
			Delegates.glUniformSubroutinesuiv((Pencil.Gaming.Graphics.ShaderType)shadertype, (Int32)count, (UInt32*)indices);
		}

		//[AutoGenerated(Category = "VERSION_1_5", Version = "1.5", EntryPoint = "glUnmapBuffer")]
		public static bool UnmapBuffer(Pencil.Gaming.Graphics.BufferTarget target) {
			return Delegates.glUnmapBuffer((Pencil.Gaming.Graphics.BufferTarget)target);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
		public static void UseProgram(Int32 program) {
			Delegates.glUseProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
		public static void UseProgram(UInt32 program) {
			Delegates.glUseProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glUseProgramStages")]
		public static void UseProgramStages(Int32 pipeline, Pencil.Gaming.Graphics.ProgramStageMask stages, Int32 program) {
			Delegates.glUseProgramStages((UInt32)pipeline, (Pencil.Gaming.Graphics.ProgramStageMask)stages, (UInt32)program);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glUseProgramStages")]
		public static void UseProgramStages(UInt32 pipeline, Pencil.Gaming.Graphics.ProgramStageMask stages, UInt32 program) {
			Delegates.glUseProgramStages((UInt32)pipeline, (Pencil.Gaming.Graphics.ProgramStageMask)stages, (UInt32)program);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
		public static void ValidateProgram(Int32 program) {
			Delegates.glValidateProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
		public static void ValidateProgram(UInt32 program) {
			Delegates.glValidateProgram((UInt32)program);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glValidateProgramPipeline")]
		public static void ValidateProgramPipeline(Int32 pipeline) {
			Delegates.glValidateProgramPipeline((UInt32)pipeline);
		}

		
		//[AutoGenerated(Category = "ARB_separate_shader_objects", Version = "4.1", EntryPoint = "glValidateProgramPipeline")]
		public static void ValidateProgramPipeline(UInt32 pipeline) {
			Delegates.glValidateProgramPipeline((UInt32)pipeline);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2d")]
		public static void Vertex2(Double x, Double y) {
			Delegates.glVertex2d((Double)x, (Double)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2dv")]
		public static void Vertex2(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertex2dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2dv")]
		public static void Vertex2(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertex2dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2dv")]
		public static unsafe void Vertex2(Double* v) {
			Delegates.glVertex2dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2f")]
		public static void Vertex2(Single x, Single y) {
			Delegates.glVertex2f((Single)x, (Single)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2fv")]
		public static void Vertex2(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertex2fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2fv")]
		public static void Vertex2(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertex2fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2fv")]
		public static unsafe void Vertex2(Single* v) {
			Delegates.glVertex2fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2i")]
		public static void Vertex2(Int32 x, Int32 y) {
			Delegates.glVertex2i((Int32)x, (Int32)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2iv")]
		public static void Vertex2(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertex2iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2iv")]
		public static void Vertex2(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertex2iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2iv")]
		public static unsafe void Vertex2(Int32* v) {
			Delegates.glVertex2iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2s")]
		public static void Vertex2(Int16 x, Int16 y) {
			Delegates.glVertex2s((Int16)x, (Int16)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2sv")]
		public static void Vertex2(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertex2sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2sv")]
		public static void Vertex2(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertex2sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex2sv")]
		public static unsafe void Vertex2(Int16* v) {
			Delegates.glVertex2sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3d")]
		public static void Vertex3(Double x, Double y, Double z) {
			Delegates.glVertex3d((Double)x, (Double)y, (Double)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3dv")]
		public static void Vertex3(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertex3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3dv")]
		public static void Vertex3(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertex3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3dv")]
		public static unsafe void Vertex3(Double* v) {
			Delegates.glVertex3dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3f")]
		public static void Vertex3(Single x, Single y, Single z) {
			Delegates.glVertex3f((Single)x, (Single)y, (Single)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3fv")]
		public static void Vertex3(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertex3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3fv")]
		public static void Vertex3(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertex3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3fv")]
		public static unsafe void Vertex3(Single* v) {
			Delegates.glVertex3fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3i")]
		public static void Vertex3(Int32 x, Int32 y, Int32 z) {
			Delegates.glVertex3i((Int32)x, (Int32)y, (Int32)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3iv")]
		public static void Vertex3(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertex3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3iv")]
		public static void Vertex3(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertex3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3iv")]
		public static unsafe void Vertex3(Int32* v) {
			Delegates.glVertex3iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3s")]
		public static void Vertex3(Int16 x, Int16 y, Int16 z) {
			Delegates.glVertex3s((Int16)x, (Int16)y, (Int16)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3sv")]
		public static void Vertex3(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertex3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3sv")]
		public static void Vertex3(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertex3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex3sv")]
		public static unsafe void Vertex3(Int16* v) {
			Delegates.glVertex3sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4d")]
		public static void Vertex4(Double x, Double y, Double z, Double w) {
			Delegates.glVertex4d((Double)x, (Double)y, (Double)z, (Double)w);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4dv")]
		public static void Vertex4(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertex4dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4dv")]
		public static void Vertex4(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertex4dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4dv")]
		public static unsafe void Vertex4(Double* v) {
			Delegates.glVertex4dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4f")]
		public static void Vertex4(Single x, Single y, Single z, Single w) {
			Delegates.glVertex4f((Single)x, (Single)y, (Single)z, (Single)w);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4fv")]
		public static void Vertex4(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertex4fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4fv")]
		public static void Vertex4(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertex4fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4fv")]
		public static unsafe void Vertex4(Single* v) {
			Delegates.glVertex4fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4i")]
		public static void Vertex4(Int32 x, Int32 y, Int32 z, Int32 w) {
			Delegates.glVertex4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4iv")]
		public static void Vertex4(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertex4iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4iv")]
		public static void Vertex4(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertex4iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4iv")]
		public static unsafe void Vertex4(Int32* v) {
			Delegates.glVertex4iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4s")]
		public static void Vertex4(Int16 x, Int16 y, Int16 z, Int16 w) {
			Delegates.glVertex4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4sv")]
		public static void Vertex4(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertex4sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4sv")]
		public static void Vertex4(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertex4sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_0_DEPRECATED", Version = "1.0", EntryPoint = "glVertex4sv")]
		public static unsafe void Vertex4(Int16* v) {
			Delegates.glVertex4sv((Int16*)v);
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
		public static void VertexAttrib1(Int32 index, Double x) {
			Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1d")]
		public static void VertexAttrib1(UInt32 index, Double x) {
			Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
		public static unsafe void VertexAttrib1(Int32 index, Double* v) {
			Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1dv")]
		public static unsafe void VertexAttrib1(UInt32 index, Double* v) {
			Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
		public static void VertexAttrib1(Int32 index, Single x) {
			Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
		public static void VertexAttrib1(UInt32 index, Single x) {
			Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
		public static unsafe void VertexAttrib1(Int32 index, Single* v) {
			Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
		public static unsafe void VertexAttrib1(UInt32 index, Single* v) {
			Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
		public static void VertexAttrib1(Int32 index, Int16 x) {
			Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1s")]
		public static void VertexAttrib1(UInt32 index, Int16 x) {
			Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
		public static unsafe void VertexAttrib1(Int32 index, Int16* v) {
			Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1sv")]
		public static unsafe void VertexAttrib1(UInt32 index, Int16* v) {
			Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
		public static void VertexAttrib2(Int32 index, Double x, Double y) {
			Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2d")]
		public static void VertexAttrib2(UInt32 index, Double x, Double y) {
			Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
		public static void VertexAttrib2(Int32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
		public static void VertexAttrib2(Int32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
		public static unsafe void VertexAttrib2(Int32 index, Double* v) {
			Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
		public static void VertexAttrib2(UInt32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
		public static void VertexAttrib2(UInt32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2dv")]
		public static unsafe void VertexAttrib2(UInt32 index, Double* v) {
			Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
		public static void VertexAttrib2(Int32 index, Single x, Single y) {
			Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
		public static void VertexAttrib2(UInt32 index, Single x, Single y) {
			Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
		public static void VertexAttrib2(Int32 index, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
		public static void VertexAttrib2(Int32 index, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
		public static unsafe void VertexAttrib2(Int32 index, Single* v) {
			Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
		public static void VertexAttrib2(UInt32 index, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
		public static void VertexAttrib2(UInt32 index, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
		public static unsafe void VertexAttrib2(UInt32 index, Single* v) {
			Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
		public static void VertexAttrib2(Int32 index, Int16 x, Int16 y) {
			Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2s")]
		public static void VertexAttrib2(UInt32 index, Int16 x, Int16 y) {
			Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
		public static void VertexAttrib2(Int32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
		public static void VertexAttrib2(Int32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
		public static unsafe void VertexAttrib2(Int32 index, Int16* v) {
			Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
		public static void VertexAttrib2(UInt32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
		public static void VertexAttrib2(UInt32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2sv")]
		public static unsafe void VertexAttrib2(UInt32 index, Int16* v) {
			Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
		public static void VertexAttrib3(Int32 index, Double x, Double y, Double z) {
			Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3d")]
		public static void VertexAttrib3(UInt32 index, Double x, Double y, Double z) {
			Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
		public static void VertexAttrib3(Int32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
		public static void VertexAttrib3(Int32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
		public static unsafe void VertexAttrib3(Int32 index, Double* v) {
			Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
		public static void VertexAttrib3(UInt32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
		public static void VertexAttrib3(UInt32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3dv")]
		public static unsafe void VertexAttrib3(UInt32 index, Double* v) {
			Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
		public static void VertexAttrib3(Int32 index, Single x, Single y, Single z) {
			Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
		public static void VertexAttrib3(UInt32 index, Single x, Single y, Single z) {
			Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
		public static void VertexAttrib3(Int32 index, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
		public static void VertexAttrib3(Int32 index, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
		public static unsafe void VertexAttrib3(Int32 index, Single* v) {
			Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
		public static void VertexAttrib3(UInt32 index, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
		public static void VertexAttrib3(UInt32 index, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
		public static unsafe void VertexAttrib3(UInt32 index, Single* v) {
			Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
		public static void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z) {
			Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3s")]
		public static void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z) {
			Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
		public static void VertexAttrib3(Int32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
		public static void VertexAttrib3(Int32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
		public static unsafe void VertexAttrib3(Int32 index, Int16* v) {
			Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
		public static void VertexAttrib3(UInt32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
		public static void VertexAttrib3(UInt32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3sv")]
		public static unsafe void VertexAttrib3(UInt32 index, Int16* v) {
			Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
		public static void VertexAttrib4(UInt32 index, SByte[] v) {
			unsafe {
				fixed (SByte* v_ptr = v) {
					Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
		public static void VertexAttrib4(UInt32 index, ref SByte v) {
			unsafe {
				fixed (SByte* v_ptr = &v) {
					Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4bv")]
		public static unsafe void VertexAttrib4(UInt32 index, SByte* v) {
			Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
		public static void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w) {
			Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4d")]
		public static void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w) {
			Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
		public static void VertexAttrib4(Int32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
		public static void VertexAttrib4(Int32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
		public static unsafe void VertexAttrib4(Int32 index, Double* v) {
			Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
		public static void VertexAttrib4(UInt32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
		public static void VertexAttrib4(UInt32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4dv")]
		public static unsafe void VertexAttrib4(UInt32 index, Double* v) {
			Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
		public static void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w) {
			Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
		public static void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w) {
			Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
		public static void VertexAttrib4(Int32 index, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
		public static void VertexAttrib4(Int32 index, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
		public static unsafe void VertexAttrib4(Int32 index, Single* v) {
			Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
		public static void VertexAttrib4(UInt32 index, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
		public static void VertexAttrib4(UInt32 index, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
		public static unsafe void VertexAttrib4(UInt32 index, Single* v) {
			Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
		public static void VertexAttrib4(Int32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
		public static void VertexAttrib4(Int32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
		public static unsafe void VertexAttrib4(Int32 index, Int32* v) {
			Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
		public static void VertexAttrib4(UInt32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
		public static void VertexAttrib4(UInt32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4iv")]
		public static unsafe void VertexAttrib4(UInt32 index, Int32* v) {
			Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
		public static void VertexAttrib4N(UInt32 index, SByte[] v) {
			unsafe {
				fixed (SByte* v_ptr = v) {
					Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
		public static void VertexAttrib4N(UInt32 index, ref SByte v) {
			unsafe {
				fixed (SByte* v_ptr = &v) {
					Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nbv")]
		public static unsafe void VertexAttrib4N(UInt32 index, SByte* v) {
			Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
		public static void VertexAttrib4N(Int32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
		public static void VertexAttrib4N(Int32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
		public static unsafe void VertexAttrib4N(Int32 index, Int32* v) {
			Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
		public static void VertexAttrib4N(UInt32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
		public static void VertexAttrib4N(UInt32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Niv")]
		public static unsafe void VertexAttrib4N(UInt32 index, Int32* v) {
			Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
		public static void VertexAttrib4N(Int32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
		public static void VertexAttrib4N(Int32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
		public static unsafe void VertexAttrib4N(Int32 index, Int16* v) {
			Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
		public static void VertexAttrib4N(UInt32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
		public static void VertexAttrib4N(UInt32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nsv")]
		public static unsafe void VertexAttrib4N(UInt32 index, Int16* v) {
			Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
		public static void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w) {
			Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nub")]
		public static void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w) {
			Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
		public static void VertexAttrib4N(Int32 index, Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
		public static void VertexAttrib4N(Int32 index, ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
		public static unsafe void VertexAttrib4N(Int32 index, Byte* v) {
			Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
		public static void VertexAttrib4N(UInt32 index, Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
		public static void VertexAttrib4N(UInt32 index, ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nubv")]
		public static unsafe void VertexAttrib4N(UInt32 index, Byte* v) {
			Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
		public static void VertexAttrib4N(UInt32 index, UInt32[] v) {
			unsafe {
				fixed (UInt32* v_ptr = v) {
					Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
		public static void VertexAttrib4N(UInt32 index, ref UInt32 v) {
			unsafe {
				fixed (UInt32* v_ptr = &v) {
					Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nuiv")]
		public static unsafe void VertexAttrib4N(UInt32 index, UInt32* v) {
			Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
		public static void VertexAttrib4N(UInt32 index, UInt16[] v) {
			unsafe {
				fixed (UInt16* v_ptr = v) {
					Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
		public static void VertexAttrib4N(UInt32 index, ref UInt16 v) {
			unsafe {
				fixed (UInt16* v_ptr = &v) {
					Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4Nusv")]
		public static unsafe void VertexAttrib4N(UInt32 index, UInt16* v) {
			Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
		public static void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w) {
			Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4s")]
		public static void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w) {
			Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
		public static void VertexAttrib4(Int32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
		public static void VertexAttrib4(Int32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
		public static unsafe void VertexAttrib4(Int32 index, Int16* v) {
			Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
		public static void VertexAttrib4(UInt32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
		public static void VertexAttrib4(UInt32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4sv")]
		public static unsafe void VertexAttrib4(UInt32 index, Int16* v) {
			Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
		public static void VertexAttrib4(Int32 index, Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
		public static void VertexAttrib4(Int32 index, ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
		public static unsafe void VertexAttrib4(Int32 index, Byte* v) {
			Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
		public static void VertexAttrib4(UInt32 index, Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
		public static void VertexAttrib4(UInt32 index, ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4ubv")]
		public static unsafe void VertexAttrib4(UInt32 index, Byte* v) {
			Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
		public static void VertexAttrib4(UInt32 index, UInt32[] v) {
			unsafe {
				fixed (UInt32* v_ptr = v) {
					Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
		public static void VertexAttrib4(UInt32 index, ref UInt32 v) {
			unsafe {
				fixed (UInt32* v_ptr = &v) {
					Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4uiv")]
		public static unsafe void VertexAttrib4(UInt32 index, UInt32* v) {
			Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
		public static void VertexAttrib4(UInt32 index, UInt16[] v) {
			unsafe {
				fixed (UInt16* v_ptr = v) {
					Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
		public static void VertexAttrib4(UInt32 index, ref UInt16 v) {
			unsafe {
				fixed (UInt16* v_ptr = &v) {
					Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4usv")]
		public static unsafe void VertexAttrib4(UInt32 index, UInt16* v) {
			Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
		}

		
		//[AutoGenerated(Category = "VERSION_3_3", Version = "1.1", EntryPoint = "glVertexAttribDivisor")]
		public static void VertexAttribDivisor(Int32 index, Int32 divisor) {
			Delegates.glVertexAttribDivisor((UInt32)index, (UInt32)divisor);
		}

		
		//[AutoGenerated(Category = "VERSION_3_3", Version = "1.1", EntryPoint = "glVertexAttribDivisor")]
		public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) {
			Delegates.glVertexAttribDivisor((UInt32)index, (UInt32)divisor);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
		public static void VertexAttribI1(Int32 index, Int32 x) {
			Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1i")]
		public static void VertexAttribI1(UInt32 index, Int32 x) {
			Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
		public static unsafe void VertexAttribI1(Int32 index, Int32* v) {
			Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1iv")]
		public static unsafe void VertexAttribI1(UInt32 index, Int32* v) {
			Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1ui")]
		public static void VertexAttribI1(UInt32 index, UInt32 x) {
			Delegates.glVertexAttribI1ui((UInt32)index, (UInt32)x);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI1uiv")]
		public static unsafe void VertexAttribI1(UInt32 index, UInt32* v) {
			Delegates.glVertexAttribI1uiv((UInt32)index, (UInt32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
		public static void VertexAttribI2(Int32 index, Int32 x, Int32 y) {
			Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2i")]
		public static void VertexAttribI2(UInt32 index, Int32 x, Int32 y) {
			Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
		public static void VertexAttribI2(Int32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
		public static void VertexAttribI2(Int32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
		public static unsafe void VertexAttribI2(Int32 index, Int32* v) {
			Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
		public static void VertexAttribI2(UInt32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
		public static void VertexAttribI2(UInt32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2iv")]
		public static unsafe void VertexAttribI2(UInt32 index, Int32* v) {
			Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2ui")]
		public static void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y) {
			Delegates.glVertexAttribI2ui((UInt32)index, (UInt32)x, (UInt32)y);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
		public static void VertexAttribI2(UInt32 index, UInt32[] v) {
			unsafe {
				fixed (UInt32* v_ptr = v) {
					Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
		public static void VertexAttribI2(UInt32 index, ref UInt32 v) {
			unsafe {
				fixed (UInt32* v_ptr = &v) {
					Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI2uiv")]
		public static unsafe void VertexAttribI2(UInt32 index, UInt32* v) {
			Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
		public static void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z) {
			Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3i")]
		public static void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z) {
			Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
		public static void VertexAttribI3(Int32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
		public static void VertexAttribI3(Int32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
		public static unsafe void VertexAttribI3(Int32 index, Int32* v) {
			Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
		public static void VertexAttribI3(UInt32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
		public static void VertexAttribI3(UInt32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3iv")]
		public static unsafe void VertexAttribI3(UInt32 index, Int32* v) {
			Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3ui")]
		public static void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z) {
			Delegates.glVertexAttribI3ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
		public static void VertexAttribI3(UInt32 index, UInt32[] v) {
			unsafe {
				fixed (UInt32* v_ptr = v) {
					Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
		public static void VertexAttribI3(UInt32 index, ref UInt32 v) {
			unsafe {
				fixed (UInt32* v_ptr = &v) {
					Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI3uiv")]
		public static unsafe void VertexAttribI3(UInt32 index, UInt32* v) {
			Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
		public static void VertexAttribI4(UInt32 index, SByte[] v) {
			unsafe {
				fixed (SByte* v_ptr = v) {
					Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
		public static void VertexAttribI4(UInt32 index, ref SByte v) {
			unsafe {
				fixed (SByte* v_ptr = &v) {
					Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4bv")]
		public static unsafe void VertexAttribI4(UInt32 index, SByte* v) {
			Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
		public static void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w) {
			Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4i")]
		public static void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w) {
			Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
		public static void VertexAttribI4(Int32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
		public static void VertexAttribI4(Int32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
		public static unsafe void VertexAttribI4(Int32 index, Int32* v) {
			Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
		public static void VertexAttribI4(UInt32 index, Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
		public static void VertexAttribI4(UInt32 index, ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4iv")]
		public static unsafe void VertexAttribI4(UInt32 index, Int32* v) {
			Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
		public static void VertexAttribI4(Int32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
		public static void VertexAttribI4(Int32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
		public static unsafe void VertexAttribI4(Int32 index, Int16* v) {
			Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
		public static void VertexAttribI4(UInt32 index, Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
		public static void VertexAttribI4(UInt32 index, ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4sv")]
		public static unsafe void VertexAttribI4(UInt32 index, Int16* v) {
			Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
		public static void VertexAttribI4(Int32 index, Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
		public static void VertexAttribI4(Int32 index, ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
		public static unsafe void VertexAttribI4(Int32 index, Byte* v) {
			Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
		public static void VertexAttribI4(UInt32 index, Byte[] v) {
			unsafe {
				fixed (Byte* v_ptr = v) {
					Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
		public static void VertexAttribI4(UInt32 index, ref Byte v) {
			unsafe {
				fixed (Byte* v_ptr = &v) {
					Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ubv")]
		public static unsafe void VertexAttribI4(UInt32 index, Byte* v) {
			Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4ui")]
		public static void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w) {
			Delegates.glVertexAttribI4ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
		public static void VertexAttribI4(UInt32 index, UInt32[] v) {
			unsafe {
				fixed (UInt32* v_ptr = v) {
					Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
		public static void VertexAttribI4(UInt32 index, ref UInt32 v) {
			unsafe {
				fixed (UInt32* v_ptr = &v) {
					Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4uiv")]
		public static unsafe void VertexAttribI4(UInt32 index, UInt32* v) {
			Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
		public static void VertexAttribI4(UInt32 index, UInt16[] v) {
			unsafe {
				fixed (UInt16* v_ptr = v) {
					Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
		public static void VertexAttribI4(UInt32 index, ref UInt16 v) {
			unsafe {
				fixed (UInt16* v_ptr = &v) {
					Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribI4usv")]
		public static unsafe void VertexAttribI4(UInt32 index, UInt16* v) {
			Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer<T4>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T4)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "VERSION_3_0", Version = "3.0", EntryPoint = "glVertexAttribIPointer")]
		public static void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribIPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T4)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL1d")]
		public static void VertexAttribL1(Int32 index, Double x) {
			Delegates.glVertexAttribL1d((UInt32)index, (Double)x);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL1d")]
		public static void VertexAttribL1(UInt32 index, Double x) {
			Delegates.glVertexAttribL1d((UInt32)index, (Double)x);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL1dv")]
		public static unsafe void VertexAttribL1(Int32 index, Double* v) {
			Delegates.glVertexAttribL1dv((UInt32)index, (Double*)v);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL1dv")]
		public static unsafe void VertexAttribL1(UInt32 index, Double* v) {
			Delegates.glVertexAttribL1dv((UInt32)index, (Double*)v);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL2d")]
		public static void VertexAttribL2(Int32 index, Double x, Double y) {
			Delegates.glVertexAttribL2d((UInt32)index, (Double)x, (Double)y);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL2d")]
		public static void VertexAttribL2(UInt32 index, Double x, Double y) {
			Delegates.glVertexAttribL2d((UInt32)index, (Double)x, (Double)y);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
		public static void VertexAttribL2(Int32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttribL2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
		public static void VertexAttribL2(Int32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttribL2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
		public static unsafe void VertexAttribL2(Int32 index, Double* v) {
			Delegates.glVertexAttribL2dv((UInt32)index, (Double*)v);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
		public static void VertexAttribL2(UInt32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttribL2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
		public static void VertexAttribL2(UInt32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttribL2dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL2dv")]
		public static unsafe void VertexAttribL2(UInt32 index, Double* v) {
			Delegates.glVertexAttribL2dv((UInt32)index, (Double*)v);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL3d")]
		public static void VertexAttribL3(Int32 index, Double x, Double y, Double z) {
			Delegates.glVertexAttribL3d((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL3d")]
		public static void VertexAttribL3(UInt32 index, Double x, Double y, Double z) {
			Delegates.glVertexAttribL3d((UInt32)index, (Double)x, (Double)y, (Double)z);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
		public static void VertexAttribL3(Int32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttribL3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
		public static void VertexAttribL3(Int32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttribL3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
		public static unsafe void VertexAttribL3(Int32 index, Double* v) {
			Delegates.glVertexAttribL3dv((UInt32)index, (Double*)v);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
		public static void VertexAttribL3(UInt32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttribL3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
		public static void VertexAttribL3(UInt32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttribL3dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL3dv")]
		public static unsafe void VertexAttribL3(UInt32 index, Double* v) {
			Delegates.glVertexAttribL3dv((UInt32)index, (Double*)v);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL4d")]
		public static void VertexAttribL4(Int32 index, Double x, Double y, Double z, Double w) {
			Delegates.glVertexAttribL4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL4d")]
		public static void VertexAttribL4(UInt32 index, Double x, Double y, Double z, Double w) {
			Delegates.glVertexAttribL4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
		public static void VertexAttribL4(Int32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttribL4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
		public static void VertexAttribL4(Int32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttribL4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
		public static unsafe void VertexAttribL4(Int32 index, Double* v) {
			Delegates.glVertexAttribL4dv((UInt32)index, (Double*)v);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
		public static void VertexAttribL4(UInt32 index, Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glVertexAttribL4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
		public static void VertexAttribL4(UInt32 index, ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glVertexAttribL4dv((UInt32)index, (Double*)v_ptr);
				}
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribL4dv")]
		public static unsafe void VertexAttribL4(UInt32 index, Double* v) {
			Delegates.glVertexAttribL4dv((UInt32)index, (Double*)v);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer<T4>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T4)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer);
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute] T4[,,] pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_attrib_64bit", Version = "4.1", EntryPoint = "glVertexAttribLPointer")]
		public static void VertexAttribLPointer<T4>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribDPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T4 pointer)
			where T4 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribLPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribDPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T4)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP1ui")]
		public static void VertexAttribP1(Int32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, Int32 value) {
			Delegates.glVertexAttribP1ui((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP1ui")]
		public static void VertexAttribP1(UInt32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, UInt32 value) {
			Delegates.glVertexAttribP1ui((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP1uiv")]
		public static unsafe void VertexAttribP1(Int32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, Int32* value) {
			Delegates.glVertexAttribP1uiv((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP1uiv")]
		public static unsafe void VertexAttribP1(UInt32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, UInt32* value) {
			Delegates.glVertexAttribP1uiv((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP2ui")]
		public static void VertexAttribP2(Int32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, Int32 value) {
			Delegates.glVertexAttribP2ui((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP2ui")]
		public static void VertexAttribP2(UInt32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, UInt32 value) {
			Delegates.glVertexAttribP2ui((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP2uiv")]
		public static unsafe void VertexAttribP2(Int32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, Int32* value) {
			Delegates.glVertexAttribP2uiv((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP2uiv")]
		public static unsafe void VertexAttribP2(UInt32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, UInt32* value) {
			Delegates.glVertexAttribP2uiv((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP3ui")]
		public static void VertexAttribP3(Int32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, Int32 value) {
			Delegates.glVertexAttribP3ui((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP3ui")]
		public static void VertexAttribP3(UInt32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, UInt32 value) {
			Delegates.glVertexAttribP3ui((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP3uiv")]
		public static unsafe void VertexAttribP3(Int32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, Int32* value) {
			Delegates.glVertexAttribP3uiv((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP3uiv")]
		public static unsafe void VertexAttribP3(UInt32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, UInt32* value) {
			Delegates.glVertexAttribP3uiv((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP4ui")]
		public static void VertexAttribP4(Int32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, Int32 value) {
			Delegates.glVertexAttribP4ui((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP4ui")]
		public static void VertexAttribP4(UInt32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, UInt32 value) {
			Delegates.glVertexAttribP4ui((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP4uiv")]
		public static unsafe void VertexAttribP4(Int32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, Int32* value) {
			Delegates.glVertexAttribP4uiv((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexAttribP4uiv")]
		public static unsafe void VertexAttribP4(UInt32 index, Pencil.Gaming.Graphics.PackedPointerType type, bool normalized, UInt32* value) {
			Delegates.glVertexAttribP4uiv((UInt32)index, (Pencil.Gaming.Graphics.PackedPointerType)type, (bool)normalized, (UInt32*)value);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer) {
			Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer<T5>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
			where T5 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer<T5>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
			where T5 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer<T5>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
			where T5 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer<T5>(Int32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
			where T5 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T5)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer) {
			Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
			where T5 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
			where T5 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
			where T5 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}

		
		//[AutoGenerated(Category = "VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
		public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, Pencil.Gaming.Graphics.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
			where T5 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Pencil.Gaming.Graphics.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T5)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP2ui")]
		public static void VertexP2(Pencil.Gaming.Graphics.PackedPointerType type, Int32 value) {
			Delegates.glVertexP2ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP2ui")]
		public static void VertexP2(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 value) {
			Delegates.glVertexP2ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP2uiv")]
		public static unsafe void VertexP2(Pencil.Gaming.Graphics.PackedPointerType type, Int32* value) {
			Delegates.glVertexP2uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP2uiv")]
		public static unsafe void VertexP2(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* value) {
			Delegates.glVertexP2uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP3ui")]
		public static void VertexP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32 value) {
			Delegates.glVertexP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP3ui")]
		public static void VertexP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 value) {
			Delegates.glVertexP3ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP3uiv")]
		public static unsafe void VertexP3(Pencil.Gaming.Graphics.PackedPointerType type, Int32* value) {
			Delegates.glVertexP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP3uiv")]
		public static unsafe void VertexP3(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* value) {
			Delegates.glVertexP3uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP4ui")]
		public static void VertexP4(Pencil.Gaming.Graphics.PackedPointerType type, Int32 value) {
			Delegates.glVertexP4ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP4ui")]
		public static void VertexP4(Pencil.Gaming.Graphics.PackedPointerType type, UInt32 value) {
			Delegates.glVertexP4ui((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP4uiv")]
		public static unsafe void VertexP4(Pencil.Gaming.Graphics.PackedPointerType type, Int32* value) {
			Delegates.glVertexP4uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)value);
		}

		//[AutoGenerated(Category = "ARB_vertex_type_2_10_10_10_rev", Version = "1.2", EntryPoint = "glVertexP4uiv")]
		public static unsafe void VertexP4(Pencil.Gaming.Graphics.PackedPointerType type, UInt32* value) {
			Delegates.glVertexP4uiv((Pencil.Gaming.Graphics.PackedPointerType)type, (UInt32*)value);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
		public static void VertexPointer(Int32 size, Pencil.Gaming.Graphics.VertexPointerType type, Int32 stride, IntPtr pointer) {
			Delegates.glVertexPointer((Int32)size, (Pencil.Gaming.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
		public static void VertexPointer<T3>(Int32 size, Pencil.Gaming.Graphics.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexPointer((Int32)size, (Pencil.Gaming.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
		public static void VertexPointer<T3>(Int32 size, Pencil.Gaming.Graphics.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexPointer((Int32)size, (Pencil.Gaming.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
		public static void VertexPointer<T3>(Int32 size, Pencil.Gaming.Graphics.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] T3[,,] pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexPointer((Int32)size, (Pencil.Gaming.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_1_DEPRECATED", Version = "1.1", EntryPoint = "glVertexPointer")]
		public static void VertexPointer<T3>(Int32 size, Pencil.Gaming.Graphics.VertexPointerType type, Int32 stride, [InAttribute, OutAttribute] ref T3 pointer)
			where T3 : struct {
			GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				Delegates.glVertexPointer((Int32)size, (Pencil.Gaming.Graphics.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
				pointer = (T3)pointer_ptr.Target;
			} finally {
				pointer_ptr.Free();
			}
		}
		#endif

		
		//[AutoGenerated(Category = "VERSION_1_0", Version = "1.0", EntryPoint = "glViewport")]
		public static void Viewport(Int32 x, Int32 y, Int32 width, Int32 height) {
			Delegates.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportArrayv")]
		public static void ViewportArray(Int32 first, Int32 count, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glViewportArrayv((UInt32)first, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportArrayv")]
		public static void ViewportArray(Int32 first, Int32 count, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glViewportArrayv((UInt32)first, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportArrayv")]
		public static unsafe void ViewportArray(Int32 first, Int32 count, Single* v) {
			Delegates.glViewportArrayv((UInt32)first, (Int32)count, (Single*)v);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportArrayv")]
		public static void ViewportArray(UInt32 first, Int32 count, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glViewportArrayv((UInt32)first, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportArrayv")]
		public static void ViewportArray(UInt32 first, Int32 count, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glViewportArrayv((UInt32)first, (Int32)count, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportArrayv")]
		public static unsafe void ViewportArray(UInt32 first, Int32 count, Single* v) {
			Delegates.glViewportArrayv((UInt32)first, (Int32)count, (Single*)v);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportIndexedf")]
		public static void ViewportIndexed(Int32 index, Single x, Single y, Single w, Single h) {
			Delegates.glViewportIndexedf((UInt32)index, (Single)x, (Single)y, (Single)w, (Single)h);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportIndexedf")]
		public static void ViewportIndexed(UInt32 index, Single x, Single y, Single w, Single h) {
			Delegates.glViewportIndexedf((UInt32)index, (Single)x, (Single)y, (Single)w, (Single)h);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
		public static void ViewportIndexed(Int32 index, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glViewportIndexedfv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
		public static void ViewportIndexed(Int32 index, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glViewportIndexedfv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
		public static unsafe void ViewportIndexed(Int32 index, Single* v) {
			Delegates.glViewportIndexedfv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
		public static void ViewportIndexed(UInt32 index, Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glViewportIndexedfv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
		public static void ViewportIndexed(UInt32 index, ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glViewportIndexedfv((UInt32)index, (Single*)v_ptr);
				}
			}
		}

		
		//[AutoGenerated(Category = "ARB_viewport_array", Version = "4.1", EntryPoint = "glViewportIndexedfv")]
		public static unsafe void ViewportIndexed(UInt32 index, Single* v) {
			Delegates.glViewportIndexedfv((UInt32)index, (Single*)v);
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glWaitSync")]
		public static void WaitSync(IntPtr sync, Int32 flags, Int64 timeout) {
			Delegates.glWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
		}

		
		//[AutoGenerated(Category = "ARB_sync", Version = "1.2", EntryPoint = "glWaitSync")]
		public static void WaitSync(IntPtr sync, UInt32 flags, UInt64 timeout) {
			Delegates.glWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
		}

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2d")]
		public static void WindowPos2(Double x, Double y) {
			Delegates.glWindowPos2d((Double)x, (Double)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2dv")]
		public static void WindowPos2(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glWindowPos2dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2dv")]
		public static void WindowPos2(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glWindowPos2dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2dv")]
		public static unsafe void WindowPos2(Double* v) {
			Delegates.glWindowPos2dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2f")]
		public static void WindowPos2(Single x, Single y) {
			Delegates.glWindowPos2f((Single)x, (Single)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2fv")]
		public static void WindowPos2(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glWindowPos2fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2fv")]
		public static void WindowPos2(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glWindowPos2fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2fv")]
		public static unsafe void WindowPos2(Single* v) {
			Delegates.glWindowPos2fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2i")]
		public static void WindowPos2(Int32 x, Int32 y) {
			Delegates.glWindowPos2i((Int32)x, (Int32)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2iv")]
		public static void WindowPos2(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glWindowPos2iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2iv")]
		public static void WindowPos2(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glWindowPos2iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2iv")]
		public static unsafe void WindowPos2(Int32* v) {
			Delegates.glWindowPos2iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2s")]
		public static void WindowPos2(Int16 x, Int16 y) {
			Delegates.glWindowPos2s((Int16)x, (Int16)y);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2sv")]
		public static void WindowPos2(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glWindowPos2sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2sv")]
		public static void WindowPos2(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glWindowPos2sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos2sv")]
		public static unsafe void WindowPos2(Int16* v) {
			Delegates.glWindowPos2sv((Int16*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3d")]
		public static void WindowPos3(Double x, Double y, Double z) {
			Delegates.glWindowPos3d((Double)x, (Double)y, (Double)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3dv")]
		public static void WindowPos3(Double[] v) {
			unsafe {
				fixed (Double* v_ptr = v) {
					Delegates.glWindowPos3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3dv")]
		public static void WindowPos3(ref Double v) {
			unsafe {
				fixed (Double* v_ptr = &v) {
					Delegates.glWindowPos3dv((Double*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3dv")]
		public static unsafe void WindowPos3(Double* v) {
			Delegates.glWindowPos3dv((Double*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3f")]
		public static void WindowPos3(Single x, Single y, Single z) {
			Delegates.glWindowPos3f((Single)x, (Single)y, (Single)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3fv")]
		public static void WindowPos3(Single[] v) {
			unsafe {
				fixed (Single* v_ptr = v) {
					Delegates.glWindowPos3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3fv")]
		public static void WindowPos3(ref Single v) {
			unsafe {
				fixed (Single* v_ptr = &v) {
					Delegates.glWindowPos3fv((Single*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3fv")]
		public static unsafe void WindowPos3(Single* v) {
			Delegates.glWindowPos3fv((Single*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3i")]
		public static void WindowPos3(Int32 x, Int32 y, Int32 z) {
			Delegates.glWindowPos3i((Int32)x, (Int32)y, (Int32)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3iv")]
		public static void WindowPos3(Int32[] v) {
			unsafe {
				fixed (Int32* v_ptr = v) {
					Delegates.glWindowPos3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3iv")]
		public static void WindowPos3(ref Int32 v) {
			unsafe {
				fixed (Int32* v_ptr = &v) {
					Delegates.glWindowPos3iv((Int32*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3iv")]
		public static unsafe void WindowPos3(Int32* v) {
			Delegates.glWindowPos3iv((Int32*)v);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3s")]
		public static void WindowPos3(Int16 x, Int16 y, Int16 z) {
			Delegates.glWindowPos3s((Int16)x, (Int16)y, (Int16)z);
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3sv")]
		public static void WindowPos3(Int16[] v) {
			unsafe {
				fixed (Int16* v_ptr = v) {
					Delegates.glWindowPos3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3sv")]
		public static void WindowPos3(ref Int16 v) {
			unsafe {
				fixed (Int16* v_ptr = &v) {
					Delegates.glWindowPos3sv((Int16*)v_ptr);
				}
			}
		}
		#endif

		#if USE_GL_COMPAT
		//[AutoGenerated(Category = "VERSION_1_4_DEPRECATED", Version = "1.4", EntryPoint = "glWindowPos3sv")]
		public static unsafe void WindowPos3(Int16* v) {
			Delegates.glWindowPos3sv((Int16*)v);
		}
		#endif
	}
}
